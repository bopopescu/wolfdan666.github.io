<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>单林敏的博客</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wolfdan.cn/"/>
  <updated>2019-10-22T05:15:48.624Z</updated>
  <id>https://www.wolfdan.cn/</id>
  
  <author>
    <name>单林敏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fatal: in unpopulated submodule XXX &amp;&amp; hexo themes 下一个文件夹无法git push</title>
    <link href="https://www.wolfdan.cn/fatal-in-unpopulated-submodule-XXX-hexo-themes-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95git-push/"/>
    <id>https://www.wolfdan.cn/fatal-in-unpopulated-submodule-XXX-hexo-themes-下一个文件夹无法git-push/</id>
    <published>2019-10-19T14:46:22.000Z</published>
    <updated>2019-10-22T05:15:48.624Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="源"><a href="#源" class="headerlink" title="源"></a>源</h1><p>我是喜欢使用云端私有库备份文件让自己实现多设备写hexo的,不太会的朋友可以看借鉴这篇文章在自己的电脑搭建环境<a href="https://www.wolfdan.cn/%E5%9C%A8could-studio%E5%90%8C%E6%AD%A5%E5%86%99Hexo/">在另一个终端上同步写Hexo</a></p><p>然后自己有一天从next改用了<a href="https://github.com/leafjame/hexo-theme-next5-leaf" target="_blank" rel="noopener">北宸哥的开源魔改的next-leaf</a>便有了此文</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><a href="https://github.com/leafjame/hexo-theme-next5-leaf/issues/3" target="_blank" rel="noopener">过程</a></p><h1 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h1><p>跑到themes目录下,然后执行以下操作<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm -rf --cached leaf</span><br><span class="line">git add leaf/*</span><br></pre></td></tr></table></figure></div><p></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>因为leaf是从另一个第三方的仓库克隆的，在执行git add的时候”fatal: in unpopulated submodule ***“ 错误</p><p>所以我们删除掉这个库文件的cached就行了</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/zixiao217/article/details/86693854" target="_blank" rel="noopener">git add出现 “fatal: in unpopulated submodule XXX” 错误</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      fatal- in unpopulated submodule XXX &amp;&amp; hexo themes 下一个文件夹无法git push 因为leaf是从另一个第三方的仓库克隆的，在执行git add的时候&quot;fatal—— in unpopulated submodule \*\*\*&quot; 错误,所以我们删除掉这个库文件的cached就行了
    
    </summary>
    
      <category term="hexo" scheme="https://www.wolfdan.cn/categories/hexo/"/>
    
    
      <category term="瞎折腾" scheme="https://www.wolfdan.cn/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
      <category term="hexo" scheme="https://www.wolfdan.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第26周[26/100]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC26%E5%91%A8-26-100/"/>
    <id>https://www.wolfdan.cn/ARST打卡第26周-26-100/</id>
    <published>2019-10-19T12:08:53.000Z</published>
    <updated>2019-10-22T05:15:48.622Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:13 GMT+0800 (GMT+08:00) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/codeforces593B-Alice-and-the-List-of-Presents-math-%E7%BB%84%E5%90%88-%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-36-100/">codeforces593B.Alice and the List of Presents_math_组合_思维_算法日常[36/100]</a></p><p><a href="https://www.wolfdan.cn/codeforces592-1244E-Minimizing-Difference-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-35-100/">codeforces592_1244E Minimizing Difference_算法日常[35/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@angrytherapist/finding-the-perfect-partner-vs-finding-the-perfect-in-your-partner-cf953a09f07a" target="_blank" rel="noopener">Finding the perfect partner vs. Finding the perfect in your partner</a><br>没有完美的伴侣，只有合理的目光</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://www.imooc.com/article/40820" target="_blank" rel="noopener">教你如何解析未备案的域名到国内服务器—不行的—直接看评论!!!</a><br>Google和火狐不会报错说是你没备案，然后我折腾了6小时，后面无意在知乎发现未备案不行…</p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Deepin%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AEqq%E5%92%8C%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%88%AA%E5%9B%BE%E7%AD%89%E5%BF%AB%E6%8D%B7%E9%94%AE/">Deepin添加设置qq和微信的截图等快捷键</a></p><p><a href="https://www.wolfdan.cn/fatal-in-unpopulated-submodule-XXX-hexo-themes-下一个文件夹无法git-push/">fatal: in unpopulated submodule XXX &amp;&amp; hexo themes 下一个文件夹无法git push</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      ARST打卡第26周 codeforces593B.Alice and the List of Presents_math_组合_思维 codeforces592_1244E Minimizing Difference Finding the perfect partner vs. Finding the perfect in your partner 教你如何解析未备案的域名到国内服务器--不行的 Deepin添加设置qq和微信的截图等快捷键 fatal-in unpopulated submodule XXX &amp;&amp; hexo themes 下一个文件夹无法git push
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>codeforces593B.Alice and the List of Presents_math_组合_思维_算法日常[36/100]</title>
    <link href="https://www.wolfdan.cn/codeforces593B-Alice-and-the-List-of-Presents-math-%E7%BB%84%E5%90%88-%E6%80%9D%E7%BB%B4-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-36-100/"/>
    <id>https://www.wolfdan.cn/codeforces593B-Alice-and-the-List-of-Presents-math-组合-思维-算法日常-36-100/</id>
    <published>2019-10-18T08:25:50.000Z</published>
    <updated>2019-10-22T05:15:48.623Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1236/problem/B" target="_blank" rel="noopener">codeforces593B.Alice and the List of Presents</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>n种礼物,每种无限个</li><li>然后m个朋友对应m个盒子</li><li>每个盒子中的每种礼物最多一个</li><li>每种礼物都应该被放置出去至少一个</li><li>求放置的方法数量</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>考虑每种礼物(共有n种)的放置方式，有m个盒子，tp = C(n 1)+C(n 2)+…+C(n n) = 2^n - 1</li><li>然后总共有n种，所以选择n次，也就是tp^n</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;qpow(qpow(<span class="number">2</span>,m)<span class="number">-1</span>,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      codeforces593B.Alice and the List of Presents_math_组合_思维_算法日常[36/100]
    
    </summary>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="math" scheme="https://www.wolfdan.cn/tags/math/"/>
    
      <category term="组合" scheme="https://www.wolfdan.cn/tags/%E7%BB%84%E5%90%88/"/>
    
      <category term="思维" scheme="https://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>codeforces592_1244E Minimizing Difference_算法日常[35/100]</title>
    <link href="https://www.wolfdan.cn/codeforces592-1244E-Minimizing-Difference-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-35-100/"/>
    <id>https://www.wolfdan.cn/codeforces592-1244E-Minimizing-Difference-算法日常-35-100/</id>
    <published>2019-10-15T14:18:54.000Z</published>
    <updated>2019-10-17T11:20:27.013Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1244/problem/E" target="_blank" rel="noopener">codeforces592_1244E Minimizing Difference</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>先sort</li><li>判断最大差距和是否在k次内,是则答案为0(if you can perform the aforementioned operation no more than k times.)(<del>沙雕我看题不仔细以为必须处理k次</del>)</li><li>通过不断地在左右两边已经遍历到的部分的一整块依次进行加减操作(左边增加,右边减少),然后达到最大最小值靠近的目的</li></ul><p>我一开始写的还分权值操作,但是发现只要: <strong>让左右总是保持着相同的宽度权重,然后左右之间能均摊到的剩下的k的高度是一样的!!!所以不管k还够不够分,把k加到哪一边都是一样的</strong></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>我的代码太丑了,于是就放大佬的代码吧<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// By LittleBeetle, contest: Codeforces Round #592 (Div. 2), problem: (E) Minimizing Difference, Accepted, #, hack it!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000020</span>;</span><br><span class="line"><span class="keyword">int</span> n,i,j,a[N],mid,opt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k,s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">mid=n+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mid;i++)</span><br><span class="line">s+=a[mid]-a[i];</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=n;i++)</span><br><span class="line">s+=a[i]-a[mid];</span><br><span class="line"><span class="keyword">if</span>(s&lt;=k)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=<span class="number">1</span>;j=n;</span><br><span class="line">opt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i+<span class="number">1</span>&lt;j)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1l</span>l*(a[i+<span class="number">1</span>]-a[i])*i&lt;=k)&#123;</span><br><span class="line">k-=<span class="number">1l</span>l*(a[i+<span class="number">1</span>]-a[i])*i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[i]+=k/i;</span><br><span class="line">opt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1l</span>l*(a[j]-a[j<span class="number">-1</span>])*(n-j+<span class="number">1</span>)&lt;=k)&#123;</span><br><span class="line">k-=<span class="number">1l</span>l*(a[j]-a[j<span class="number">-1</span>])*(n-j+<span class="number">1</span>);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">a[j]-=k/(n-j+<span class="number">1</span>);</span><br><span class="line">opt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>==j&amp;&amp;opt==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]-a[i]-k/i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]-a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>名誉有如江河，它所漂起的常是轻浮之物，而不是确有真份量的实体</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      codeforces592_1244E Minimizing Difference_算法日常[35/100] 让左右总是保持着相同的宽度权重,然后左右之间能均摊到的剩下的k的高度是一样的!!!所以不管k还够不够分,把k加到哪一边都是一样的 名誉有如江河，它所漂起的常是轻浮之物，而不是确有真份量的实体
    
    </summary>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="贪心" scheme="https://www.wolfdan.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="思维题" scheme="https://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Deepin添加设置qq和微信的截图等快捷键</title>
    <link href="https://www.wolfdan.cn/Deepin%E6%B7%BB%E5%8A%A0%E8%AE%BE%E7%BD%AEqq%E5%92%8C%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%88%AA%E5%9B%BE%E7%AD%89%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://www.wolfdan.cn/Deepin添加设置qq和微信的截图等快捷键/</id>
    <published>2019-10-15T07:10:39.000Z</published>
    <updated>2019-10-17T11:20:27.006Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h1><p><strong>注:可以直接看附赠</strong><br>首先我发现系统已经设置了qq的截图快捷键,我很惊讶,然后就去学习了一下</p><p>发现qq使用了一个运行脚本<code>/opt/deepinwine/tools/add_hotkeys</code>以及带了一个参数<code>a</code></p><p>即 <code>/opt/deepinwine/tools/add_hotkeys a</code></p><p><strong>研究发现这样子就绑定了qq快捷键设置中<code>Ctrl+Alt+A</code></strong></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6%E7%9A%84qq%E5%BF%AB%E9%94%AE.png" alt="deepin中qq截图"></p><h1 id="设置微信的"><a href="#设置微信的" class="headerlink" title="设置微信的"></a>设置微信的</h1><p>所以我们如法炮制,使用<br><code>/opt/deepinwine/tools/add_hotkeys</code>　参数　<code>d WeChat</code></p><p>即命令为<code>/opt/deepinwine/tools/add_hotkeys d WeChat</code></p><p>最终得出下面两种配方</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%BE%AE%E4%BF%A1%E8%AE%BE%E7%BD%AE%E6%88%AA%E5%9B%BE%E7%B1%BB%E5%9E%8B%E4%B8%80.png" alt="配方一"></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/Deepin/%E5%BF%AB%E6%8D%B7%E9%94%AE/%E5%BE%AE%E4%BF%A1%E8%AE%BE%E7%BD%AE%E6%88%AA%E5%9B%BE%E7%B1%BB%E5%9E%8B%E4%BA%8C_%E5%85%B3%E9%94%AE%E5%9C%A8%E4%BA%8E%E4%BF%9D%E8%AF%81%E5%91%BD%E4%BB%A4%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E6%AD%A3%E7%A1%AE.png" alt="配方二"></p><h1 id="开心截图吧"><a href="#开心截图吧" class="headerlink" title="开心截图吧"></a>开心截图吧</h1><p>因为Deepin自带的截图是不支持</p><ul><li>双屏截图</li><li>添加文字自动遇到边界自动换行</li></ul><p>甚至还会在添加文字的时候突然卡死,以及丢失文字</p><p>所以有了QQ,微信截图,我们就可以愉快的玩耍了</p><h1 id="附赠自己的最终所有配置"><a href="#附赠自己的最终所有配置" class="headerlink" title="附赠自己的最终所有配置"></a>附赠自己的最终所有配置</h1><h2 id="qq截图"><a href="#qq截图" class="headerlink" title="qq截图"></a>qq截图</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys a</code><br>快捷: <code>Alt + A</code></p><p><strong>因为带的参数是a,所以qq中的快捷是<code>Ctrl + Alt +A</code></strong></p><h2 id="qq消息提取"><a href="#qq消息提取" class="headerlink" title="qq消息提取"></a>qq消息提取</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys z</code><br>快捷: <code>Ctrl + Alt + Z</code></p><h2 id="微信截图"><a href="#微信截图" class="headerlink" title="微信截图"></a>微信截图</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys d WeChat</code><br>快捷: <code>Ctrl + Alt + S</code></p><p><strong>因为带的参数是w WeChat,所以qq中的快捷是<code>Ctrl + Alt + D</code></strong></p><h2 id="微信消息提取"><a href="#微信消息提取" class="headerlink" title="微信消息提取"></a>微信消息提取</h2><p>命令: <code>/opt/deepinwine/tools/add_hotkeys w WeChat</code><br>快捷: <code>Ctrl + Alt + W</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=154921" target="_blank" rel="noopener">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=154921</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Deepin添加设置qq和微信的截图,提取窗口等快捷键
    
    </summary>
    
      <category term="瞎折腾" scheme="https://www.wolfdan.cn/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Deepin" scheme="https://www.wolfdan.cn/tags/Deepin/"/>
    
      <category term="Linux" scheme="https://www.wolfdan.cn/tags/Linux/"/>
    
      <category term="瞎折腾" scheme="https://www.wolfdan.cn/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第25周[25/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC25%E5%91%A8-25-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第25周-25-521/</id>
    <published>2019-10-13T05:52:52.000Z</published>
    <updated>2019-10-17T11:20:26.664Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:13 GMT+0800 (GMT+08:00) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.10" target="_blank" rel="noopener">刷刷刷 —-&gt; 冲冲冲</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/china-is-forcing-tech-companies-to-choose-between-profits-and-free-speech-aed1f4db3a4" target="_blank" rel="noopener">China Is Forcing Tech Companies to Choose Between Profits and Free Speech</a><br>在我的地盘，你可以赚钱，但你不能侵犯我的底线，否则，我们不欢迎你</p><p>在什么山上唱什么山</p><p>随机应变，见人说人话，见鬼说鬼话</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/lewky_liu/article/details/82432003" target="_blank" rel="noopener">使用hexo-neat插件压缩页面静态资源</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/codeforces1207G-Indie-Album-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-DFS-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-32-100/">codeforces1207G Indie Album AC自动机-DFS-树状数组 算法日常[32/100]</a></p><p><a href="https://www.wolfdan.cn/CF1082B-Vova-and-Trophies-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-33-100/">CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100]</a></p><p><a href="https://www.wolfdan.cn/codeforces1101B-Accordion-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-34-100/">codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100]</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      ARST打卡第25周 China Is Forcing Tech Companies to Choose Between Profits and Free Speech　使用hexo-neat插件压缩页面静态资源 codeforces1207G Indie Album AC自动机-DFS-树状数组 算法日常[32/100] CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100] codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100]
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100]</title>
    <link href="https://www.wolfdan.cn/codeforces1101B-Accordion-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-34-100/"/>
    <id>https://www.wolfdan.cn/codeforces1101B-Accordion-贪心-状态机解题法-算法日常-34-100/</id>
    <published>2019-10-09T13:03:58.000Z</published>
    <updated>2019-10-17T11:20:27.011Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/problemset/problem/1101/B" target="_blank" rel="noopener">codeforces1101B. Accordion</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>删除一些字符,从而找出<code>[::]</code>这种结构,<code>::</code>的两点中可以有<code>|</code>,而且要最多的这样的<code>|</code>,以便构成最长的满足条件的串</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="通法-状态机解题法"><a href="#通法-状态机解题法" class="headerlink" title="通法,状态机解题法"></a>通法,状态机解题法</h2><ul><li>设计状态机(详见下面的代码和解释)</li><li>找到了<code>[:</code>之后开始记录<code>|</code>状态</li><li>让每次成功匹配第二个冒号的时候更新<code>|</code>的个数值<code>precnt = cnt</code></li><li>让每次成功匹配整个串的时候维护答案<code>ans = precnt + 4;</code></li></ul><h2 id="tutorial"><a href="#tutorial" class="headerlink" title="tutorial"></a>tutorial</h2><p><a href="https://codeforces.com/blog/entry/64483" target="_blank" rel="noopener">tutorial比较巧妙,一般不易想到</a></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line"><span class="keyword">int</span> state = <span class="number">0</span>,precnt = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="built_in">strlen</span>(s)<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">switch</span>(state)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : <span class="keyword">if</span>(s[i]==<span class="keyword">char</span>(<span class="number">91</span>)) state = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="keyword">if</span>(s[i]==<span class="keyword">char</span>(<span class="number">58</span>)) state = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">124</span>)) cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">58</span>))&#123;</span><br><span class="line">precnt = cnt;</span><br><span class="line">state = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">124</span>)) cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">58</span>))&#123;</span><br><span class="line">precnt = cnt;</span><br><span class="line">state = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="keyword">char</span>(<span class="number">93</span>))&#123;</span><br><span class="line">ans = precnt + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      codeforces1101B. Accordion 贪心 状态机解题法 算法日常[34/100] tutorial比较巧妙,一般不易想到 设计状态机(详见下面的代码和解释)
    
    </summary>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="贪心" scheme="https://www.wolfdan.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="状态机解题法" scheme="https://www.wolfdan.cn/tags/%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100]</title>
    <link href="https://www.wolfdan.cn/CF1082B-Vova-and-Trophies-%E8%B4%AA%E5%BF%83-%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-33-100/"/>
    <id>https://www.wolfdan.cn/CF1082B-Vova-and-Trophies-贪心-状态机解题法-算法日常-33-100/</id>
    <published>2019-10-09T11:51:36.000Z</published>
    <updated>2019-10-17T11:20:27.004Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/problemset/problem/1082/B" target="_blank" rel="noopener">codeforces 1082B. Vova and Trophies</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>互换一次两个奖杯的位置,然后求出最长的连续金杯的个数</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>就定义s1,s2,s3</li><li>s1和s2相隔一个字母,s3是备用字母</li><li>一开始检测s1,然后如果发现s1和s2相隔两个字母,那么就让s3=s1(其实s3只要记录有一个其他地方的G就行,只是为了填个间隔,所以直接让s3.len=1),ans = max(ans,s1.len+1)<code>这里的+1是因为可以移动别的地方的金牌过来</code>,重新检测s1</li><li>如果s1,s2匹配上了,那么先算一次ans = max(ans,(s1+s2+s3).len),如果s3是0,后面检测到G,还要来一次前面的检测…</li><li>如果s2和新s3间隔相差1,然后再检测一遍ans后开始令s1=s2,s2.len=1</li><li>如果相差2,那么就重新找s1</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li><p>我们通过状态机的思路来解题(发现真的好用!怪不得很多计算机系统的硬件编程都用了状态机)</p></li><li><p>状态0定义成: 启动</p><ul><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态1定义成: 我们正在检测s1(结合后面知道其实有没有s3是在后面考虑了,所以状态1没有分成两种状态) —-&gt; 状态转移:<ul><li>遇到了空格(银),进入状态2</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态2定义成: 我们遇到了s1+空格(银)的状态 —-&gt; 状态转移:<ul><li>如果遇到第二个0,维护答案,跳到状态6(这个状态一般比较难想到,是wa了几次之后才想到的…)</li><li>如果遇到了G,那么我们进入状态3去检测s2</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态3定义成: 我们遇到了s1+一个空格(银)+G,正在继续找s2 —-&gt; 状态转移:<ul><li>如果遇到了空格(银),那么我维护答案,跳到状态4检测是否还有空格</li><li>遇到金,为了防止串结束退出,所以维护一下答案</li></ul></li><li>状态4: (s1+空格+s2+空格)可能的找s3并且观望下一个状态 —-&gt; 状态转移:<ul><li>如果s2+空格+G.维护答案,跳到状态3(这里还要维护一些东西,要小心)</li><li>找到了第二个空格,跳到状态5</li></ul></li><li>状态5: 没有s3,然后目前s1+空格+s2+至少两个空格 —-&gt; 状态转移:<ul><li>遇见G,维护答案,跳转状态1</li></ul></li><li>状态6: 前面有仅有一部分s1,后面遇到两个或两个以上空格 —-&gt; 状态转移:<ul><li>如果遇到G,那么ans = max(ans,s1+1),把后面这个移到前面维护一下,s3=1,然后跳转到状态1(这样就保证只有两部分连续G,并且这两部分相隔至少2个空格时能够互相搬运)</li><li>没遇到继续停留在状态6</li></ul></li></ul><p><strong>注意遇到金,一定要维护一下.防止串结束退出</strong></p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><p><a href="https://codeforces.com/blog/entry/63544" target="_blank" rel="noopener">tutorial左右序列前缀和很难想到</a></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;<span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;<span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;<span class="keyword">return</span> x*f;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,s1,s2,s3,ans,state;</span><br><span class="line"><span class="keyword">char</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = rd();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s); </span><br><span class="line">rep(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">switch</span>(state)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) state = <span class="number">1</span>,s1=<span class="number">1</span>,ans = max(ans,s1+s3);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) s1++,ans = max(ans,s1+s3);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">'S'</span>) state = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) state=<span class="number">3</span>,s2=<span class="number">1</span>,ans = max(ans,s1+s2+s3);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans = max(ans,s1+s3);</span><br><span class="line">state = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>) s2++,ans = max(ans,s1+s2+s3);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=max(ans,s1+s2+s3);</span><br><span class="line">state = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>)&#123;</span><br><span class="line">ans=max(ans,s1+s2+<span class="number">1</span>);</span><br><span class="line">s3=<span class="number">1</span>,s1=s2,s2=<span class="number">1</span>;</span><br><span class="line">state = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 之前状态三遇到银之前的遇到金都有维护,所以这里可以不维护</span></span><br><span class="line">state = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'G'</span>)&#123;</span><br><span class="line">s3=<span class="number">1</span>;</span><br><span class="line">ans=max(ans,s1+s2+s3);</span><br><span class="line"></span><br><span class="line">s1=<span class="number">1</span>,s2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">state = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : </span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'G'</span>)&#123;</span><br><span class="line">ans = max(ans,s1+<span class="number">1</span>);</span><br><span class="line">s1=<span class="number">1</span>,s3=<span class="number">1</span>;</span><br><span class="line">state = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>终有一天，你会静心下来，像个局外人一样看自己的故事，笑着摇摇头。</p><h1 id="自己改写叨叨"><a href="#自己改写叨叨" class="headerlink" title="自己改写叨叨"></a>自己改写叨叨</h1><p>终有一天,你会静心下来,回忆着自己的刷题的时光,热泪盈眶!</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      CF1082B. Vova and Trophies 贪心 状态机解题法 算法日常[33/100] 互换一次两个奖杯的位置,然后求出最长的连续金杯的个数 tutorial左右序列前缀和很难想到 我们通过状态机的思路来解题 终有一天,你会静心下来,回忆着自己的刷题的时光,热泪盈眶!
    
    </summary>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="贪心" scheme="https://www.wolfdan.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="状态机解题法" scheme="https://www.wolfdan.cn/tags/%E7%8A%B6%E6%80%81%E6%9C%BA%E8%A7%A3%E9%A2%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>codeforces1207G Indie Album AC自动机-DFS-树状数组 算法日常[32/100]</title>
    <link href="https://www.wolfdan.cn/codeforces1207G-Indie-Album-AC%E8%87%AA%E5%8A%A8%E6%9C%BA-DFS-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-32-100/"/>
    <id>https://www.wolfdan.cn/codeforces1207G-Indie-Album-AC自动机-DFS-树状数组-算法日常-32-100/</id>
    <published>2019-10-08T13:25:13.000Z</published>
    <updated>2019-10-17T11:20:27.012Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1207/problem/G" target="_blank" rel="noopener">codeforces1207G Indie Album</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://codeforces.com/blog/entry/69314" target="_blank" rel="noopener">官方题解</a></p><ul><li>看到这里是多个字符串的匹配,我们可以用AC自动机(虽然我一开始想到是用很多后缀自动机(SAM),也有大佬实现了,在官方题解的评论区有),给要题目中要查询的字符集建立AC自动机</li><li>并通过trie保持题目让我们构建的串</li><li>通过dfs求出AC自动机的各节点的及其子节点的size大小,用于后面树状数组确定好匹配的区间</li><li>最后再通过DFS让我们要匹配的串去AC自动机上进行跑动,通过树状数组来计数(<del>菜鸡我第一次见这种sao操作</del>)</li><li>对于每个匹配完的DFS都要清除掉树状数组上的记录,以免对其他部分造成影响</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><p>好像比赛时只有30个大佬过了这题,所以代码不是我这个小菜鸡写的,是借鉴了ASDFZ的一个oi大佬(<del>我猜他是搞oi的</del>)的代码</p><p>以及附上我对他代码的理解注释,我觉得这份代码写得真牛逼<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 59470538Aug/25/2019 23:34UTC+8LittleBeetleG - Indie AlbumGNU C++11Accepted561 ms89100 KB</span></span><br><span class="line"><span class="comment">// By LittleBeetle, contest: Educational Codeforces Round 71 (Rated for Div. 2), problem: (G) Indie Album, Accepted, #</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400002</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,i,j,k,opt,h[N],tt[N],v[N],ans[N];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">3</span>],s[N],ti[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;p[N],id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="comment">// 看AC.dfs()发现,h[a]记录的应该是最后一个a指向的节点,而tt则记录的是同一层节点的前向路径,所以不是什么trie,而是一个奇特的最右儿子兄弟树!</span></span><br><span class="line"><span class="comment">// 因此可以AC.dfs()可以通过使用这样的for循环 `for(int j=H[i];j;j=to[j])` 访问整个一层的节点</span></span><br><span class="line">tt[++k]=h[a];</span><br><span class="line">h[a]=k;</span><br><span class="line"><span class="comment">// 这里v[k] 就是记录的是id节点的value, 用int 记录 char 是没有关系的</span></span><br><span class="line">v[k]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AC</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt,t[N][<span class="number">26</span>],fail[N],q[N],l,r,i,j,k;</span><br><span class="line"><span class="keyword">int</span> H[N],to[N],V[N],dfn[N],sz[N],Tim,c[N],loc[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(i=j=<span class="number">1</span>;s[j];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!t[i][s[j]<span class="number">-97</span>])</span><br><span class="line">t[i][s[j]<span class="number">-97</span>]=++cnt;</span><br><span class="line">i=t[i][s[j]<span class="number">-97</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">to[++k]=H[a];</span><br><span class="line">H[a]=k;</span><br><span class="line">V[k]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深度遍历右儿子以及右儿子的兄弟,统计size的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="comment">// dfn 是 各个节点被深度遍历的顺序的hash记录</span></span><br><span class="line">dfn[i]=++Tim;</span><br><span class="line">sz[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=H[i];j;j=to[j])</span><br><span class="line">dfs(V[j]),sz[i]+=sz[V[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// bfs的l,r的写法</span></span><br><span class="line"><span class="comment">// 根节点用的是1</span></span><br><span class="line">l=<span class="number">0</span>;r=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(t[<span class="number">1</span>][j])</span><br><span class="line">fail[t[<span class="number">1</span>][j]]=<span class="number">1</span>,add(<span class="number">1</span>,t[<span class="number">1</span>][j]),q[++r]=t[<span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">i=q[l++];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(t[i][j])</span><br><span class="line">fail[t[i][j]]=t[fail[i]][j],add(fail[t[i][j]],t[i][j]),q[++r]=t[i][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t[i][j]=t[fail[i]][j];</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是一个反向树状数组,所以序数小的节点是大节点(父节点)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">c[x]+=y,x-=x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=cnt)</span><br><span class="line">s+=c[x],x+=x&amp;-x;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">Add(dfn[loc[i]],<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 测试发现,i=0等一些没有到过的值的时候,是不会进入for的...</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p[i].size();j++)</span><br><span class="line">ans[id[i][j]]=Query(dfn[p[i][j]])-Query(dfn[p[i][j]]+sz[p[i][j]]);</span><br><span class="line"><span class="comment">// 卡很久一个点,注意这里的for循环也是右儿子及其兄弟的遍历方式...===&gt; 而且这里是要查询自动机的初始串的遍历!!!!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=h[i];j;j=tt[j])&#123;</span><br><span class="line"><span class="comment">// 这里是跑AC自动机的核心,失配之后 从i跑向j,然后再DFS</span></span><br><span class="line"><span class="comment">// 对的,跑自动机的时候是不用fail的,然后在这里跑下去,所以先算好了下面的,然后回溯算好了上面的</span></span><br><span class="line"><span class="comment">// 每一小块都要把对应的树状数组部分清除掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019年10月08日21:21:13 突然那么一瞬间,总算想清楚了多一点点</span></span><br><span class="line"><span class="comment">// 比如你dadada,然后AC自动机上只有模式串da,所以你虽然dfs向下走dadada,但是你每次添加的位置都是loc[v[i]],所以这里是一个比较松的耦合!</span></span><br><span class="line">loc[v[j]]=t[loc[i]][s[v[j]]<span class="number">-97</span>];</span><br><span class="line">DFS(v[j]);</span><br><span class="line">&#125;</span><br><span class="line">Add(dfn[loc[i]],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">loc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">DFS(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">T.cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++,j=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;j);</span><br><span class="line">add(j,i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</span><br><span class="line">s[i]=*ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;j,ti+<span class="number">1</span>);</span><br><span class="line">p[j].push_back(T.insert(ti));</span><br><span class="line">id[j].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line">T.Build();</span><br><span class="line">T.work();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p></p><h1 id="背后故事"><a href="#背后故事" class="headerlink" title="背后故事"></a>背后故事</h1><p>菜鸡我前前后后理解了这个题目3天…没想到自己被自己不太认识的树状数组卡了好久(丢人了…)—&gt; 继续加油吧</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人生最美好的，就是在你停止生存时，也还能以你所创造的一切为人们服务。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      codeforces1207G Indie Album AC自动机-DFS-树状数组 给要题目中要查询的字符集建立AC自动机 通过dfs求出AC自动机的各节点的及其子节点的size大小,用于后面树状数组确定好匹配的区间 最后再通过DFS让我们要匹配的串去AC自动机上进行跑动,通过树状数组来计数 人生最美好的，就是在你停止生存时，也还能以你所创造的一切为人们服务。
    
    </summary>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="AC自动机" scheme="https://www.wolfdan.cn/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="DFS" scheme="https://www.wolfdan.cn/tags/DFS/"/>
    
      <category term="树状数组" scheme="https://www.wolfdan.cn/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="算法日常" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第24周[24/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC24%E5%91%A8-24-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第24周-24-521/</id>
    <published>2019-10-06T10:26:04.000Z</published>
    <updated>2019-10-17T11:20:26.663Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:13 GMT+0800 (GMT+08:00) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-31-100/">CF589_C Primes and Multiplication tutorial 详解算法日常[31/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/@parkernash/16-things-everybody-should-stop-doing-in-order-to-be-successful-18be67a70a2c" target="_blank" rel="noopener">16 Things Everybody Should Stop Doing In Order To Be Successful.</a><br>Focus on yourself and do one thing each day that makes you better than yesterday. Focus on your work, your family, and be the best role model you can be by being excellent at what you do.<br>其实对我冲击最大的观点是 Stop trying to do it all alone,因为我总是羞于向别人请求帮助,所以导致总是让一些事情延期完成,我要改善这个点</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://leafjame.github.io/posts/2114475547.html" target="_blank" rel="noopener">Hexo NexT主题美化2.0</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/Linux%E8%BF%9B%E5%85%A5emergency%E6%A8%A1%E5%BC%8F-%E5%B9%B6%E4%B8%94root%E8%A2%AB%E9%94%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/">Linux进入emergency模式,并且root被锁怎么解决</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      ARST打卡第24周 CF589_C Primes and Multiplication tutorial 详解算法日常[31/100] 16 Things Everybody Should Stop Doing In Order To Be Successful. Hexo NexT主题美化2.0 Linux进入emergency模式,并且root被锁怎么解决 对我冲击最大的观点是 Stop trying to do it all alone,因为我总是羞于向别人请求帮助,所以导致总是让一些事情延期完成,我要改善这个点
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>Linux进入emergency模式,并且root被锁怎么解决</title>
    <link href="https://www.wolfdan.cn/Linux%E8%BF%9B%E5%85%A5emergency%E6%A8%A1%E5%BC%8F-%E5%B9%B6%E4%B8%94root%E8%A2%AB%E9%94%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/"/>
    <id>https://www.wolfdan.cn/Linux进入emergency模式-并且root被锁怎么解决/</id>
    <published>2019-10-05T13:58:23.000Z</published>
    <updated>2019-10-17T11:20:27.009Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>因为我的破神舟战神z7m-kp7gt在CPU过热,风扇爆转,然后自动断电保护,导致我两次进入Deepin之后两次异常断电,我很好奇第一次竟然没有陷入如文章名的困境(<strong>好像是挽救过程中又重启了超多次,然后出现了如题的状况</strong>),可能是我后面重启两次后去windows下面看了一下,进入windows的时候,windows它自动检测了硬盘,然后进入了,电脑发出滴滴滴的警报声,由于之前有在windows上发出警报的经验,我立马切断了电源,然后就没有自动关机,CPU就稳定了下来,然后以为没事了,再去Deepin的时候,故事就开始了</p><h1 id="问题依次集合以及解决"><a href="#问题依次集合以及解决" class="headerlink" title="问题依次集合以及解决"></a>问题依次集合以及解决</h1><h2 id="开机initramfs半天"><a href="#开机initramfs半天" class="headerlink" title="开机initramfs半天"></a>开机initramfs半天</h2><p>其实一开始还提醒了温度过高<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/%E6%B8%A9%E5%BA%A6%E8%BF%87%E9%AB%98.jpg" alt="温度过高"></p><p>温度过高后尝试reboot无果,强制重启多次,还是initramfs<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/init.jpg" alt="initramfs"></p><h2 id="破initramfs"><a href="#破initramfs" class="headerlink" title="破initramfs"></a>破initramfs</h2><p>大家注意看上面图中写的提示我使用fsck命令修复磁盘!我在网上找别人的解决方案也找到了类似的说法,所以有了如下操作<br>注意:<strong>initramfs下reboot和fsck命令有时候有用有时候没用,所以没用时就再重启吧,当然有Live CD的话,去live CD盘或者其他盘的live下操作一下命令更佳!</strong> (前提是能进去,菜鸡我Live CD和其他盘的linux也没能进去,故我是直接在initramfs下操作的)</p><h3 id="blkid-fsck"><a href="#blkid-fsck" class="headerlink" title="blkid+fsck"></a>blkid+fsck</h3><p>使用blkid查看磁盘,然后使用fsck对装了linux相对应的磁盘分区进行操作(<strong>每个linux分区都要操作,别问我怎么知道的,问就是看下文</strong>)<br><code>blkid</code></p><p><code>fsck -y /dev/sdb2</code><br>上面的分区要自己看啊,一般是ext4类型,虽然说简单暴力对每个分区都操作一遍也是可以的</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/fsck_20191005222645.jpg" alt="fsck"></p><h2 id="root-locked"><a href="#root-locked" class="headerlink" title="root locked"></a>root locked</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/rootLocked.jpg" alt="rootLocked"></p><h2 id="破锁啊"><a href="#破锁啊" class="headerlink" title="破锁啊"></a>破锁啊</h2><p>刚刚修复好了磁盘后其他盘的linux和Live CD应改都能进入了吧,只是Deepin被锁了(<del>其实是菜鸡博主没有采用单用户登录模式去操作,显得太麻烦</del>),其实也可以网上搜索如何在grub的时候进入单用户模式(如果你比较悲惨因为/home有问题而进入单用户困难,最好还是用Live CD和其他盘的linux方便点,别问怎么知道,问就是继续看下文),然后去操作下面的步骤<br>下面的操作都默认你已经进入了命令行了</p><h3 id="修改shadow文件"><a href="#修改shadow文件" class="headerlink" title="修改shadow文件"></a>修改shadow文件</h3><p>其他地方的linux暂时挂载deepin上的/分区<br>当然单用户登录了deepin就不用挂载了<br><strong>注意吧sdb2改成你的deepin /分区位置</strong><br><code>mount /dev/sdb2 /media</code></p><p><code>cd /media/dev/sdb2/etc</code><br><code>sudo vim shadow</code><br>当然你也可以像下图一样先备份shadow,不过那是我不知道删哪个地方才这样做的<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/%E4%BF%AE%E6%94%B9shadow.png" alt="修改shadow"></p><p>然后删除<code>root:*:13223:0:99999:7:::</code>那个<code>*</code>就行了,不只有一个*号还有其他字符?反正就是*左右冒号之间的所有东西就行了</p><h2 id="有root的emergency-mode"><a href="#有root的emergency-mode" class="headerlink" title="有root的emergency mode"></a>有root的emergency mode</h2><p>以上操作还是进不去啊!!!我疯了,进入了有root的emergency mode<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/emergencyMode/%E6%9C%89root%E7%9A%84emergency.jpg" alt="有root的emergency"></p><h2 id="继续fsck"><a href="#继续fsck" class="headerlink" title="继续fsck"></a>继续fsck</h2><p>找了半天原因,最后发现是自己当时fsck没有对/home分区操作,这就是为什么我让你们对每个分区都fsck一遍…<del>枯了</del><br>同上面的fsck操作<br><strong>注意吧sdb5改成你的deepin /home分区位置</strong><br><code>fsck -y /dev/sdb5</code></p><p><code>reboot</code> 重启复活!</p><h1 id="注和后续"><a href="#注和后续" class="headerlink" title="注和后续"></a>注和后续</h1><p>其实我还经历了很多其他问题,但是由于都是没有经验,出现在以上大问题中的小问题,所以就不细说了</p><p>对了,如果碰巧你们操作过程双显示器中外接显示器不亮了,不用担心,先windows进入设备驱动,然后删除可拔插的监视器,然后重新检测安装驱动,重启,就可以</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Linux突然断电宕机,然后重启无法进入用户图形界面,Linux进入emergency模式,并且root被锁怎么解决
    
    </summary>
    
      <category term="Linux" scheme="https://www.wolfdan.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.wolfdan.cn/tags/Linux/"/>
    
      <category term="emergency mode" scheme="https://www.wolfdan.cn/tags/emergency-mode/"/>
    
      <category term="root locked" scheme="https://www.wolfdan.cn/tags/root-locked/"/>
    
  </entry>
  
  <entry>
    <title>CF589_C Primes and Multiplication tutorial 详解算法日常[31/100]</title>
    <link href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-31-100/"/>
    <id>https://www.wolfdan.cn/算法日常-31-100/</id>
    <published>2019-09-30T09:22:56.000Z</published>
    <updated>2019-10-05T08:43:16.943Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1228/problem/C" target="_blank" rel="noopener">CF589_C Primes and Multiplication</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h2><p><a href="https://codeforces.com/blog/entry/70162" target="_blank" rel="noopener">官方题解</a></p><h2 id="题解解释"><a href="#题解解释" class="headerlink" title="题解解释"></a>题解解释</h2><h3 id="题解中的式子"><a href="#题解中的式子" class="headerlink" title="题解中的式子"></a>题解中的式子</h3><script type="math/tex;mode=display">\begin{aligned} \prod_{i=1}^{n} f(x, i) &= \prod_{i=1}^{n} \prod_{p \in prime(x)} g(i, p) \\ &= \prod_{i=1}^{n} \prod_{p \in prime(x)} p^{h(i,p)} \\ &= \prod_{p \in prime(x)} \prod_{i=1}^{n} p^{h(i,p)} \\ &= \prod_{p \in prime(x)} p^{\sum_{i=1}^{n} h(i, p)} \\ &= \prod_{p \in prime(x)} p^{h(n!, p)} \end{aligned}</script><h3 id="算法优化式子的解释"><a href="#算法优化式子的解释" class="headerlink" title="算法优化式子的解释"></a>算法优化式子的解释</h3><script type="math/tex;mode=display">{\sum_{i=1}^{n} h(i, p)} = h(n!, p) = \sum_{k=1}^{\infty} \Bigl \lfloor \frac{n}{p^k} \Bigr \rfloor</script><p>左边两项相当于1到n,各项找p的最大幂的因子(我们需要的是那个幂),大多数项是0次幂,即最大因子为1,其他的都是1到n中恰好为p的幂次,而且这个幂次只出现一次! —&gt; 然后获取所有的幂次和</p><p>右边的式子则是让n值不断除p(记录第i次相除,i从1到$\Bigl \lfloor \frac{n}{p} \Bigr \rfloor$),在第i次判断n内各个数的集合中的因子含有$p^i$的数字个数,记录这些个数的和值</p><p>因为最终两个和值都是记录的1到n中所有数的p的因子出现次数,所以是相等的!(<strong>没看懂没有关系,看后面的例子体会一下</strong>)</p><h4 id="h-i-p-解释"><a href="#h-i-p-解释" class="headerlink" title="h(i,p) 解释"></a>h(i,p) 解释</h4><ul><li>p是素数,然后h(i,p)表示p的多少次方等于i</li><li>即 $p^{h(i,p)}$ = i</li></ul><h4 id="举例解释"><a href="#举例解释" class="headerlink" title="举例解释"></a>举例解释</h4><ul><li>假设n=9,p=2</li></ul><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/CF589C/1.png" alt></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = int(a); i &lt;= int(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, b, a) for(int i = int(b); i &gt;= int(a); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(x, y) memset(x, y, sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span> </span>&#123;<span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">char</span> p=getchar();<span class="keyword">while</span>(p&lt;<span class="string">'0'</span>||p&gt;<span class="string">'9'</span>)p=getchar();<span class="keyword">while</span>(p&gt;=<span class="string">'0'</span>&amp;&amp;p&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+p-<span class="string">'0'</span>,p=getchar();<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;ll ans=<span class="number">1</span>%mod;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;a=a*a%mod;&#125;<span class="keyword">return</span> ans;&#125;</span><br><span class="line">ll x,n,ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ll m=n,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m) m/=p,sum+=m;</span><br><span class="line">    <span class="keyword">return</span> qpow(p,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;x,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            ans=ans*f(i)%mod;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>) x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>) ans=ans*f(x)%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>哭过，痛苦过，但从没有放弃过。笑过，坚持过，因此不曾后悔过。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      CF589_C Primes and Multiplication tutorial 详解 因为最终两个和值都是记录的1到n中所有数的p的因子出现次数,所以是相等的! 哭过，痛苦过，但从没有放弃过。笑过，坚持过，因此不曾后悔过。
    
    </summary>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="数学题" scheme="https://www.wolfdan.cn/tags/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>防火防盗防台部落</title>
    <link href="https://www.wolfdan.cn/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/"/>
    <id>https://www.wolfdan.cn/防火防盗防台部落/</id>
    <published>2019-09-29T10:38:05.000Z</published>
    <updated>2019-10-17T11:20:28.225Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><p><a href="https://wolfdan.cn/2019/09/29/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/" target="_blank" rel="noopener">欢迎访问我的主站看此文 wolfdan.cn</a></p><h1 id="事件过程"><a href="#事件过程" class="headerlink" title="事件过程"></a>事件过程</h1><p>今天闲来无聊,便打开Google,搜索自己的名字,结果翻啊翻,终于翻到自己了一些文章,结果发现了一个比较搞笑的事情就是自己注册的各个平台上的文章没有先出来,反而是别的平台盗用的我的文章先跳了出来,比如说这个台部落…和go语言中文网</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E5%86%8D%E7%BF%BB%E4%B8%80%E9%A1%B5%2C%E7%A5%9E%E5%A5%87%E7%9A%84%E5%8F%B0%E9%83%A8%E8%90%BD.png" alt="台部落"></p><p>然后点进去一看,我惊呆了,这不是对我的简书的文章进行100%的复刻吗?<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E6%88%91%E7%9A%84%E6%96%87%E7%AB%A0%E6%80%8E%E4%B9%88%E5%9C%A8%E5%8F%B0%E9%83%A8%E8%90%BD%E5%87%BA%E7%8E%B0%E8%80%8C%E6%9D%A5.png" alt="我的文章"></p><p>然后尝试注册,准备尝试搞回自己的文章所有权,结果,不能注册…</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E8%80%8C%E4%B8%94%E8%BF%98%E4%B8%8D%E8%83%BD%E6%B3%A8%E5%86%8C.png" alt="不能注册"></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/%E6%B3%A8%E5%86%8C%E6%98%AF%E4%B8%8D%E8%A1%8C%E7%9A%84.png" alt="不能注册2"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当下的SEO和骚操作真是太多了……,想要当一个好的站长真是难啊,不仅要自己要去做文章质量和数量,还要学习如何SEO,甚至还要防火防盗防台部落…</p><h1 id="有趣花絮"><a href="#有趣花絮" class="headerlink" title="有趣花絮"></a>有趣花絮</h1><h2 id="百毒-Google搜索自己对比"><a href="#百毒-Google搜索自己对比" class="headerlink" title="百毒_Google搜索自己对比"></a>百毒_Google搜索自己对比</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%B6%A3%E4%BA%8B/%E5%8F%B0%E9%83%A8%E8%90%BD%E7%9B%97%E7%94%A8%E4%BA%86%E7%AE%80%E4%B9%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%97/Google%E7%99%BE%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="百毒_Google搜索自己"></p><h2 id="我把这篇文章同步到了简书-CSDN-欢迎台部落来复制"><a href="#我把这篇文章同步到了简书-CSDN-欢迎台部落来复制" class="headerlink" title="我把这篇文章同步到了简书,CSDN,欢迎台部落来复制"></a>我把这篇文章同步到了简书,CSDN,欢迎台部落来复制</h2><p>我把这篇文章同步到了简书,CSDN,希望台部落来盗取啊</p><h2 id="发现现在CSDN对外链markdown图片优化了"><a href="#发现现在CSDN对外链markdown图片优化了" class="headerlink" title="发现现在CSDN对外链markdown图片优化了"></a>发现现在CSDN对外链markdown图片优化了</h2><p>发现现在CSDN对外链markdown图片优化了,但是自己还是不想分流自己的文章出去,虽然说CSDN真的很容易出名,但是不够个性吧</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      防火防盗防台部落 我的简书文章被台部落盗取 我的CSDN文章被台部落盗取 我的博客园文章被台部落盗取
    
    </summary>
    
      <category term="趣事" scheme="https://www.wolfdan.cn/categories/%E8%B6%A3%E4%BA%8B/"/>
    
    
      <category term="趣事" scheme="https://www.wolfdan.cn/tags/%E8%B6%A3%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第23周[23/100]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC23%E5%91%A8-23-100/"/>
    <id>https://www.wolfdan.cn/ARST打卡第23周-23-100/</id>
    <published>2019-09-29T09:26:08.000Z</published>
    <updated>2019-10-17T11:20:26.662Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:13 GMT+0800 (GMT+08:00) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://wolfdan.cn/2019/09/26/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-28-100/" target="_blank" rel="noopener">CodeForces585 B tutorial 详解_算法日常[28/100]</a></p><p><a href="https://wolfdan.cn/2019/09/26/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-29-100/" target="_blank" rel="noopener">CodeForces585 D Ticket Game tutorial算法日常[29/100]</a></p><p><a href="https://wolfdan.cn/2019/09/28/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-30-100/" target="_blank" rel="noopener">CodeForces585 E. Marbles tutorial算法日常[30/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://forge.medium.com/14-questions-to-ask-yourself-again-and-again-8e832d1394c1" target="_blank" rel="noopener">14 Questions to Ask Yourself Again and Again</a><br>是的,我们要多多关注自身真的的需求,才能长久得迸发出自己最巨大的能量!</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/wsgsm/article/details/83628317" target="_blank" rel="noopener">deepin/ubuntu桌面美化</a></p><p><a href="https://blog.csdn.net/YEN_CSDN/article/details/79966985" target="_blank" rel="noopener">LaTex符号大全（LaTeX_Symbols）</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://wolfdan.cn/2019/09/24/Deepin%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/" target="_blank" rel="noopener">Deepin无法正常关机重启</a></p><p><a href="https://wolfdan.cn/2019/09/24/linux%E4%B8%8Bgitignore-c-%E7%9A%84%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">linux下gitignore c++的生成文件</a></p><p><a href="https://wolfdan.cn/2019/09/29/%E9%98%B2%E7%81%AB%E9%98%B2%E7%9B%97%E9%98%B2%E5%8F%B0%E9%83%A8%E8%90%BD/" target="_blank" rel="noopener">防火防盗防台部落</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      ARST打卡 CodeForces585 E. Marbles tutorial算法日常[30/100] CodeForces585 B tutorial 详解_算法日常[28/100] CodeForces585 D Ticket Game tutorial算法日常[29/100] Deepin无法正常关机重启 linux下gitignore c++的生成文件 防火防盗防台部落 deepin/ubuntu桌面美化 LaTex符号大全（LaTeX_Symbols）
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces585 E. Marbles tutorial算法日常[30/100]</title>
    <link href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-30-100/"/>
    <id>https://www.wolfdan.cn/算法日常-30-100/</id>
    <published>2019-09-28T10:30:35.000Z</published>
    <updated>2019-10-17T11:20:28.081Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/E" target="_blank" rel="noopener">CodeForces585 E. Marbles</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>有一排有色石头,然后把相同颜色排在一起</li><li>能做的操作是交换相邻的石头</li><li>求最少的操作次数</li><li>n $\in$ [2,4⋅$10^5$]</li><li>$a_i$ $\in$ [1,20]</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><ul><li>看到 $a_i$ $\in$ [1,20],所以算法从 $a_i$ 下手,也就是说对每种颜色下手</li><li>通过<code>cnt[i][j]</code>计算出把所有的i颜色的放到j颜色前面需要做的这两种颜色之间的交换次数</li><li>然后用<strong>子集dp</strong>来递推出最后的答案,就是说一开始是0种颜色之间的关系,然后慢慢得加入各种颜色进去</li><li>每次加入一种颜色的时候就是把新的颜色放到最后面,然后这样子一直求出所有颜色放入后的最优决策,而且不重不漏!</li><li>子集dp:<ul><li>这里的状态就是,dp[$i_{1到1&lt;&lt;20-1}$]</li><li>数字i的每一个0,1字符代表着此状态下某种颜色是否存在</li><li><code>dp[i]</code>就是状态i的swap数量</li><li>就是枚举所有的状态,然后向着添加各种尚未存在的颜色放到最后面的操作来进行dp转移,从子集推向更大的状态集</li></ul></li></ul><h2 id="为什么这样可以不重不漏"><a href="#为什么这样可以不重不漏" class="headerlink" title="为什么这样可以不重不漏?"></a>为什么这样可以不重不漏?</h2><ul><li>因为我们for(1&lt;&lt;20-1) for(20) 的双重循环,就是已经枚举了所有的已经存在的颜色状态,然后把新的颜色放到最后的方案!</li><li>比如红黄蓝,在 红黄 状态时会有 加入蓝 (蓝在最后),同理也有 红蓝 + 黄,黄蓝 + 红! 这样就达到了不重不漏</li></ul><h2 id="英文的tutorial"><a href="#英文的tutorial" class="headerlink" title="英文的tutorial"></a>英文的tutorial</h2><p><a href="https://codeforces.com/blog/entry/69815" target="_blank" rel="noopener">当然也可以去官方自己看,233</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8/cf585E%E5%AD%90%E9%9B%86Dp/CF585E_%E5%8E%9F%E6%9D%A5%E5%B0%B1%E6%98%AF%E6%9C%89%E6%8A%80%E5%B7%A7%E7%9A%84%E6%A8%A1%E6%8B%9F.png" alt="英文版tutorial"></p><h1 id="AC代码-tutorial版"><a href="#AC代码-tutorial版" class="headerlink" title="AC代码(tutorial版)"></a>AC代码(tutorial版)</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span> * <span class="number">1000</span> + <span class="number">13</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1l</span>l * <span class="number">1000</span> * <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[(<span class="number">1</span> &lt;&lt; M)];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt[M][M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; col[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        x--;</span><br><span class="line">        col[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 题解前面的操作有点繁杂,所以推荐看不懂的可以看简单版AC代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">int</span>)col[i].size() == <span class="number">0</span> || (<span class="keyword">int</span>)col[j].size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> pos2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> pos1 = <span class="number">0</span>; pos1 &lt; (<span class="keyword">int</span>)col[i].size(); pos1++) &#123;</span><br><span class="line">                <span class="comment">// 找到 j 在 i 的每个位置之前的位置.然后计算移动所需要的值(注意这里只要考虑两者之间的交换)</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pos2 == (<span class="keyword">int</span>)col[j].size() - <span class="number">1</span> || col[j][pos2 + <span class="number">1</span>] &gt; col[i][pos1]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pos2++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (col[i][pos1] &gt; col[j][pos2]) &#123;</span><br><span class="line">                    cnt[i][j] += pos2 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); mask++) &#123;</span><br><span class="line">        d[mask] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">0</span>; mask &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); mask++) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; was;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mask &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">                was.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mask &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)was.size(); j++) &#123;</span><br><span class="line">                sum += cnt[was[j]][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> nmask = mask | (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            d[nmask] = min(d[nmask], d[mask] + sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="AC代码-简洁版"><a href="#AC代码-简洁版" class="headerlink" title="AC代码(简洁版)"></a>AC代码(简洁版)</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 400010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXN], cnt[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv[<span class="number">21</span>][<span class="number">21</span>], f[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>) + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j) inv[a[i]][j] += cnt[j];</span><br><span class="line">        ++cnt[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); ++i) f[i] = <span class="number">1l</span>l &lt;&lt; <span class="number">62</span>;</span><br><span class="line">    <span class="comment">// 20种排列要全面枚举出来</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); ++i) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) x.push_back(j);</span><br><span class="line">        <span class="comment">// 这是"我为人人"的子集DP</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> k : x) res += inv[k][j];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> next_state = i | (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>));</span><br><span class="line">            f[next_state] = min(f[next_state], f[i] + res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, f[(<span class="number">1</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="单词学习"><a href="#单词学习" class="headerlink" title="单词学习"></a>单词学习</h1><p>exponential 指数的</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>自然界没风风雨雨，大地就不会春华秋实。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      CodeForces585 E. Marbles tutorial 通过`cnt[i][j]`计算出把所有的i颜色的放到j颜色前面需要做的这两种颜色之间的交换次数 然后用**子集dp**来递推出最后的答案,就是说一开始是0种颜色之间的关系,然后慢慢得加入各种颜色进去 每次加入一种颜色的时候就是把新的颜色放到最后面,然后这样子一直求出所有颜色放入后的最优决策,而且不重不漏!
    
    </summary>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="思维题" scheme="https://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces585 D Ticket Game tutorial算法日常[29/100]</title>
    <link href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-29-100/"/>
    <id>https://www.wolfdan.cn/算法日常-29-100/</id>
    <published>2019-09-26T14:54:40.000Z</published>
    <updated>2019-10-17T11:20:28.049Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/D" target="_blank" rel="noopener">CodeForces585 D Ticket Game</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>n个数字的车牌,n是偶数(n $\in$ [2,2*$10^5$])</li><li>一些车牌偶数个数字被搽除了</li><li>定义美丽车牌的是<code>前n/2个数字的数字和 == 后n/2个数字的数字和</code></li><li>M讨厌美丽车牌,而B喜欢</li><li>玩一个游戏, M先手改被搽除的数字成为0-9中的一个(直到数字被填完)</li><li>数字填完是美丽的则 B win,否则 M win</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://llf0703.com/p/cf-1215.html" target="_blank" rel="noopener">借鉴了大佬LIf0703</a></p><p>设先手为 M ，后手为 B 。并把数列左右两边剩下的空格个数记为 a,b 。</p><p>当左右两边都有的时候，B 就可以复制 M 的操作。</p><p>剩下的操作中可以控制每回合(所以a-b后是要除以2的)的和为 9，如果刚好补完那么后手就能获得胜利，否则先手就可以阻碍后手获胜。</p><p>发现大佬的想法总是高屋建瓴!!!<br>只有我个傻逼想歪了,想着傻逼模拟,然后情况还出错了…</p><p>但是还是感觉题解错了,不一定全是0,9的操作啊,可能最后一步是非0,9的操作啊!</p><p>当我尝试求出tutorial的反例,然后我失败了<br>???01?<br>右边的两个数之和必须是9才有可能B赢! 否则[1-8][10-18]都不行! 因为[1-8]别人取9,[10-18]别人取0!所以delta只有为9的倍数才行!<br>nb! 所以tutorial没错,只是隐藏了很多信息没有说…还是因为我太菜…</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, delta = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &lt;&lt; <span class="number">1</span>) &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'?'</span>)</span><br><span class="line">                delta += s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">'?'</span>)</span><br><span class="line">                delta -= s[i] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur = ((a - b) &gt;&gt; <span class="number">1</span>) * <span class="number">9</span> + delta;</span><br><span class="line">    <span class="keyword">if</span> (cur) <span class="keyword">return</span> <span class="number">0</span> &amp; <span class="built_in">puts</span>(<span class="string">"Monocarp"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &amp; <span class="built_in">puts</span>(<span class="string">"Bicarp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      CodeForces585 D Ticket Game tutorial 当左右两边都有的时候，B 就可以复制 M 的操作。 剩下的操作中可以控制每回合(所以a-b后是要除以2的)的和为 9，如果刚好补完那么后手就能获得胜利，否则先手就可以阻碍后手获胜。
    
    </summary>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="思维题" scheme="https://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces585 B tutorial 详解_算法日常[28/100]</title>
    <link href="https://www.wolfdan.cn/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-28-100/"/>
    <id>https://www.wolfdan.cn/算法日常-28-100/</id>
    <published>2019-09-26T03:05:44.000Z</published>
    <updated>2019-10-17T11:20:28.037Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://codeforces.com/contest/1215/problem/B" target="_blank" rel="noopener">CodeForces585 B</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><ul><li>给你一串非0的正负整数串</li><li>定义<code>[l,r]</code>为$a_l$和$a_r$之间所有元素之积是正数还是负数</li><li>求串中所有的负数pair的个数和整数pair的个数</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><ul><li>记录负数对之间的元素个数cnt1,和奇数个负数个数间的元素个数cnt2</li><li>然后通过当下元素的添加,只会新产生当下元素为右括号的pair,这样就可以dp叠加了</li><li>具体的看代码中的详细注释吧</li></ul><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">大佬tutorial的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> * <span class="number">1000</span> + <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">ll ans0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 题目给的是a[i]!=0,大佬还要特地考虑一下鲁棒性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">ans0 += pos + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// bal是负数的个数，cnt1标识前面负数的对数，cnt2标识前面的正数的个数</span></span><br><span class="line">    <span class="comment">// ansP是正产的个数，负产个数可以直接用总的pair数减去ansP得到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cnt1其实是偶数对之前的所有元素的个数,比如-1 1 -1 `1 1 1` -1 -1 这样cnt1=3</span></span><br><span class="line"><span class="comment">// cnt2同理就是奇数个负数之间的个数,这些都是为了后面的计算!所以上面的例子cnt2=1</span></span><br><span class="line">    <span class="comment">// 太精妙了!</span></span><br><span class="line">    <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bal = <span class="number">0</span>;</span><br><span class="line">ll ansP = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>, bal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bal % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cnt1++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cnt2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">bal++;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 这里之所以可以这样加tutorial没说，其实是因为每次新加入之后</span></span><br><span class="line">        <span class="comment">// 新产生的pair一定是以a[i]作为右endpos的!所以可以这样加!</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到了a[i]后总负数个数是偶数,所以加所有偶数对间的cnt1值,</span></span><br><span class="line">        <span class="comment">// 可以心想一下a[i]为正或者负的时候 bal达到偶数值时的状态就懂了</span></span><br><span class="line"><span class="keyword">if</span> (bal % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">ansP += cnt1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ansP += cnt2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n * <span class="number">1l</span>l * (n + <span class="number">1</span>) / <span class="number">2</span> - ans0 - ansP &lt;&lt; <span class="string">' '</span> &lt;&lt; ansP &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> fcspartakm</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="comment">//freopen("output.txt", "w", stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; fixed;</span><br><span class="line">    </span><br><span class="line">    read();</span><br><span class="line">    solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cerr &lt;&lt; "TIME: " &lt;&lt; clock() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>这场比赛B,C都是1500分,然后我当时不会做B,所以写了B的题解,记录自己不太会的,会的就不记录了</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>每个人都有潜在的能量，只是很容易：被习惯所掩盖，被时间所迷离，被惰性所消磨。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      CodeForces585 B tutorial 详解_算法日常[28/100] 每个人都有潜在的能量，只是很容易：被习惯所掩盖，被时间所迷离，被惰性所消磨。
    
    </summary>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="思维题" scheme="https://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
      <category term="算法学习日常" scheme="https://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="dp" scheme="https://www.wolfdan.cn/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>linux下gitignore c++的生成文件</title>
    <link href="https://www.wolfdan.cn/linux%E4%B8%8Bgitignore-c-%E7%9A%84%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6/"/>
    <id>https://www.wolfdan.cn/linux下gitignore-c-的生成文件/</id>
    <published>2019-09-24T10:32:39.000Z</published>
    <updated>2019-10-17T11:20:27.153Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>一般我们不要git上传编译后的文件，github也不鼓励上传二进制文件，而且上传了编译文件还会拖慢另外设备的同步项目的速度，所以我不想上传我的编译生成的二进制文件，<br>但是因为自己在linux下生成c++的编译文件之前的配置都是没有后缀的，所以gitignore不好检测排除</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><ul><li>直接头铁去网上找了很多”如何gitignore 忽略上传二进制文件”，然后按照大佬们说的gitignore配置了好久</li><li><strong>最终配置成下面这样，但是git上传记录证明我的配置不合理，失败了…</strong><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">## 忽略所有文件和目录</span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">## 增加指定扩展名文件和Makefile文件</span><br><span class="line">### C &amp;&amp; makefile</span><br><span class="line">!*.cpp</span><br><span class="line">!*.c</span><br><span class="line">!*.h</span><br><span class="line">!Makefile</span><br><span class="line"></span><br><span class="line">### py</span><br><span class="line">!*.py</span><br><span class="line"></span><br><span class="line">### md</span><br><span class="line">!*.md</span><br><span class="line"></span><br><span class="line">### pic</span><br><span class="line">!*.png</span><br><span class="line">!*.jpg</span><br><span class="line"></span><br><span class="line">### some others</span><br><span class="line">!*.sh</span><br><span class="line">!*.bat</span><br><span class="line">!*.gitignore</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><ul><li>想到了linux下可执行文件不是还有<code>.out</code>文件吗？</li><li>后面在网上查了一下发现：<strong>linux下可执行文件不像windows那样要看后缀，而是看属性是否是可执行的</strong></li><li>于是立马更该自己的sublime的c++编译配置，最种git提交成功忽略二进制<code>.out</code>文件</li><li>最终的gitignore如下</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Cpp:</span><br><span class="line">*.exe</span><br><span class="line"></span><br><span class="line"># VScode:</span><br><span class="line">build</span><br><span class="line">.vscode</span><br><span class="line"></span><br><span class="line"># Python</span><br><span class="line">__pycache__</span><br><span class="line">*.pyc</span><br><span class="line"></span><br><span class="line"># 2019年9月22日22:01:00 发现网上找的上面的操作并没有成功,然后自己去网上探索，最后发现linux下的可执行文件不看后缀，而是看属性，所以自己刻意在编译中设置后缀，然后gitignore那个后缀就完美了</span><br><span class="line"></span><br><span class="line"># linux cpp on what I set the sa of cpp</span><br><span class="line">*.out</span><br></pre></td></tr></table></figure></div><h1 id="送一份linux下Sublime的C-编译配置"><a href="#送一份linux下Sublime的C-编译配置" class="headerlink" title="送一份linux下Sublime的C++编译配置"></a>送一份linux下Sublime的C++编译配置</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    // 2019年09月22日23:33:32 为了gitignore修改后缀</span><br><span class="line">    // "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;'", </span><br><span class="line">    "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out'", </span><br><span class="line">    "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$", </span><br><span class="line">    "working_dir": "$&#123;file_path&#125;", </span><br><span class="line">    "selector": "source.c, source.c++", </span><br><span class="line">   </span><br><span class="line">    "variants": </span><br><span class="line">    [ </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Build &amp; Run"</span>, </span><br><span class="line">            // "shell_cmd": "x-terminal-emulator  -e bash -c \"g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; '$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">            "shell_cmd": "x-terminal-emulator  -e bash -c \"g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">        &#125;, </span><br><span class="line">   </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Build Only"</span>, </span><br><span class="line">            // "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;'" </span><br><span class="line">            "shell_cmd": "g++ '$&#123;file&#125;' -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;.out'" </span><br><span class="line">        &#125;, </span><br><span class="line">   </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Run Only"</span>, </span><br><span class="line">            // "shell_cmd": "x-terminal-emulator  -e bash -c \"'$&#123;file_path&#125;/$&#123;file_base_name&#125;' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">            "shell_cmd": "x-terminal-emulator  -e bash -c \"'$&#123;file_path&#125;/$&#123;file_base_name&#125;.out' ; read -p '\nPress ENTER or type command to continue...'\"" </span><br><span class="line">        &#125; </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      linux下gitignore c++的生成文件 送一份linux下Sublime的C++编译配置
    
    </summary>
    
      <category term="搞机" scheme="https://www.wolfdan.cn/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="搞机" scheme="https://www.wolfdan.cn/tags/%E6%90%9E%E6%9C%BA/"/>
    
      <category term="gitignore" scheme="https://www.wolfdan.cn/tags/gitignore/"/>
    
      <category term="linux" scheme="https://www.wolfdan.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Deepin无法正常关机重启</title>
    <link href="https://www.wolfdan.cn/Deepin%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF/"/>
    <id>https://www.wolfdan.cn/Deepin无法正常关机重启/</id>
    <published>2019-09-24T05:58:58.000Z</published>
    <updated>2019-10-17T11:20:27.005Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:14 GMT+0800 (GMT+08:00) --><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>一般是电脑有双显卡，而且独显是英伟达的，但是由于驱动未开源，所以linux下不好装驱动</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="安装驱动—-gt-Deepin折腾了好久还是没有成功—-gt-放弃"><a href="#安装驱动—-gt-Deepin折腾了好久还是没有成功—-gt-放弃" class="headerlink" title="安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃"></a>安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃</h2><p>安装驱动—-&gt; Deepin折腾了好久还是没有成功—-&gt; 放弃</p><h2 id="让启动加载老版本的显卡驱动"><a href="#让启动加载老版本的显卡驱动" class="headerlink" title="让启动加载老版本的显卡驱动"></a>让启动加载老版本的显卡驱动</h2><p>/etc/default/grub 里加入一行 GRUB_CMDLINE_LINUX=<code>&quot;acpi_osi=! acpi_osi=&#39;Windows 2009&#39;&quot;</code> （<strong>建议最好看一下实现操作</strong>）</p><h1 id="实现操作"><a href="#实现操作" class="headerlink" title="实现操作"></a>实现操作</h1><h2 id="管理员模式修改"><a href="#管理员模式修改" class="headerlink" title="管理员模式修改"></a>管理员模式修改</h2><p><code>sudo vi /etc/default/grub</code><br>不用管理员模式可能就会发现这个文件不存在等问题</p><h2 id="添加代码-附操作图"><a href="#添加代码-附操作图" class="headerlink" title="添加代码(附操作图)"></a>添加代码(附操作图)</h2><ol><li>可以直接在GRUB_CMDLINE_LINUX_DEFAULT=”splash quiet “的quiet后面添加<code>&quot;acpi_osi=! acpi_osi=&#39;Windows 2009&#39;&quot;</code></li><li>也可以直接添加到 GRUB_CMDLINE_LINUX=””这一行的引号里面<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/%E6%98%BE%E5%8D%A1/Deepin/Deepin%E4%B8%8B%E5%8F%8C%E6%98%BE%E5%8D%A1%E6%97%A0%E6%B3%95%E5%85%B3%E6%9C%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="Deepin下双显卡无法关机的解决方案"></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Deepin无法正常关机重启
    
    </summary>
    
      <category term="搞机" scheme="https://www.wolfdan.cn/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="Deepin" scheme="https://www.wolfdan.cn/tags/Deepin/"/>
    
      <category term="搞机" scheme="https://www.wolfdan.cn/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第22周[22/521]</title>
    <link href="https://www.wolfdan.cn/ARST%E6%89%93%E5%8D%A1%E7%AC%AC22%E5%91%A8-22-521/"/>
    <id>https://www.wolfdan.cn/ARST打卡第22周-22-521/</id>
    <published>2019-09-22T11:46:38.000Z</published>
    <updated>2019-10-17T11:20:26.576Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Oct 22 2019 19:11:13 GMT+0800 (GMT+08:00) --><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://wolfdan.cn/2019/09/16/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-26-100/" target="_blank" rel="noopener">2019上海网络赛G-Substring_字符串Hash+自建Hashmap_算法日常[26/100]</a></p><p><a href="https://wolfdan.cn/2019/09/17/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-27-100/" target="_blank" rel="noopener">CF123D_SAM_算法日常[27/100]</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://elemental.medium.com/bring-back-handwriting-its-good-for-your-brain-fe22fe6c81d2" target="_blank" rel="noopener">Bring Back Handwriting: It’s Good for Your Brain</a><br>是啊，在记笔记的时候，人因为手写比打字慢很多，然后时间又不是很够，所以就会主动思考，用大脑提炼出自己最熟悉的词来加工笔记，所以更好地进行了学习</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://ubuntuqa.com/article/1339.html" target="_blank" rel="noopener">如何将整个Ubuntu系统移动(复制)到另一个硬盘？ - Ubuntu问答</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://wolfdan.cn/2019/09/20/%E5%A4%8D%E5%88%B6%E7%A1%AC%E7%9B%98%E4%B8%AD%E7%9A%84Ubuntu%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98-%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98Deepin-Ubunntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">复制硬盘中的Ubuntu到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      ARST打卡 2019上海网络赛G-Substring_字符串Hash+自建Hashmap_算法日常[26/100] CF123D_SAM_算法日常[27/100] Bring Back Handwriting- It’s Good for Your Brain 如何将整个Ubuntu系统移动(复制)到另一个硬盘？ - Ubuntu问答 复制硬盘中的Ubuntu到移动硬盘_实现移动硬盘Deepin+Ubunntu双系统
    
    </summary>
    
      <category term="ARST" scheme="https://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="https://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
</feed>
