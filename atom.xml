<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>狼胆</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wolfdan.cn/"/>
  <updated>2019-08-18T02:08:29.060Z</updated>
  <id>http://www.wolfdan.cn/</id>
  
  <author>
    <name>wolfdan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019牛客多校10 B题_算法日常[12/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/17/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-12-100/"/>
    <id>http://www.wolfdan.cn/2019/08/17/算法日常-12-100/</id>
    <published>2019-08-17T15:01:59.000Z</published>
    <updated>2019-08-18T02:08:29.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019牛客多校10-B题"><a href="#2019牛客多校10-B题" class="headerlink" title="2019牛客多校10 B题"></a>2019牛客多校10 B题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://ac.nowcoder.com/acm/contest/890/B" target="_blank" rel="noopener">2019牛客多校10 B题</a><br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_1.png" alt="B_1"></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_2.png" alt="B_2"></p><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%8D%81%E5%9C%BA/B_A.png" alt="B_A"></p><p><strong>(详见代码注释)</strong></p><p><strong>C++由于容易数据溢出，所以必须加限制，否则会造成数据溢出的错误，昨晚WA了两个小时的血的教训</strong></p><p>k不会到很大的数据范围(限制在了k&lt;10^12)</p><p>然后递归的时候是一样的,最终也是递归到x==1,x==2</p><p>是按照题中斐波那契递归回去的，所以不会出错</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p><strong>写了python版之后去写C++版本的，结果一直WA了整整2个多小时，眼睛痛，所以决定明天早起再看看哪里出错了并给出C++版的AC代码</strong>(第二天已经更新)</p><h3 id="Python3版"><a href="#Python3版" class="headerlink" title="Python3版"></a>Python3版</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"></span><br><span class="line">lf = [<span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 一千多项的时候远远超过了10^12+7的</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>) :</span><br><span class="line">    lf.append(lf[<span class="number">-2</span>] + lf[<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># if _ == 999:</span></span><br><span class="line">    <span class="comment">#     print(If[-1])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, s)</span> :</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"COFFEE"</span>[s]</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CHICKEN"</span>[s]</span><br><span class="line">    <span class="keyword">if</span> s &gt;= lf[x<span class="number">-2</span>] :</span><br><span class="line">        <span class="keyword">return</span> f(x - <span class="number">1</span>, s - lf[x - <span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> f(x - <span class="number">2</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(eval(input())) :</span><br><span class="line">    n, s = map(int, input().split())</span><br><span class="line">    s -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 从s到min(s+10,lf[n]), 用中括号括起来生成列表</span></span><br><span class="line">    r = [f(n, t) <span class="keyword">for</span> t <span class="keyword">in</span> range(s, min(s + <span class="number">10</span>, lf[n]))]</span><br><span class="line">    print(<span class="string">''</span>.join(r))</span><br></pre></td></tr></table></figure><h3 id="C-AC代码1-与题解思路相同的"><a href="#C-AC代码1-与题解思路相同的" class="headerlink" title="C++AC代码1_与题解思路相同的"></a>C++AC代码1_与题解思路相同的</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line">ll len[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="keyword">int</span> T,n;ll k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> <span class="string">"COFFEE"</span>[k];</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">2</span>) <span class="keyword">return</span> <span class="string">"CHICKEN"</span>[k];</span><br><span class="line">    <span class="keyword">if</span>(k&gt;=len[x<span class="number">-2</span>]) <span class="keyword">return</span> f(x<span class="number">-1</span>,k-len[x<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(x<span class="number">-2</span>,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">6</span>,len[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    ll mx = <span class="number">1e13</span>;</span><br><span class="line">    <span class="comment">/*这里最好不要break,否则会造成数组的部分是0值，除非先赋值为mx</span></span><br><span class="line"><span class="comment">    (当然也可以使用C++AC代码二的特殊提前处理去使用break)</span></span><br><span class="line"><span class="comment">    但是可以通过min控制数值大小，以免引发数据溢出错误</span></span><br><span class="line"><span class="comment">    可以使用min的原因是，k不会到很大的数据范围</span></span><br><span class="line"><span class="comment">    然后递归的时候是一样的,最终也是递归到x==1,x==2</span></span><br><span class="line"><span class="comment">    是按照题中斐波那契递归回去的，所以不会出错*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">500</span>;i++)&#123;</span><br><span class="line">        len[i] = min(len[i<span class="number">-2</span>]+len[i<span class="number">-1</span>],mx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">cin</span>&gt;&gt;T;T--;)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        k-=<span class="number">1</span>;</span><br><span class="line">        ans.clear();</span><br><span class="line">        ll tn = min(k+<span class="number">10</span>,len[n]);</span><br><span class="line">        <span class="keyword">for</span>(ll i=k;i&lt;tn;i++)&#123;</span><br><span class="line">            ans += f(n,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-AC代码2"><a href="#C-AC代码2" class="headerlink" title="C++AC代码2"></a>C++AC代码2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll len[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">string</span> str[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll a, ll b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*substr的第二个参数是长度*/</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">2</span>) <span class="keyword">return</span> str[x].substr(a<span class="number">-1</span>, b);</span><br><span class="line">    <span class="keyword">if</span>(a+b<span class="number">-1</span> &lt;= len[x<span class="number">-2</span>]) <span class="keyword">return</span> dfs(x<span class="number">-2</span>, a, b);</span><br><span class="line">    <span class="keyword">if</span>(a &gt; len[x<span class="number">-2</span>]) <span class="keyword">return</span> dfs(x<span class="number">-1</span>, a-len[x<span class="number">-2</span>], b);</span><br><span class="line">    <span class="comment">/*分段后..x-1可以直接从1开始了*/</span></span><br><span class="line">    <span class="keyword">return</span> dfs(x<span class="number">-2</span>, a, len[x<span class="number">-2</span>]-a+<span class="number">1</span>) + dfs(x<span class="number">-1</span>, <span class="number">1</span>, b-(len[x<span class="number">-2</span>]-a+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    str[<span class="number">1</span>] = <span class="string">"COFFEE"</span>; str[<span class="number">2</span>] = <span class="string">"CHICKEN"</span>;</span><br><span class="line">    len[<span class="number">1</span>] = <span class="number">6</span>, len[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    ll mx = <span class="number">1e17</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">500</span>; i++) &#123;</span><br><span class="line">        <span class="comment">/*前缀和*/</span></span><br><span class="line">        len[i] = len[i<span class="number">-1</span>] + len[i<span class="number">-2</span>];</span><br><span class="line">        <span class="comment">/* i=80就会跳出*/</span></span><br><span class="line">        <span class="keyword">if</span>(len[i] &gt; mx) &#123;<span class="comment">/*cout&lt;&lt;i&lt;&lt;endl;*/</span><span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; ll k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="comment">/*提前给x降低大小，所以就可以前面使用break，并且减少递归的次数*/</span></span><br><span class="line">        <span class="keyword">for</span>(x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(len[x] &gt;= k+<span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == n+<span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; dfs(x<span class="number">-1</span>, k, min(<span class="number">10l</span>l, len[x]-k+<span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>((n-x)%<span class="number">2</span>) x++;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; dfs(x, k, min(<span class="number">10l</span>l, len[x]-k+<span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>不用去刻意讨好谁，因为只有做自己，才配得上最棒的人生</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校10 B题,斐波那契数列递归构造字符串的思维题 C++由于容易数据溢出，所以必须加限制，否则会造成数据溢出的错误，昨晚WA了两个小时的血的教训 不用去刻意讨好谁，因为只有做自己，才配得上最棒的人生
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="狼胆带你每天头铁一题" scheme="http://www.wolfdan.cn/tags/%E7%8B%BC%E8%83%86%E5%B8%A6%E4%BD%A0%E6%AF%8F%E5%A4%A9%E5%A4%B4%E9%93%81%E4%B8%80%E9%A2%98/"/>
    
      <category term="斐波那契数列" scheme="http://www.wolfdan.cn/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
      <category term="递归" scheme="http://www.wolfdan.cn/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="字符串" scheme="http://www.wolfdan.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校9E题详解_算法日常[11/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/16/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-11-100/"/>
    <id>http://www.wolfdan.cn/2019/08/16/算法日常-11-100/</id>
    <published>2019-08-16T12:20:54.000Z</published>
    <updated>2019-08-16T13:00:46.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组合数学思维题"><a href="#组合数学思维题" class="headerlink" title="组合数学思维题"></a>组合数学思维题</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/889/E" target="_blank" rel="noopener">2019牛客多校9 E题</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_ti1.png" alt="ti1"></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_ti2.png" alt="ti2"></p><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p><strong>其实解法一二的本质内核是一样的，可以都看一下</strong></p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>当合并这两个集合的时候，应该将这两个集合合并后消失的贡献减去<br>消失的贡献就应该是选择了一个a，选择了一个b，从剩下的众多集合中选择两个<br>(即cd,ce,ef……)那么这个怎么算呢，可以用完全平方公式来推导<br>(a+b+c+d)^2=a^2+b^2+c^2+d^2+2ab+2ac+2bc+2ad+2bd+2cd<br>所以众多集合中选择任意选择两个的情况可以用（和的平方-平方的和）/2来求（最重要的一步）</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/E_tijie_ldm.png" alt="tijie"></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><h3 id="解法一代码"><a href="#解法一代码" class="headerlink" title="解法一代码"></a>解法一代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> f[MAXN], sz[MAXN];</span><br><span class="line">ll sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f[x] == x ? x : (f[x] = getf(f[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    ll ans = (__int128) n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) * (n - <span class="number">3</span>) / <span class="number">24</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i] = i;</span><br><span class="line">        sz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*最开始的平方和*/</span></span><br><span class="line">    sum = n;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        u = getf(u);</span><br><span class="line">        v = getf(v);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span> || u==v) <span class="keyword">goto</span> END;</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            <span class="comment">/*减掉合并部分的平方和*/</span></span><br><span class="line">            sum -= sqr(sz[u]) + sqr(sz[v]);</span><br><span class="line">            <span class="comment">/*后面的(sqr(n - sz[u] - sz[v]) - sum) / 2;就是`和的平方`-`平方和`=`剩下的所有两两组合`*/</span></span><br><span class="line">            ll tmp = <span class="number">1l</span>l * sz[u] * sz[v] * (sqr(n - sz[u] - sz[v]) - sum) / <span class="number">2</span>;</span><br><span class="line">            f[u] = v;</span><br><span class="line">            sz[v] += sz[u];</span><br><span class="line">            <span class="comment">/*新的平方和的维护*/</span></span><br><span class="line">            sum += sqr(sz[v]);</span><br><span class="line">            <span class="comment">/*减去合并减少的贡献值*/</span></span><br><span class="line">            ans -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        END:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二代码"><a href="#解法二代码" class="headerlink" title="解法二代码"></a>解法二代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll C[maxn][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> p[maxn], sz[maxn], cnt[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            C[i][j] = C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == p[x] ? x : p[x] = Find(p[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = Find(x), fy = Find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy) &#123;</span><br><span class="line">        <span class="keyword">if</span>(fx &gt; fy) swap(fx, fy);</span><br><span class="line">        p[fx] = fy;</span><br><span class="line">        ll tp = C[n-sz[fx]-sz[fy]][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : st) &#123;</span><br><span class="line">            tp -= C[i][<span class="number">2</span>]*cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        tp += C[sz[fx]][<span class="number">2</span>]+C[sz[fy]][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(tp &gt; <span class="number">0</span>) ans -= <span class="number">1L</span>L*sz[fx]*sz[fy]*tp;</span><br><span class="line">        cnt[sz[fx]]--;</span><br><span class="line">        cnt[sz[fy]]--;</span><br><span class="line">        <span class="keyword">if</span>(cnt[sz[fx]] == <span class="number">0</span>) st.erase(sz[fx]);</span><br><span class="line">        <span class="keyword">if</span>(cnt[sz[fy]] == <span class="number">0</span>) st.erase(sz[fy]);</span><br><span class="line">        sz[fy] += sz[fx];</span><br><span class="line">        cnt[sz[fy]]++;</span><br><span class="line">        st.insert(sz[fy]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        sz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[<span class="number">1</span>] = n; st.insert(<span class="number">1</span>);</span><br><span class="line">    ans = C[n][<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        Union(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>生活总是很奇妙，我们到底该去向何方？</p><p>世俗的成功吗？还是当下的快乐呢？</p><p>珍惜身边的人呢？还是继续寻找？</p>]]></content>
    
    <summary type="html">
    
      2019牛客多校9 E题,组合数学的思维题 生活到底是什么
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="狼胆带你每天头铁一题" scheme="http://www.wolfdan.cn/tags/%E7%8B%BC%E8%83%86%E5%B8%A6%E4%BD%A0%E6%AF%8F%E5%A4%A9%E5%A4%B4%E9%93%81%E4%B8%80%E9%A2%98/"/>
    
      <category term="组合数学" scheme="http://www.wolfdan.cn/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>折半搜索_算法日常[10/521]</title>
    <link href="http://www.wolfdan.cn/2019/08/15/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-10-521/"/>
    <id>http://www.wolfdan.cn/2019/08/15/算法日常-10-521/</id>
    <published>2019-08-15T12:18:44.000Z</published>
    <updated>2019-08-15T13:08:27.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/889/D" target="_blank" rel="noopener">2019牛客多校9 D题</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B9%9D%E5%9C%BA/D_ti.png" alt="D_ti"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>折半搜索,详见下面的算法推荐和下面的AC的代码</p><p><a href="https://oi-wiki.org/search/#meet-in-middle" target="_blank" rel="noopener">meet-in-middle</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll v;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; r) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; r.v; &#125;</span><br><span class="line">&#125;b[maxn];</span><br><span class="line">ll arr[<span class="number">40</span>];</span><br><span class="line">ll a[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; ll sum;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;sum);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i]);</span><br><span class="line">    <span class="keyword">int</span> x = n/<span class="number">2</span>, y = n-x;</span><br><span class="line">    <span class="keyword">int</span> up1 = (<span class="number">1</span>&lt;&lt;x), up2 = (<span class="number">1</span>&lt;&lt;y);</span><br><span class="line">    <span class="comment">/*全0到全1串的遍历，然后之后是对每个串的逐位遍历，记录此串的和值*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) a[i] += arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up2; i++) &#123;</span><br><span class="line">        b[i].id = i; b[i].v = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) b[i].v += arr[x+j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*让B[i]数组有序，然后使用lower_bound去搜索*/</span></span><br><span class="line">    sort(b, b+up2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up2; i++) c[i] = b[i].v;</span><br><span class="line">    <span class="comment">/*这里复杂度是2^18*log(2^18) = 4.7*10^6左右*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; up1; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = lower_bound(c, c+up2, sum-a[i])-c;</span><br><span class="line">        <span class="keyword">if</span>(c[p]+a[i] == sum) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> id = b[p].id;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(id &amp; (<span class="number">1</span>&lt;&lt;j)) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天叨叨一句"><a href="#每天叨叨一句" class="headerlink" title="每天叨叨一句"></a>每天叨叨一句</h1><h2 id="“我不同意你，-但我可以支持你”"><a href="#“我不同意你，-但我可以支持你”" class="headerlink" title="“我不同意你， 但我可以支持你”"></a>“我不同意你， 但我可以支持你”</h2><p>李开复原来是学法律的，但他爱好计算机，后来师从美国卡内基梅隆大学计算机学院院长罗杰·瑞迪。</p><p>罗杰非常喜欢李开复，把自己的知识毫无保留地传授给李开复，使得他在编程水平突飞猛进。但随着研究的深入，李开复与导师有了分歧，尤其是在计算机语音识别系统研究时，罗杰主张用传统的方法，可是李开复却想从另一个方向，这悖离了主流，有别于大多数语音技术同行。怎么办？导师给李开复指出来了，让他“悬崖勒马”。可是李开复还是想按照自己的想法做。</p><p>有不少关系李开复的好心人提醒他：“你在计算机领域还乳臭未干，人家罗杰是美国国家工程学院和美国艺术与科学学院院士，你听导师的，可以少走弯路。”可是李开复却说：“我想另辟溪径。”“可是这样会得罪导师，如果得不到他的支持，你可能寸步难行。你另搞一套，如果成了，让他多没面子。相反你顺从了他，他是总统特别顾问委员会信息委员会成员、‘图灵奖’获得者，有他的提携，将来前途不可限量。”可是那时的李开复没想那么复杂，还是决定走自己的路。</p><p>没想到，尽管导师批评了李开复几次，可是李开复一意孤行。罗杰说：<strong>“作为科学家，我也不是全知全能。我不同意你的看法，但我可以支持你。”</strong>这让李开复非常意外。</p><p>此后，李开复就放开手脚大干起来。不久，罗杰又来问李开复：“有没有什么困难？”“暂时没有。”“如果有什么需要我帮助的，尽管说啊。”李开复反问道：“你不生我的气啊？”“‘不认同’不等于‘不支持’。”罗杰说。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.sina.com.cn/s/blog_98acb6e70102w95o.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_98acb6e70102w95o.html</a></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校9 D题,折半搜索  我不同意你， 但我可以支持你
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="狼胆带你每天头铁一题" scheme="http://www.wolfdan.cn/tags/%E7%8B%BC%E8%83%86%E5%B8%A6%E4%BD%A0%E6%AF%8F%E5%A4%A9%E5%A4%B4%E9%93%81%E4%B8%80%E9%A2%98/"/>
    
      <category term="折半搜索" scheme="http://www.wolfdan.cn/tags/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>10进制矩阵快速幂-狼胆带你每天头铁一题-算法日常[9/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/14/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-9-100/"/>
    <id>http://www.wolfdan.cn/2019/08/14/算法日常-9-100/</id>
    <published>2019-08-14T12:30:59.000Z</published>
    <updated>2019-08-14T15:16:45.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="头铁来源"><a href="#头铁来源" class="headerlink" title="头铁来源"></a>头铁来源</h1><p>因为狼胆小编本人比较垃圾，所以只能每天带大家头铁一题简单常识题(大佬眼中的常识，我这个蒟蒻还只能头铁)，希望能帮助到小白，那就很开心了</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/885/B" target="_blank" rel="noopener">2019牛客多校5 B题</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/B_ti.png" alt="B_ti"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="理想中的草稿状态"><a href="#理想中的草稿状态" class="headerlink" title="理想中的草稿状态"></a>理想中的草稿状态</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E7%90%86%E6%83%B3%E8%8D%89%E7%A8%BF.png" alt="理想"></p><h3 id="真实的草稿状态"><a href="#真实的草稿状态" class="headerlink" title="真实的草稿状态"></a>真实的草稿状态</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E7%8E%B0%E5%AE%9E%E8%8D%89%E7%A8%BF.png" alt="真实"></p><h3 id="dreammoon大佬的官方的题解也可以看看"><a href="#dreammoon大佬的官方的题解也可以看看" class="headerlink" title="dreammoon大佬的官方的题解也可以看看"></a>dreammoon大佬的官方的题解也可以看看</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%94%E5%9C%BA/%E8%BF%99%E9%87%8C%E7%9A%84%E5%8D%95%E4%BD%8D%E6%98%AFbase%EF%BC%8C%E5%BA%95%E7%9A%84%E6%84%8F%E6%80%9D...%E4%BB%A5%E5%89%8D%E4%B8%80%E7%9B%B4get%E4%B8%8D%E5%88%B0%E6%A2%A6%E6%9C%88%E5%A4%A7%E4%BD%AC%E7%9A%84%E7%82%B9.png" alt></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">3000010</span>;</span><br><span class="line">ULL MOD;</span><br><span class="line"><span class="keyword">char</span> s[SIZE];</span><br><span class="line"><span class="comment">/*矩阵相乘，第一行乘以第一列，第一行乘以第二列……也可以使用for两重循环求*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ULL* c1, ULL* c2, ULL *res)</span></span>&#123;</span><br><span class="line">    res[<span class="number">0</span>] = (c1[<span class="number">0</span>] * c2[<span class="number">0</span>] + c1[<span class="number">1</span>] * c2[<span class="number">2</span>]) % MOD;</span><br><span class="line">    res[<span class="number">1</span>] = (c1[<span class="number">0</span>] * c2[<span class="number">1</span>] + c1[<span class="number">1</span>] * c2[<span class="number">3</span>]) % MOD;</span><br><span class="line">    res[<span class="number">2</span>] = (c1[<span class="number">2</span>] * c2[<span class="number">0</span>] + c1[<span class="number">3</span>] * c2[<span class="number">2</span>]) % MOD;</span><br><span class="line">    res[<span class="number">3</span>] = (c1[<span class="number">3</span>] * c2[<span class="number">3</span>] + c1[<span class="number">2</span>] * c2[<span class="number">1</span>]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> x1,x2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x1, &amp;x2, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%llu"</span>,s, &amp;MOD);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 统计长度，并且把个位的值(即最后一位的值)减去1 */</span></span><br><span class="line">    <span class="keyword">for</span>(; s[len]; len++);</span><br><span class="line">    s[len<span class="number">-1</span>]--;</span><br><span class="line">    <span class="comment">/* 个位减掉了之后向前面借位 */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; s[i] &lt; <span class="string">'0'</span>; i--)&#123;</span><br><span class="line">        s[i] = <span class="string">'9'</span>;</span><br><span class="line">        s[i<span class="number">-1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    ULL now0 = x1, now1 = x2;</span><br><span class="line">    ULL d[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">2</span>] = b;</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">3</span>] = a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> it = len - <span class="number">1</span>; it &gt;= <span class="number">0</span>; it--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(d[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(ULL) * <span class="number">12</span>);</span><br><span class="line">        <span class="comment">/*A "常数"矩阵相乘4次*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">1</span>; p &lt; <span class="number">4</span>; p++)&#123;</span><br><span class="line">            mul(d[p<span class="number">-1</span>], d[p<span class="number">-1</span>], d[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        s[it] -= <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">4</span>; p++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((s[it] &gt;&gt; p) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                ULL* ml = d[p];</span><br><span class="line">                <span class="built_in">std</span>::tie(now0, now1) = <span class="built_in">std</span>::make_pair((ml[<span class="number">0</span>] * now0 + ml[<span class="number">1</span>] * now1) % MOD,(ml[<span class="number">2</span>] * now0 + ml[<span class="number">3</span>] * now1) % MOD);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mul(d[<span class="number">1</span>], d[<span class="number">3</span>], d[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, now1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="少量知识点"><a href="#少量知识点" class="headerlink" title="少量知识点"></a>少量知识点</h3><p><a href="http://www.cplusplus.com/reference/tuple/tie/?kw=tie" target="_blank" rel="noopener">tie</a></p><p>pair是tuple的一个子集</p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>今天看到一禅小和尚: 我们尝遍生活的苦，却都只是为了过好平凡的一生</p><p><strong>但我觉得如果自己明知道人生是苦，明知道<a href="https://www.wolfdan.cn/2019/08/05/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/">人是基因的机器人(参见算法日常4的叨叨)</a>，却认认认真真地选择好好生活，这就是一种伟大，这就是自由，这就是自己的突破，就是自己的英雄！</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校5 B题,数学,10进制矩阵快速幂，矩阵快速幂,算法学习日常___我觉得如果自己明知道人生是苦，却认认认真真地选择好好生活，这就是一种伟大，这就是自由，这就是自己的突破，就是自己的英雄！
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="狼胆带你每天头铁一题" scheme="http://www.wolfdan.cn/tags/%E7%8B%BC%E8%83%86%E5%B8%A6%E4%BD%A0%E6%AF%8F%E5%A4%A9%E5%A4%B4%E9%93%81%E4%B8%80%E9%A2%98/"/>
    
      <category term="数学" scheme="http://www.wolfdan.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵快速幂" scheme="http://www.wolfdan.cn/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="10进制矩阵快速幂" scheme="http://www.wolfdan.cn/tags/10%E8%BF%9B%E5%88%B6%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>银联挑战赛复赛A,B题_算法日常[8/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/13/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-8-100/"/>
    <id>http://www.wolfdan.cn/2019/08/13/算法日常-8-100/</id>
    <published>2019-08-13T09:22:31.000Z</published>
    <updated>2019-08-13T13:15:46.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>8月10号是计算机设计大赛决赛答辩的最后一天，这天下午是牛客多校8，晚上是银联挑战赛复赛，队友出去吃吃喝喝了，我点个外卖，打着比赛，然后第一题就卡住不会做，然后自闭了，果然银联的比赛很重视数学题啊啊啊，是我数学题没怎么练，太菜了—&gt;所以菜导致既没有吃到好东西，又导致爆零没太多收获，所以还是需要多多努力</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="爱喝「肥宅快乐水」的班长"><a href="#爱喝「肥宅快乐水」的班长" class="headerlink" title="爱喝「肥宅快乐水」的班长"></a>爱喝「肥宅快乐水」的班长</h2><p><a href="https://nanti.jisuanke.com/t/40548" target="_blank" rel="noopener">爱喝「肥宅快乐水」的班长</a></p><h2 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/2019%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%A4%8D%E8%B5%9B/A_an.png" alt="A_an"></p><h2 id="看不懂的知识链接"><a href="#看不懂的知识链接" class="headerlink" title="看不懂的知识链接"></a>看不懂的知识链接</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%9A%94%E6%9D%BF%E6%B3%95" target="_blank" rel="noopener">隔板法</a></p><p>扩展的隔板法中：</p><p>转化前的空盒 == 转化后每个盒子至少放一个</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> C[M][M];</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;a,ll v)</span></span>&#123;</span><br><span class="line">    a += v;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= mod) a-=mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(C[i][j]&gt;=mod) C[i][j]-=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;C[n+m<span class="number">-2</span>][m<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><h2 id="整数对"><a href="#整数对" class="headerlink" title="整数对"></a>整数对</h2><p><a href="https://nanti.jisuanke.com/t/40549" target="_blank" rel="noopener">整数对</a></p><h2 id="题目解法-1"><a href="#题目解法-1" class="headerlink" title="题目解法"></a>题目解法</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/2019%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%A4%8D%E8%B5%9B/B_an.png" alt="B_an"></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll T,n,m,p,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        ll x = n/p;</span><br><span class="line">        <span class="keyword">for</span>(ll r = <span class="number">0</span>; r &lt; p ; r++ )&#123;</span><br><span class="line">            <span class="comment">/*求出b的种类数*/</span></span><br><span class="line">            ll bn = m/(p/__gcd(r,p));</span><br><span class="line">            <span class="comment">/*分别对应题解的1,2,3种情况,其实1,3可以合并*/</span></span><br><span class="line">            <span class="keyword">if</span>(!r) ans+=x*bn;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span>&lt;r &amp;&amp; r&lt;=n%p) ans+=(x+<span class="number">1</span>)*bn;</span><br><span class="line">            <span class="keyword">else</span> ans+=x*bn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人心的成见如同一座大山，我们总是口上说不能有偏见，其实真正的内心想法却不是这样的…</p><p>所以我对别人的偏见，我只能尽量克制，让自己理性对待，然后做之不止，乃成君子</p><p>对于别人对自己的偏见不要在意，而是要专注自己的目标</p><p>感觉自己生来就有一种追求挑战的血液，在小时候尤为明显，但是感觉在长久的教化过程中削弱了，所以我想要找回本真，生命不息，战斗不止，和天生的不公斗到底，做自己的英雄</p>]]></content>
    
    <summary type="html">
    
      银联挑战赛复赛A,B题,组合数学,隔板法,数学思维题,算法学习日常
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="组合数学" scheme="http://www.wolfdan.cn/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="隔板法" scheme="http://www.wolfdan.cn/tags/%E9%9A%94%E6%9D%BF%E6%B3%95/"/>
    
      <category term="数学思维题" scheme="http://www.wolfdan.cn/tags/%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第16周[16/521]</title>
    <link href="http://www.wolfdan.cn/2019/08/11/ARST%E6%89%93%E5%8D%A1%E7%AC%AC16%E5%91%A8-16-521/"/>
    <id>http://www.wolfdan.cn/2019/08/11/ARST打卡第16周-16-521/</id>
    <published>2019-08-11T14:11:33.000Z</published>
    <updated>2019-08-13T08:01:25.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.8/2019.8.10" target="_blank" rel="noopener">牛客多校8的签到</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://humanparts.medium.com/being-happy-is-hard-work-bcc222913c79" target="_blank" rel="noopener">Being Happy Is Hard Work</a><br>好多生词啊，所以决定开始背单词<br><strong>Happiness, in other words, is practiced.</strong></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://oi-wiki.org/ds/seg/" target="_blank" rel="noopener">打算法比赛一定要熟练使用线段树啊，血的教训</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/08/05/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/">2019杭电多校1006和1007算法日常[4/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/06/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8-5-100/">后缀数组-算法学习日常[5/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/07/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-6-100/">2019杭电多校6_1005算法日常[6/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/11/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-7-100/">2019牛客多校8_B题算法日常[7/100]</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>生活总有太多的美好无法用相机记录下来，所以那就给每一个当下投以最好的微笑吧</strong></p>]]></content>
    
    <summary type="html">
    
      ARST打卡 打算法比赛一定要熟练使用线段树啊，血的教训 2019杭电多校1006和1007算法日常[4/100] 后缀数组-算法学习日常[5/100] 2019杭电多校6_1005算法日常[6/100] 2019牛客多校8_B题算法日常[7/100]
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校8_B题算法日常[7/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/11/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-7-100/"/>
    <id>http://www.wolfdan.cn/2019/08/11/算法日常-7-100/</id>
    <published>2019-08-10T17:33:57.000Z</published>
    <updated>2019-08-12T12:11:49.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接以及描述"><a href="#题目链接以及描述" class="headerlink" title="题目链接以及描述"></a>题目链接以及描述</h2><p><a href="https://ac.nowcoder.com/acm/contest/888/B" target="_blank" rel="noopener">2019牛客多校8_B题</a><br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AB%E5%9C%BA/B1.png" alt></p><h2 id="题意以及思路"><a href="#题意以及思路" class="headerlink" title="题意以及思路"></a>题意以及思路</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AB%E5%9C%BA/B2.png" alt></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="comment">/*c[i]记录的是a[i]的上一个位置加1的位置*/</span></span><br><span class="line">        c[i] = b[a[i]]+<span class="number">1</span>;</span><br><span class="line">        b[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans += <span class="number">1L</span>L*(n-i+<span class="number">1</span>)*(i-c[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每日一句叨叨"><a href="#每日一句叨叨" class="headerlink" title="每日一句叨叨"></a>每日一句叨叨</h1><p><strong>但求精进,无问西东</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校8_B题,思维题,算法学习日常,但求精进,无问西东
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="思维题" scheme="http://www.wolfdan.cn/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2019杭电多校6_1005算法日常[6/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/07/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-6-100/"/>
    <id>http://www.wolfdan.cn/2019/08/07/算法日常-6-100/</id>
    <published>2019-08-07T14:04:01.000Z</published>
    <updated>2019-08-07T14:44:48.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6638" target="_blank" rel="noopener">2019杭电多校6_1005_HDU6638</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="自己"><a href="#自己" class="headerlink" title="自己"></a>自己</h3><p>一开想偏了，想着像以前0,1矩阵那种同权值点一样叠加成为矩形的最大面积来求解，这样子就能让复杂度在O(n^2)的样子</p><p>然后并非如此，这里的权值w是一个可正可负的整数…自己隐隐约约地感觉复杂度要达到O(n^2*log(n)),但是没有往下想，虽然想了也不一定会,,,emmmm,继续努力吧</p><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><ul><li>首先将纵坐标离散化到 O(n) 的范围内，方便后续的处理。</li><li>将所有点按照横坐标排序，枚举矩形的上边界，然后往后依次加入每个点，这样就确定了矩形的上下边界。</li><li>设 v[y] 表示矩形内部纵坐标为 y 的点的权值和，则答案为 v 的最大子段和，用线段树维护带修改的最大子段和即可。</li><li>时间复杂度 O(n^2*log(n))</li></ul><h2 id="std理解版"><a href="#std理解版" class="headerlink" title="std理解版"></a>std理解版</h2><p>今天比较晚了，明天要出一趟远门，所以暂时没有手写，对不起自己啊，等回家一定要好好把这个重新写几遍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2010</span>,M=<span class="number">4100</span>;</span><br><span class="line"><span class="keyword">int</span> Case,n,m,i,j,k,cb,b[N],pos[N];ll pre[M],suf[M],s[M],v[M],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span><span class="keyword">int</span> x,y,z;&#125;e[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> E&amp;a,<span class="keyword">const</span> E&amp;b)</span></span>&#123;<span class="keyword">return</span> a.x&lt;b.x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用纵坐标建的线段树，大佬对于线段树的理解以及如同我对1+1的理解一样了！*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">  pre[x]=suf[x]=s[x]=v[x]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">    pos[a]=x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid=(a+b)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  build(x&lt;&lt;<span class="number">1</span>,a,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">  x=pos[x];</span><br><span class="line">  s[x]+=p;</span><br><span class="line">  <span class="keyword">if</span>(s[x]&gt;<span class="number">0</span>)pre[x]=suf[x]=v[x]=s[x];<span class="keyword">else</span> pre[x]=suf[x]=v[x]=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*上传的操作精辟,orz*/</span></span><br><span class="line">  <span class="keyword">for</span>(x&gt;&gt;=<span class="number">1</span>;x;x&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">/*根的左边的 = max(左子树之前的,左子树+右子树之前的)*/</span></span><br><span class="line">    pre[x]=max(pre[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>]+pre[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">/*根的右边的 = max(右子树右边的,右子树+左子树右边的)*/</span></span><br><span class="line">    suf[x]=max(suf[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+suf[x&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">/*s是直接叠加的*/</span></span><br><span class="line">    s[x]=s[x&lt;&lt;<span class="number">1</span>]+s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    <span class="comment">/*区间最大值 = max(左子树最大,右子树最大,左子树后面的+左子树前面的)*/</span></span><br><span class="line">    v[x]=max(max(v[x&lt;&lt;<span class="number">1</span>],v[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]),suf[x&lt;&lt;<span class="number">1</span>]+pre[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Case);</span><br><span class="line">  <span class="keyword">while</span>(Case--)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(cb=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].x,&amp;e[i].y,&amp;e[i].z);</span><br><span class="line">      b[++cb]=e[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*离散化纵坐标*/</span></span><br><span class="line">    sort(b+<span class="number">1</span>,b+cb+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(m=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;=cb;i++)<span class="keyword">if</span>(i==<span class="number">1</span>||b[i]!=b[m])b[++m]=b[i];</span><br><span class="line">    <span class="comment">/*给横坐标排序*/</span></span><br><span class="line">    sort(e+<span class="number">1</span>,e+n+<span class="number">1</span>,cmp);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*用离散化后的纵坐标覆盖掉原来的纵坐标*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)e[i].y=lower_bound(b+<span class="number">1</span>,b+m+<span class="number">1</span>,e[i].y)-b;</span><br><span class="line">    <span class="comment">/*枚举上边界，x是行号，是上边界*/</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(i==<span class="number">1</span>||e[i].x!=e[i<span class="number">-1</span>].x)&#123;</span><br><span class="line">      build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">      <span class="comment">/*加入点确定好下边界，这样上下边界都确定好了*/</span></span><br><span class="line">      <span class="keyword">for</span>(j=i;j&lt;=n;j=k)&#123;</span><br><span class="line">        <span class="comment">/*又是逐步插入空树维护区间最大值的操作*/</span></span><br><span class="line">        <span class="keyword">for</span>(k=j;k&lt;=n&amp;&amp;e[j].x==e[k].x;k++)change(e[k].y,e[k].z);</span><br><span class="line">        <span class="keyword">if</span>(ans&lt;v[<span class="number">1</span>])ans=v[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>今天是情人节，然而…没得女朋友…不过有队友和我一起大杭电多校还是很开心的啦(<del>还是有点点失落</del>)</p><h2 id="虽然"><a href="#虽然" class="headerlink" title="虽然"></a>虽然</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8%E7%9A%84%E5%8F%A8%E5%8F%A8/6%E4%B8%83%E5%A4%95%E6%83%85%E4%BA%BA%E8%8A%82/1.jpg" alt></p><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><p><strong>谁终将声震人间，必长久深自缄默</strong></p><p><strong>谁终将点燃闪电，必长久如云漂泊</strong></p><p><strong>全力以赴打完这一段时光的退役赛一定会是一个大学乃至人生最珍贵的记忆</strong>，所以这段时间先不要让自己被一个体内的激素控制，<strong>等时机到了，一定会更加美好！加油吧，少年！</strong></p>]]></content>
    
    <summary type="html">
    
      2019杭电多校6_1005_HDU6638,线段树,算法学习日常
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://www.wolfdan.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组-算法学习日常[5/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/06/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8-5-100/"/>
    <id>http://www.wolfdan.cn/2019/08/06/算法学习日常-5-100/</id>
    <published>2019-08-06T15:03:01.000Z</published>
    <updated>2019-08-12T12:11:49.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后缀数组论文分享"><a href="#后缀数组论文分享" class="headerlink" title="后缀数组论文分享"></a>后缀数组论文分享</h1><p><a href="https://github.com/wolfdan666/BlogPic/tree/master/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">后缀数组论文分享</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>人一能之，己百之；人十能之，己千之。果能此道矣，虽愚必明，虽柔必强。</strong></p>]]></content>
    
    <summary type="html">
    
      分享一个后缀数组的论文，很全，学了一天也没学完，发现自己之前学了三天的后缀数组又忘光了
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="后缀数组" scheme="http://www.wolfdan.cn/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2019杭电多校1006和1007算法日常[4/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/05/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/"/>
    <id>http://www.wolfdan.cn/2019/08/05/算法日常-4-100/</id>
    <published>2019-08-05T03:51:19.000Z</published>
    <updated>2019-08-05T14:42:18.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><ul><li>今天是杭电多校第5场，然后1006签到本来应该10mins内写完，然后我菜鸡写了2小时(各种问题<del>不熟练</del>和<del>紧张</del>)，赛后发现有大佬用dc3(一种据说复杂度O(n)的后缀数组算法,发现自己孤陋寡闻)</li><li>1007真滴有趣…闪电蛇皮走位，然后自己想复杂了一点点…</li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=2019+Multi-University+Training+Contest+5&source=1&searchmode=source" target="_blank" rel="noopener">2019杭电多校5</a></p><h2 id="1006解法"><a href="#1006解法" class="headerlink" title="1006解法"></a>1006解法</h2><p>Ekmp，用s.substr(1)的串来做ekmp函数的原串，s做ekmp函数的匹配串，这样跑一次ekmp就行，然后累加extend</p><p><a href="https://segmentfault.com/a/1190000008663857" target="_blank" rel="noopener">ekmp学习教程·我觉得比较好的一个(我也用这个学的)</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="comment">// int next[1000000];</span></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> extend[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> S, T;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">/* 求解 T 中 next[]，注释参考 GetExtend() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; m &amp;&amp; T[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            next[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解 extend[] */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetExtend</span><span class="params">(<span class="built_in">string</span> &amp; S, <span class="keyword">int</span> &amp; n, <span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> extend[], <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    GetNext(T, m, next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p) <span class="comment">// i &gt;= p 的作用：举个典型例子，S 和 T 无一字符相同</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; n &amp;&amp; p - i &lt; m &amp;&amp; S[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            extend[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            extend[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;S;</span><br><span class="line">        n = S.size();</span><br><span class="line">        T = S.substr(<span class="number">1</span>);</span><br><span class="line">        m = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*可能程序以为我用了前面的函数声明中的next[],所以说我模棱两可,加个全局的命名空间就行</span></span><br><span class="line"><span class="comment">        或者换个变量名也行*/</span></span><br><span class="line">        <span class="comment">// GetExtend(T, m, S, n, extend, ::next);</span></span><br><span class="line">        GetExtend(T, m, S, n, extend, nxt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; extend[j] &lt;&lt; " \n"[j==m-1];</span></span><br><span class="line">            ans += extend[j]+j==n<span class="number">-1</span> ? extend[j] : extend[j]+<span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007解法"><a href="#1007解法" class="headerlink" title="1007解法"></a>1007解法</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>a[i] = a[i-1]+a[i-3],就是对于第i项有两种情况，要么是直接往上走要么是闪电<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E6%9D%AD%E7%94%B5/%E7%AC%AC%E4%BA%94%E5%9C%BA/1007_an.png" alt></p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>dls说暴力打表找规律比较不用动脑子，哭了，臭大佬，好过分</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">2</span>] = a[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; maxn; i++) a[i] = (a[i<span class="number">-1</span>]+a[i<span class="number">-3</span>])%mod;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) swap(l, r);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="number">1</span>) l++;</span><br><span class="line">        <span class="keyword">if</span>(r != n) r--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[r-l+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>因为今天一直在听dls的直播，尽管后面的题听不懂，想听听dls一般解题思路是啥(<del>其实后面听不懂就容易发呆了</del>),所以今天还没有补很多题，然后就只写了这么一点点,<del>我好弱啊</del></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人总得有个目标，才能继续勇敢而坚强地活着，大部分成年人，在三十岁左右已经没了活着的目标，为了不让自己死去，他们制造了一个孩子，有了这个小孩，他们终于找到了努力工作和继续活下去的目标。</p><p>不，不是的，那是基因的谎言…让你这个机器人帮忙传递他们的存在</p><p>但如果你知道这是谎言，并决定真的要选择它，那才是真正的选择</p><p>教育本来就是不平等的，有些人很年轻就是OI金牌了，然而有些人还在发愁下次要怎么骗外公外婆我出去玩了，其实是偷偷跑去了网吧，如饥似渴地<strong>享受</strong>那几个小时的奥比岛，赛尔号，功夫派，洛克王国，地下城与勇士，英雄联盟…(从小学到高中渐渐变化的是游戏),然而别人早就享受到了算法的美妙，并将来很大程度能因此受到更好的教育，然后享受社会上最好的资源，过上幸福的生活，虽然我不能这样定义幸福，但是不平等确实存在，想要跨越社会阶层的鸿沟，可能要花上很久很久的努力.不过，我认为，跨越社会阶层的鸿沟，才是这个和平时代个人最英雄的挑战.做你自己的英雄，不断超越自己，并同时珍爱身边的人，过好这一生…</p><p>今天说的好像有点小多，叨叨叨多了，快滚去运动洗澡睡觉，明天继续来补题</p>]]></content>
    
    <summary type="html">
    
      1006 ekmp本来应该10mins写完(发现好多大佬用dc3(一种据说复杂度O(n)的后缀数组算法,发现自己孤陋寡闻))，结果自己太菜写了两个小时，然后1007是真滴有点好玩,只是我太菜,一开始把自己玩死了 -- 以及今天叨叨好像有点多
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="ekmp" scheme="http://www.wolfdan.cn/tags/ekmp/"/>
    
  </entry>
  
  <entry>
    <title>Python写字符串模拟真香_算法日常[3/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/04/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/"/>
    <id>http://www.wolfdan.cn/2019/08/04/算法日常-3-100/</id>
    <published>2019-08-04T06:14:04.000Z</published>
    <updated>2019-08-04T10:00:18.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/B" target="_blank" rel="noopener">2019牛客多校第6场B题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/B_ti.png" alt></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>把8段中每段都处理成为一个整数,然后找出最长的连续0,相同的长度的话就让0放前面的段(因为0的ASCII码是48,比:的58小),然后进行判断性输出(<strong>数字用%x可以实现以16进制输出</strong>)</p><p><strong>详见代码注释</strong></p><h3 id="C-版AC代码"><a href="#C-版AC代码" class="headerlink" title="C++版AC代码"></a>C++版AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*"%x"以16进制的形式输出,是我孤陋寡闻了*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">1</span>;ii&lt;=T;ii++)&#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>,l=<span class="number">0</span>,nl=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*观察下面的代码容易知道,只有最前面为0的时候是f=1,</span></span><br><span class="line"><span class="comment">        其他地方为0,f为i-nl(减掉了0的长度即为0开始的地方)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        综上:</span></span><br><span class="line"><span class="comment">        f是最长连续0开始的位置</span></span><br><span class="line"><span class="comment">        然后l是保存维护最长连续0的长度</span></span><br><span class="line"><span class="comment">        nl是当前的最长连续0的长度*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;t);</span><br><span class="line">                a[i]=a[i]*<span class="number">2</span>+t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a[i]) nl++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*判断现在的连续0的数目是否超过之前的连续0的数目*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl&gt;=l&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                nl=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">8</span>&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nl&gt;l)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*末尾有0，但是末尾的连续0和最前面的连续0相同</span></span><br><span class="line"><span class="comment">                所以考虑字典序最小，由于'0'-48,':'-58</span></span><br><span class="line"><span class="comment">                所以优先让前面输出0,后面就输出':'*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl==l&amp;&amp;f==<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,ii);</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==f)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">                i+=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">8</span>)<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%x%c"</span>,a[i],<span class="string">":\n"</span>[i==<span class="number">8</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>通过枚举每种有0的串，然后统一加到一个列表中，之后通过sort(优先长度然后优先字典序)，最后输出</p><p><strong>详见我的Python注释代码</strong></p><h3 id="Python-AC代码"><a href="#Python-AC代码" class="headerlink" title="Python_AC代码"></a>Python_AC代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">T=int(input())</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(T):</span><br><span class="line">    b=input()</span><br><span class="line">    a=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="comment"># 这个[2:]是去掉'0x'</span></span><br><span class="line">        a.append(hex(int(b[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>],<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    s=[]</span><br><span class="line">    s.append(<span class="string">':'</span>.join(a))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 对每个i中的后缀长a[i:j+1]判断各元素是否都是等于0的</span></span><br><span class="line">            <span class="comment"># 是就直接把字符串丢进去,比C++AC版本中的记录长度简单很多</span></span><br><span class="line">            <span class="keyword">if</span> all(map(<span class="keyword">lambda</span> x:x==<span class="string">'0'</span>,a[i:j+<span class="number">1</span>])):</span><br><span class="line">                <span class="comment"># 用':'分隔的a[i]串</span></span><br><span class="line">                s.append(<span class="string">':'</span>.join(a[:i])+<span class="string">'::'</span>+<span class="string">':'</span>.join(a[j+<span class="number">1</span>:]))</span><br><span class="line">    <span class="comment"># 优先用长度排序,其实是同长度按照字典序排序</span></span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x:(len(x),x))</span><br><span class="line">    print(<span class="string">'Case #%d:'</span>%(t+<span class="number">1</span>),s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p> 岁月还漫长总会有人陪你骑马喝酒走四方</p>]]></content>
    
    <summary type="html">
    
      Python写字符串模拟真香_算法日常[3/100]
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="Python写算法" scheme="http://www.wolfdan.cn/tags/Python%E5%86%99%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第15周[15/521]</title>
    <link href="http://www.wolfdan.cn/2019/08/04/ARST%E6%89%93%E5%8D%A1%E7%AC%AC15%E5%91%A8-15-521/"/>
    <id>http://www.wolfdan.cn/2019/08/04/ARST打卡第15周-15-521/</id>
    <published>2019-08-04T03:49:12.000Z</published>
    <updated>2019-08-04T10:02:37.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/ARST/ARST15/beauty.jpg" alt></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.31" target="_blank" rel="noopener">已经下定决心要努力刷题了，所以每天都有刷</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/mit-technology-review/china-has-started-a-grand-experiment-in-ai-education-it-could-reshape-how-the-world-learns-c771f5980deb" target="_blank" rel="noopener">China Has Started a Grand Experiment in AI Education. It Could Reshape How the World Learns.</a></p><h2 id="语句摘选"><a href="#语句摘选" class="headerlink" title="语句摘选"></a>语句摘选</h2><ul><li>In three hours we understand students more than the three years spent by the best teachers.</li><li>Three things have fueled China’s AI education boom. The first is tax breaks and other incentives for AI ventures that improve anything from student learning to teacher training to school management. For VCs, this means such ventures are good bets. According to one estimate, China led the way in over $1 billion invested globally last year in AI education.</li><li>Second, academic competition in China is fierce. Ten million students a year take the college entrance exam, the gaokao. Your score determines whether and where you can study for a degree, and it’s seen as the biggest determinant of success for the rest of your life. <strong>Parents willingly pay for tutoring or anything else that helps their children get ahead.</strong></li><li>Finally, <strong>Chinese entrepreneurs have masses of data at their disposal to train and refine their algorithms.</strong>The population is vast, people’s views on data privacy are much more lax than in the West (especially if they can get coveted benefits like academic performance in return), and parents are big believers in the potential of technology, having seen how much it has transformed the country in just a few decades.</li><li>Squirrel’s approach may yield great results on traditional education, but it doesn’t prepare students to be flexible in a changing world, the experts I spoke to say. “There’s a difference between adaptive learning and personalized learning,” says Chris Dede, a professor at Harvard University in the Technology, Innovation, and Education Program. Squirrel is doing adaptive learning, which is about “understanding exactly what students know and don’t know.” <strong>But it pays no attention to what they want to know or how they learn best.</strong> Personalized learning takes their interests and needs into account to “<strong>orchestrate the motivation and time for each student so they are able to make progress.</strong>”</li><li>Much of Squirrel’s philosophy stems from Li’s own experiences as a child. When he was young, he didn’t have very good emotional intelligence, he says, and reading books on the subject didn’t help. So he spent half a year dividing the skill into 27 different components and trained himself on each one. He trained himself to be more observant, for example, and to be an interesting conversationalist (“I spent a lot of time finding 100 topics, so I have a lot of material to talk with others,” he says). <strong>He even trained himself to keep smiling when others criticized him. (“After that, in my life, I do not have any enemies.”)</strong> The method gave him the results he wanted — along with the firm belief that anything can be taught this way.</li><li>That’s exactly what China lacks. If you are able to speak multiple languages, you are able to talk to different people; you are able to communicate different ideas<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2></li><li>估计阅读时间是17mins，然而我抠脚的英语水平加上文章的深度和联想性让我看了整整一个小时</li><li>AI教学有很好的数据分析优势，计算机的快速处理数据能力，不分日夜地工作能力，都使得AI教学有很好的前景，只要不断地迭代分析数据的算法，一定可以让计算机拥有快速检测一个学生水平的能力，<strong>传统老师与计算机的差距在于经验的积累速度，不过对于单个知识点来说目前可能一个老师可能能给更好的帮助</strong>，所以我认为当下如果有AI算法辅助分析一个学生的水平，然后给针对的训练，再在个别的知识点上用上老师，那么可以大大降低对老师经验性的要求。因为我认为一个顶级老师和一个初级老师的区别仅在于对知识系统性的掌握以及对学生知识框架的快速认识能力上面(后者为主)，所以有了AI算法的辅助，将能降低家长花重金请名师的成本，而可以请一个初级老师+AI算法辅助的方式</li><li>感叹世界变化之快！</li><li>感觉自己如果要成为认知层的上层人士，必须和世界进行连接，和更多的大师交流，那就必须学好英语，不然看一篇这样简单的文章要花上太久的时间…所以坚持好好学English！</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">推荐一个OIwiki网站,内容很全面,分享给你们</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/30/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/">线段树入门-AcWing-245-你能回答这些问题吗</a></p><p><a href="https://www.wolfdan.cn/2019/07/30/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/">priority-queue和multiset异同以及线段树空树插入维护初见</a></p><p><a href="https://www.wolfdan.cn/2019/07/31/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/">8数码和15数码算法结论和延展</a></p><p><a href="https://www.wolfdan.cn/2019/08/02/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/">拓扑排序以及C++读取空行[算法学习日常1/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/03/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/">反二分题的做法-算法日常[2/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/04/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/">Python写字符串模拟真香_算法日常[3/100]</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第15周 推荐一个OIwiki网站 线段树入门-AcWing-245-你能回答这些问题吗 priority-queue和multiset异同以及线段树空树插入维护初见 8数码和15数码算法结论和延展 拓扑排序以及C++读取空行 反二分题的做法 China Has Started a Grand Experiment in AI Education. It Could Reshape How the World Learns.
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>反二分题的做法-算法日常[2/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/03/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/"/>
    <id>http://www.wolfdan.cn/2019/08/03/算法日常-2-100/</id>
    <published>2019-08-03T14:14:21.000Z</published>
    <updated>2019-08-03T14:59:28.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>今天是个好日子，开局多校D看起来就是个简单的<del>二分模拟</del>,马上动手写起来啊！然后一直写到了比赛结束(当然中途看了一下其他题,并且给队友提供了j题的解题思路)</p><h2 id="反二分的2019牛客多校6D题"><a href="#反二分的2019牛客多校6D题" class="headerlink" title="反二分的2019牛客多校6D题"></a>反二分的2019牛客多校6D题</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/D" target="_blank" rel="noopener">题目链接</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_ti.png" alt></p><h2 id="哒哒马蹄终究是错"><a href="#哒哒马蹄终究是错" class="headerlink" title="哒哒马蹄终究是错"></a>哒哒马蹄终究是错</h2><p>因为这个题目终极不是正规的二分做法！因为答案根本不满足二分算法中的答案单调性，比如如下反例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15 5</span><br><span class="line">39 39 39 39 39 60 60 60 60 60 100 100 100 100 100</span><br></pre></td></tr></table></figure><p>答案是199，而200不能是答案，201也不能是答案</p><p>(二分输出答案是216)(<strong>因为二分总是在较大数值的时候是满足的可能性极大的,所以二分后整体的结果偏大,其实有更小的答案漏掉了</strong>)</p><p>不过这题的美丽错误美就美在了它让人有种是二分的错误–(<strong>哒哒的马蹄，是个美丽的错误</strong>)</p><h2 id="如何AC"><a href="#如何AC" class="headerlink" title="如何AC"></a>如何AC</h2><p>不过因为数据比较弱(其实造一个完美避开二分的数据几乎是不可能在题目数据范围实现的，如果可以，那我把二分后往小的方向开得更远一下枚举，根据上面分析为了避免小概率事件还可以多搞一下向大的方向也枚举)，所以我们现在可以有两种做法</p><ol><li>先二分，然后在这个ans下继续向小的方向枚举20项</li><li>因为答案的下界和上界相差很小，可以直接枚举<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_an.png" alt></li></ol><h3 id="二分再向小方向走"><a href="#二分再向小方向走" class="headerlink" title="二分再向小方向走"></a>二分再向小方向走</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为数据弱，所以不满足单调性的时候这样这样来凑一手</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,K,v[M],sum,vis[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x*K&lt;sum || x&lt;v[n<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=v[n<span class="number">-1</span>] &amp;&amp; K&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>,ts=sum;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ts&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n &amp;&amp; vis[n-i]) i++;</span><br><span class="line">        <span class="keyword">if</span>(n-i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            tps += v[n-i];</span><br><span class="line">                <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[n-i]&lt;&lt;endl;</span></span><br><span class="line">            vis[n-i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(tps&lt;x)&#123;</span><br><span class="line">            <span class="keyword">int</span> tn = upper_bound(v,v+n-i,x-tps)-v;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;=tn &amp;&amp; vis[tn-j]) j++;</span><br><span class="line">            <span class="keyword">if</span>(tn-j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                tps += v[tn-j];</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[tn-j]&lt;&lt;endl;</span></span><br><span class="line">                vis[tn-j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"How much is the tps "&lt;&lt;tps&lt;&lt;endl;</span></span><br><span class="line">        ts -= tps;</span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;K) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;<span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;K;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v[i]; sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v,v+n);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;"l: "&lt;&lt;l&lt;&lt;" r: "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) r=mid;<span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ans;i&gt;=ans<span class="number">-20</span>;i--) <span class="keyword">if</span>(check(i)) ans = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;kase++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正规做法-从下界开始枚举"><a href="#正规做法-从下界开始枚举" class="headerlink" title="正规做法-从下界开始枚举"></a>正规做法-从下界开始枚举</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来源--杭电的一个二人小分队 jesus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1086</span>;</span><br><span class="line"><span class="keyword">int</span> v[N],vis[N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> vv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left=n;</span><br><span class="line">    <span class="keyword">int</span> maxx=n,no=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        <span class="keyword">int</span> sp=vv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=maxx;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="comment">//如果当前剩余容量比最小的更小，不能继续装，退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(sp&lt;v[no])<span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果当前剩余容量足够，并且物品i还没有装过，则装入</span></span><br><span class="line">            <span class="keyword">if</span>(sp&gt;=v[i]&amp;&amp;!vis[i])&#123;</span><br><span class="line">                sp=sp-v[i];vis[i]=<span class="number">1</span>;left--;</span><br><span class="line">                <span class="comment">//如果无剩余，直接退出循环</span></span><br><span class="line">                <span class="keyword">if</span>(!sp)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//压缩下次寻找的范围</span></span><br><span class="line">        <span class="keyword">while</span>(vis[maxx])maxx--;</span><br><span class="line">        <span class="keyword">while</span>(vis[no])no++;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果无剩余，则正好输出</span></span><br><span class="line">    <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cases;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ti=<span class="number">1</span>;ti&lt;=cases;ti++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i]);</span><br><span class="line">            sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> b=sum/k;</span><br><span class="line">        <span class="keyword">if</span>(sum%k)b++;</span><br><span class="line">        <span class="keyword">int</span> maxx=max(v[n],b);</span><br><span class="line">        <span class="keyword">int</span> ans=maxx;</span><br><span class="line">        <span class="keyword">int</span> i=maxx;</span><br><span class="line">        <span class="keyword">while</span>(i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check(i))&#123;</span><br><span class="line">                ans=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,ti,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>人生本来就是一场修行，人的基因把我们当做机器人，然后让我们为他们传递生命</strong>，所以给我们制造了很多激素，其中一些情绪激素让我们时而快乐时而悲伤，时而兴奋时而自闭，我们可能无法改变太多，唯有做的就是享受这个当机器人还能发发牢骚的快乐，并享受这一次人生的偶然，尽自己的快乐，去奋斗，去创造，因为平庸更使自己感到乏味…<strong>那就成为一个，不断进化，并快乐地享受其中的机器人吧</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校6D题  算法学习日常 我的头铁(~~二分~~)写法,然后check还没写好,因为想骚操作但内力不足便走火入魔了..先二分，然后在这个ans下继续向小的方向枚举20项....人的基因把我们当做机器人..那就成为一个，不断进化，并快乐地享受其中的机器人吧
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="反二分" scheme="http://www.wolfdan.cn/tags/%E5%8F%8D%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序以及C++读取空行[算法学习日常1/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/02/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/"/>
    <id>http://www.wolfdan.cn/2019/08/02/写封情书给算法1/</id>
    <published>2019-08-02T14:22:13.000Z</published>
    <updated>2019-08-02T14:22:13.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法学习日常第一天"><a href="#算法学习日常第一天" class="headerlink" title="算法学习日常第一天"></a>算法学习日常第一天</h1><p>2019年8月2日</p><ul><li><p>今天上午，<a href="https://oi-wiki.org/intro/resources/" target="_blank" rel="noopener">重新认识算法的全貌<del>各种资源及知识点总结</del></a></p></li><li><p>并且还了解到了<a href="https://oi-wiki.org/intro/common-mistakes/" target="_blank" rel="noopener"><del>常见错误写法</del></a>，当然自己当年也写过很多错误</p></li><li><p>下午先是补牛客5的多校G题的dp–接着昨天的补都补了90mins(含对着手写第一遍)，还是太菜了</p></li><li><p>然后补H题，发现自己昨天写了3个小时的这个题目不是<del>字符串插入题</del>…而是一个<strong>拓扑排序</strong>题..真的自己菜得可怕..写错分类怎么可能做对，然后自己又焦虑了很久，知道2019年8月2日15:48:15才静下来认真地学习拓扑排序</p><ul><li>拓扑排序在紫书上学了下，就是把点对关系看成一个图里面的指向关系，即把每一个点对看做小数指向大数的有向边，如果图没有有向环的话，说明是可以的，否则是不行的</li><li>记自己头铁处理空行读入，搞了整整一个小时读取空行</li></ul></li></ul><h2 id="拓扑排序以及空行头铁见代码"><a href="#拓扑排序以及空行头铁见代码" class="headerlink" title="拓扑排序以及空行头铁见代码"></a>拓扑排序以及空行头铁见代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2019年8月2日19:25:05</span></span><br><span class="line"><span class="comment">拓扑排序bfs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拓扑排序算法思想</span></span><br><span class="line"><span class="comment">1、在AOV网络中选一个没有直接前驱的顶点, 并输出之;</span></span><br><span class="line"><span class="comment">2、从图中删去该顶点, 同时删去所有它发出的有向边;---&gt;(我下面的题目使用stop实现删除)</span></span><br><span class="line"><span class="comment">3、重复以上步骤, 直到</span></span><br><span class="line"><span class="comment">◆ 全部顶点均已输出，拓扑有序序列形成，拓扑排序完成；</span></span><br><span class="line"><span class="comment">◆ 或者图中还有未输出的顶点，但已跳出处理循环。这说明图中还剩下一些顶点，</span></span><br><span class="line"><span class="comment">它们都有直接前驱，再也找不到没有前驱的顶点了。这时AOV网络中必定存在有向环。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,lentmp;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*用string本来可以不用下面的len*/</span></span><br><span class="line"><span class="keyword">int</span> len[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> it[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> ans,t;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m*(m<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;lentmp;</span><br><span class="line">        <span class="keyword">int</span> x=t[<span class="number">0</span>]-<span class="string">'a'</span>,y=t[<span class="number">1</span>]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">        len[x][y] = lentmp;</span><br><span class="line">        <span class="comment">// if(lentmp) cin&gt;&gt;s[x][y];</span></span><br><span class="line">        <span class="comment">/*我的头铁(~~比赛因此卡1小时去谷歌~~)写法</span></span><br><span class="line"><span class="comment">        先直接用cin.get()吃掉t和lentmp后面的回车</span></span><br><span class="line"><span class="comment">        再getline(),</span></span><br><span class="line"><span class="comment">        否则getline会吃那个回车而导致少读数据*/</span></span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        getline(<span class="built_in">cin</span>,s[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!solve()) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*暴力检测每队关系是否和整个串中的样子是一样的</span></span><br><span class="line"><span class="comment">法二: 也可以每一对关系得到一个ans的tmp串,然后再去==判断</span></span><br><span class="line"><span class="comment">      但是效率低</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k]==<span class="string">'a'</span>+i||ans[k]==<span class="string">'a'</span>+j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ans[k]!=s[i][j][now]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    now++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(now!=len[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">/* 这里是每个大串的排序关系-通过m次的关系问询确定的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意前面巧妙地处理出了j小于k---&gt;这就是拓扑排序的思路</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.对没有出现过的关系(即s[j][k]的那一维全为空)stop[j]和stop[k]全都赋值为1</span></span><br><span class="line"><span class="comment">        2.对于到最后了的关系(即s[j][k][]='\0')全赋空</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        因为有m*(m-1)/2 对 关系，也就是每两个都有比较，所以一定能够得出最前面的一个字符..所以就完美了！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        这里每次stop都会清零！*/</span></span><br><span class="line">        <span class="keyword">bool</span> stop[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[j][k][it[j][k]]) stop[j]=stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[j][k][it[j][k]]==<span class="string">'a'</span>+j) stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> stop[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!stop[j])&#123;</span><br><span class="line">                ans+=<span class="string">'a'</span>+j;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k&lt;j) it[k][j]++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;j) it[j][k]++;</span><br><span class="line">                &#125;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!done) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!check()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>晚上成功补完H题和I题，发现好像没有时间补B题了，明天上午来补一下B题</li></ul><h1 id="每日一句叨叨"><a href="#每日一句叨叨" class="headerlink" title="每日一句叨叨"></a>每日一句叨叨</h1><p><strong>杜月笙知道成功需要代价</strong>，他想为自己洗白(小时候家里穷只能混黑帮)，为整个帮派洗白，但穿了大半辈子长褂(为了不露出纹身)，让自己的说书先生给自己讲了大半辈子学，也为上海的繁荣安定做了大半辈子贡献，但却最终未被认可(通过人脉被选之为一个参议长，但蒋介石让他自己退位)，<strong>但杜月笙却永远被后人被历史铭记</strong></p><p><strong>若命运不公，那就和它斗到底！</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校5H题 拓扑排序BFS 算法学习日常 我的头铁(~~比赛因此卡1小时去谷歌~~)写法,先直接用cin.get()吃掉t和lentmp后面的回车,再getline(),否则getline会吃那个回车而导致少读数据
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="拓扑排序" scheme="http://www.wolfdan.cn/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="BFS" scheme="http://www.wolfdan.cn/tags/BFS/"/>
    
      <category term="读取空行" scheme="http://www.wolfdan.cn/tags/%E8%AF%BB%E5%8F%96%E7%A9%BA%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>8数码和15数码算法结论和延展</title>
    <link href="http://www.wolfdan.cn/2019/07/31/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/"/>
    <id>http://www.wolfdan.cn/2019/07/31/8数码和15数码算法结论和延展/</id>
    <published>2019-07-31T15:21:49.000Z</published>
    <updated>2019-07-31T15:52:31.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此类问题是否有解"><a href="#此类问题是否有解" class="headerlink" title="此类问题是否有解"></a>此类问题是否有解</h1><h2 id="定义一个东西"><a href="#定义一个东西" class="headerlink" title="定义一个东西"></a>定义一个东西</h2><p>先定义此类问题矩阵的逆序数的和值为除去0以外其他数的排列(把二维一行行地读取的循序的排列)的逆序数和</p><h2 id="发现一"><a href="#发现一" class="headerlink" title="发现一"></a>发现一</h2><p>我们可以发现排列中相邻的两个数交换位置会它们两相互之间的逆序数值,<strong>而其他部分以及他们各自和其他部分的逆序数值都不变</strong>,所以矩阵的逆序数+1或-1,也就是矩阵的逆序数的奇偶性发生了改变</p><h2 id="发现二"><a href="#发现二" class="headerlink" title="发现二"></a>发现二</h2><p>我们还可以发现0左右移动不影响矩阵的逆序数的奇偶性，然而如果是上(下)移动的话，就想到于一个数连续和左(右)边3个数进行了交换位置，所以矩阵的逆序数的奇偶性会变</p><h2 id="发现三"><a href="#发现三" class="headerlink" title="发现三"></a>发现三</h2><p>矩阵的改变只能通过与0变换位置，所以只有在与0上下交换的时候才会产生矩阵的逆序数的奇偶性的变化</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以我们知道最终状态逆序数为0,且最后0在最后一行(<code>高中学化学经常讲终态法</code>)，也就是矩阵要有解，最终逆序数的奇偶性为偶，<strong>那么就要在初始状态的逆序数上面 加上 0值在初始状态移动到最后一行产生的逆序数奇偶性的变化值</strong>仍为偶数则有解</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="有解性"><a href="#有解性" class="headerlink" title="有解性"></a>有解性</h2><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6620" target="_blank" rel="noopener">HDU-6620 2019杭电多校4</a></p><h3 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,a[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i])&#123;</span><br><span class="line">                cnt+=<span class="number">3</span>-i/<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[j] &amp;&amp; a[j]&gt;a[i])</span><br><span class="line">                        cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求最少步数"><a href="#求最少步数" class="headerlink" title="求最少步数"></a>求最少步数</h2><p><strong>如果我们要求解步数的话,我们首先是用逆序数进行判定是否有解，有解才进行搜索</strong></p><p>使用曼哈顿距离递减 和 IDA*(迭代层数达到120层就放弃) 的方式<br>曼哈顿是初始排列到目标排列每个数字abs(x1-x2)+abs(y1+y2)的和值</p><h3 id="给个板子"><a href="#给个板子" class="headerlink" title="给个板子"></a>给个板子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先用结论判断是否有解呀！不然没解跑这个会死循环，燃烧你的CPU的话我不背锅哦</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//limit全部的曼哈顿距离之和</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">4</span>][<span class="number">4</span>], map2[<span class="number">16</span>], limit;</span><br><span class="line"><span class="keyword">int</span> flag, length;</span><br><span class="line"><span class="comment">//各个数字应在位置(i,j)对照表,比如0在位置(3,3)</span></span><br><span class="line"><span class="keyword">int</span> goal[<span class="number">16</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">0</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nx[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//估价函数,曼哈顿距离,小于等于实际总步数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hv</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 不算0</span></span><br><span class="line">            <span class="keyword">if</span> (w != <span class="number">0</span>)</span><br><span class="line">                cost += <span class="built_in">abs</span>(i - goal[w][<span class="number">0</span>]) + <span class="built_in">abs</span>(j - goal[w][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* x,y起始坐标，len是已经走过的长度,pre_move是上次走的方向 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len, <span class="keyword">int</span> pre_move)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> dv = hv(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">if</span> (len == limit) &#123;</span><br><span class="line">        <span class="comment">//成功 退出</span></span><br><span class="line">        <span class="keyword">if</span> (dv == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            length = len;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//超过预设长度 回退</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//不和上一次移动方向相反,对第二步以后而言</span></span><br><span class="line">        <span class="keyword">if</span> (i + pre_move == <span class="number">3</span> &amp;&amp; len &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tx = x + nx[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ty = y + nx[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; <span class="number">4</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">            <span class="keyword">int</span> p = hv(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">if</span> (p + len &lt;= limit &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(tx, ty, len + <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 递归回来后恢复现场 */</span></span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1, y1;</span><br><span class="line">        <span class="comment">//map2一维 map二维</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;map2[i]);</span><br><span class="line">            <span class="keyword">if</span> (map2[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                x1 = i/<span class="number">4</span>; y1 = i%<span class="number">4</span>;</span><br><span class="line">                <span class="built_in">map</span>[x1][y1] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">map</span>[i/<span class="number">4</span>][i%<span class="number">4</span>] = map2[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 曼哈顿长度要递减的 */</span></span><br><span class="line">        limit = hv(<span class="built_in">map</span>);</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求120步之内到达,其实如果可以的话最多80多步就可以走完</span></span><br><span class="line">        <span class="keyword">while</span> (flag == <span class="number">0</span> &amp;&amp; length &lt;= <span class="number">90</span>)&#123;</span><br><span class="line">            <span class="comment">//得到的是最小步数</span></span><br><span class="line">            dfs(x1, y1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/* 加大初始额曼哈顿距离的限制，让递归的行走能不曼哈顿距离递减得多试探几步 */</span></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) limit++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if (flag)</span></span><br><span class="line">        <span class="comment">//     printf("%d\n", length);</span></span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yse"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>不好意思，写完后才发现重复造轮子了，不过应该我写得应该算比较简单，可以立马用上吧</p>]]></content>
    
    <summary type="html">
    
      8数码和15数码算法结论和延展 **那么就要在初始状态的逆序数上面 加上 0值在初始状态移动到最后一行产生的逆序数奇偶性的变化值**仍为偶数则有解
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="逆序数" scheme="http://www.wolfdan.cn/tags/%E9%80%86%E5%BA%8F%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>priority_queue和multiset异同以及线段树空树插入维护初见</title>
    <link href="http://www.wolfdan.cn/2019/07/30/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/"/>
    <id>http://www.wolfdan.cn/2019/07/30/priority-queue和multiset异同以及线段树空树插入维护初见/</id>
    <published>2019-07-30T12:58:31.000Z</published>
    <updated>2019-07-30T13:30:19.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="priority-queue和multiset异同"><a href="#priority-queue和multiset异同" class="headerlink" title="priority_queue和multiset异同"></a>priority_queue和multiset异同</h1><p>优先级队列只能按照排序顺序访问一个元素 - 即，可以获得最高优先级的项目，想要访问其他的元素，就必须删除顶端元素。 优先级队列还允许重复元素，因此它很像是一个multiset。</p><p>但是multiset比priority_queue的好处就在于multiset不用删除掉优先级最高的元素就可以访问其他优先级的元素，就相当于一个动态的有序数组</p><p>同为log(n)插入，但是multiset却能访问更多，真香</p><p>虽然priority_queue可以通过删除再恢复的方式达到访问其他优先级的元素，但是实现很不优雅，而且让一个log(n)的操作蹩脚地魔改成了接近O(n^2)的操作，并且容易卡时间</p><h2 id="比如HDU-6609这一题"><a href="#比如HDU-6609这一题" class="headerlink" title="比如HDU-6609这一题"></a>比如<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6609" target="_blank" rel="noopener">HDU-6609</a>这一题</h2><h3 id="暴力priority-queue"><a href="#暴力priority-queue" class="headerlink" title="暴力priority_queue"></a>暴力priority_queue</h3><p><strong>虽然我很不愿意把我很喜欢的一种STL加上暴力的前缀，但是确实是很朴素自然，大道至简但是这里有点过分使用了…所以下面是TLE的代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">7</span> ;</span><br><span class="line"><span class="keyword">int</span> Q, n, m, w[M];</span><br><span class="line">ll sum;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pre;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;Q;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="comment">/* init */</span></span><br><span class="line">        sum = <span class="number">0</span>;k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="keyword">while</span>(!pre.empty()) pre.pop();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/* 根据题意不能弹出本次加入的 */</span></span><br><span class="line">            <span class="comment">/* 根据题意应该不会在空的时候满足条件 */</span></span><br><span class="line">            <span class="comment">// int pre=inf;</span></span><br><span class="line">            <span class="comment">/*每弹出一个k++,所以每回收pre一个k--*/</span></span><br><span class="line">            <span class="comment">// while(!pre.empty()) pre.pop();</span></span><br><span class="line">            <span class="keyword">while</span>(!q.empty()&amp;&amp;sum+w[i]&gt;m)&#123;</span><br><span class="line">                k++;</span><br><span class="line">                pre.push(q.top());</span><br><span class="line">                sum-=q.top();</span><br><span class="line">                q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*输出*/</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==n)&#123; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            <span class="comment">/*回溯*/</span></span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* = 再想想*/</span></span><br><span class="line">            <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!pre.empty()&amp;&amp;tmp+pre.top()&lt;=w[i])&#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                tmp += pre.top();</span><br><span class="line">                q.push(pre.top());</span><br><span class="line">                k--;</span><br><span class="line">                pre.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*能加入一个就无需加本身了,要加回之前的sum值</span></span><br><span class="line"><span class="comment">            本身未加入的话就相当于弹出了一个k++*/</span></span><br><span class="line">            <span class="comment">/*不对,加回本身,让其在后面的循环中进入pre*/</span></span><br><span class="line">            <span class="comment">// if(f) sum += tmp,k++;</span></span><br><span class="line">            <span class="keyword">if</span>(f) sum += tmp;</span><br><span class="line">            q.push(w[i]);</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ss.clear();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tem = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> suma = sum;</span><br><span class="line">            <span class="keyword">int</span> jishu = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">                <span class="comment">/* 这里用计数jishu记下软删除的数量，由于priority_queue</span></span><br><span class="line"><span class="comment">                只能访问第一个值，所以不支持软硬删除操作...所以会用真实删除再</span></span><br><span class="line"><span class="comment">                恢复的操作会TLE...因为这样会从O(nlog(n))魔化到O(n^2) */</span></span><br><span class="line">                <span class="comment">/* 由题意a[i]&lt;=m，满足下面条件时一定不会出现ss为空 */</span></span><br><span class="line">                <span class="keyword">while</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                    suma -= *j;</span><br><span class="line">                    jishu++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 第一个铁定是0的 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, jishu + tem);</span><br><span class="line">            ss.insert(a[i]);</span><br><span class="line">            <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">            sum += a[i];</span><br><span class="line">            <span class="comment">/* 用tem记录下硬删除的数量 */</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt; m) &#123;</span><br><span class="line">                j--;</span><br><span class="line">                sum -= *j;</span><br><span class="line">                <span class="comment">/* 这里由于find返回的是指针，所以就会只删除一个值</span></span><br><span class="line"><span class="comment">                而不是删除数值那样把所有数值都删除掉 */</span></span><br><span class="line">                ss.erase(ss.find(*j));</span><br><span class="line">                tem++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树树空树插入维护初见"><a href="#线段树树空树插入维护初见" class="headerlink" title="线段树树空树插入维护初见"></a>线段树树空树插入维护初见</h1><p><strong>这个线段树标程真是魔鬼一般地折磨了我整整7个小时…菜鸡刚学线段树，还没有过插入空树的经历，然后这个std是插入空树…我好菜啊</strong></p><p><strong>所以放一发带思考注释的手抄代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line">ll <span class="keyword">int</span> a[M],number[M&lt;&lt;<span class="number">2</span>],bz[M&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> number2[M&lt;&lt;<span class="number">2</span>],bz2[M&lt;&lt;<span class="number">2</span>],to[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    ll b;</span><br><span class="line">&#125; no[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b==b.b ? a.id&lt;b.id : a.b&lt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自己重写std感觉上推数值好像还是不对，如果不理解的话，下次就算有板子也不能秒掉！</span></span><br><span class="line"><span class="comment">所以还是要先理解一下 ，多多重现算法*/</span></span><br><span class="line"><span class="comment">/* 先写着，等下写完全部看看有没有新的认识 */</span></span><br><span class="line"><span class="comment">/* 2019年7月30日16:59:35 还是不懂，维护区间之和难道不是要左右相加吗？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2019年7月30日20:34:57 突然灵光一闪！</span></span><br><span class="line"><span class="comment">因为你一开始是一棵空树，然后你一个个插入，如果使用的是max，就相当于(to[i],n+1)这个区间以及每个子区间</span></span><br><span class="line"><span class="comment">都是你的插入值的和.         因为都是直接到了叶子节点去加和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果使用加法，那么就出错了，就有很多重复计算，所以说[1-&gt;n]区间就是最大的前缀和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">所以询问的时候就可以直接加和*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    number[rt] = max(number[rt&lt;&lt;<span class="number">1</span>],number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其实这里是多组测试的初始化0值 */</span></span><br><span class="line"><span class="comment">/* 但是number2不PushUp清零吗？这里好像有问题，但为什么std能AC</span></span><br><span class="line"><span class="comment">惊呆的发现竟然放在了pushdown下推标记的时候清零了...感觉线段树的写法真多*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    bz[rt]=bz2[rt]=number[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;number2[rt]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bz[rt])&#123;</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bz2[rt])&#123;</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ll o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        <span class="comment">/* 之前初始化成了0，所以这里可以这样...这个标程写得真随意... */</span></span><br><span class="line">        number2[rt]+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 此节点(区段l,r)全被包含在内 */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">        <span class="comment">/* 先自己赋值，下推标记就直接给儿子赋值 */</span></span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        bz[rt]+=o;</span><br><span class="line">        bz2[rt] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* pushdown和PushUp都只管修改相邻层 */</span></span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="comment">/* 区段l,r包含L,R,或者有交叠,则访问子节点(子区段) */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) change(o,L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) change(o,L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> number2[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; number[rt&lt;&lt;<span class="number">1</span>]) ans = query(k,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans = query(k,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        build(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            no[i].b = a[i];</span><br><span class="line">            no[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="comment">/* 把与n+1有关的节点都打上number=1e9,number2=1的标记...</span></span><br><span class="line"><span class="comment">        只给n+1对应的叶子节点处打上了标记！其他地方没有进去过！</span></span><br><span class="line"><span class="comment">        就相当于在那里插入了一点*/</span></span><br><span class="line">        change(<span class="number">1e9</span>,n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) to[no[i].id] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/*一个个插入,第一个时还没插入，是空树，所以肯定返回0*/</span></span><br><span class="line">            ll k = query(m-a[i],<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>,i-k);</span><br><span class="line">            <span class="comment">/*按照队友的说法,那这里就是插入第一个*/</span></span><br><span class="line">            <span class="comment">/* 给排名在to[i]到n+1的地方都所有区段打上区间数值和number</span></span><br><span class="line"><span class="comment">            和此区间个数和number2 */</span></span><br><span class="line">            change(a[i],to[i],n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借鉴:</p><p><a href="https://www.icode9.com/content-1-370218.html" target="_blank" rel="noopener">C++&amp;STL&amp;multiset&amp;杭电多校第三场 1007 find the answer</a></p>]]></content>
    
    <summary type="html">
    
      priority_queue和multiset异同以及线段树树空树插入维护初见 [HDU-6609] 2019航电多校3-1007
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://www.wolfdan.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="STL" scheme="http://www.wolfdan.cn/tags/STL/"/>
    
      <category term="优先队列" scheme="http://www.wolfdan.cn/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="multiset" scheme="http://www.wolfdan.cn/tags/multiset/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-245.你能回答这些问题吗</title>
    <link href="http://www.wolfdan.cn/2019/07/30/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/"/>
    <id>http://www.wolfdan.cn/2019/07/30/AcWing-245-你能回答这些问题吗/</id>
    <published>2019-07-30T05:34:08.000Z</published>
    <updated>2019-08-16T09:58:52.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2019牛客杭电多校都把线段树当做最最最基础的知识点，杭电3甚至把线段树当做签到，所以线段树要多练啊</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.acwing.com/problem/content/description/246/" target="_blank" rel="noopener">你能回答这些问题吗</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="线段树入门题-O-Mlog-N"><a href="#线段树入门题-O-Mlog-N" class="headerlink" title="线段树入门题 O(Mlog(N))"></a>线段树入门题 O(Mlog(N))</h2><h2 id="一步步思考线段树过程"><a href="#一步步思考线段树过程" class="headerlink" title="一步步思考线段树过程"></a>一步步思考线段树过程</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>不能简单的对比对比左右子区间的dat和值(区间最大和值)来更新本节点的区间最大和值，还要对比右子树的rmax+左子树的lmax的和值</p><p><code>c.dat=max(max(a.dat,b.dat),a.rmax+b.lmax);</code></p><h3 id="附图可以参考，关键看代码注释"><a href="#附图可以参考，关键看代码注释" class="headerlink" title="附图可以参考，关键看代码注释"></a>附图可以参考，关键看代码注释</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98/%E7%BA%BF%E6%AE%B5%E6%A0%91/Acwing245/%E6%89%8B%E5%86%99.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lmax,rmax,sum;</span><br><span class="line">    <span class="keyword">int</span> dat;</span><br><span class="line">&#125; t[SIZE&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[SIZE],N,M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p].sum = t[p*<span class="number">2</span>].sum + t[p*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    t[p].lmax = max(t[p*<span class="number">2</span>].lmax,t[p*<span class="number">2</span>].sum+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax);</span><br><span class="line">    t[p].rmax = max(t[p*<span class="number">2</span>+<span class="number">1</span>].rmax,t[p*<span class="number">2</span>+<span class="number">1</span>].sum+t[p*<span class="number">2</span>].rmax);</span><br><span class="line">    t[p].dat = max(t[p*<span class="number">2</span>].dat,max(t[p*<span class="number">2</span>+<span class="number">1</span>].dat,t[p*<span class="number">2</span>].rmax+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; t[p].sum=t[p].lmax=t[p].rmax=t[p].dat=a[l]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p].l==t[p].r)&#123;t[p].dat=t[p].sum=t[p].lmax=t[p].rmax=v;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[p].l+t[p].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) change(p&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">    <span class="keyword">else</span> change(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int ask(int p,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">//     if(l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) return t[p].dat;</span></span><br><span class="line"><span class="comment">//     int mid = (t[p].l + t[p].r)/2;</span></span><br><span class="line"><span class="comment">//     int val = -(1&lt;&lt;30);</span></span><br><span class="line"><span class="comment">//     if(l&lt;=mid) val = max(val,ask(p&lt;&lt;1,l,r));</span></span><br><span class="line"><span class="comment">//     if(r&gt;mid) val = max(val,ask(p&lt;&lt;1|1,l,r));</span></span><br><span class="line"><span class="comment">//     return val;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此处感谢队友帮忙debug */</span></span><br><span class="line"><span class="function">SegmentTree <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=t[p].l &amp;&amp; r&gt;=t[p].r) <span class="keyword">return</span> t[p];</span><br><span class="line">    <span class="keyword">int</span> mid=(t[p].l+t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> val=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    SegmentTree a,b,c;</span><br><span class="line">    a.dat=a.sum=a.lmax=a.rmax=val;</span><br><span class="line">    b.dat=b.sum=b.lmax=b.rmax=val;</span><br><span class="line">    c.dat=c.lmax=c.rmax=val;</span><br><span class="line">    c.sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要么都在最左边，要么都在最右边，要么跨越了左右，跨越了左右就要判断</span></span><br><span class="line"><span class="comment">    c.dat=max(max(a.dat,b.dat),a.rmax+b.lmax);</span></span><br><span class="line"><span class="comment">    这个点没想到会卡住 --&gt; 我就是从前面的注释的ask函数出错来的*/</span></span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid&amp;&amp;r&lt;=mid)&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 还要注意左区间r&lt;=mid,右区间l&gt;mid */</span></span><br><span class="line">    <span class="comment">// else if (l&gt;=mid&amp;&amp;r&gt;=mid)&#123;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l&gt;mid&amp;&amp;r&gt;mid)&#123;</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum+b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    c.dat=max(c.dat,max(max(a.dat,b.dat),a.rmax+b.lmax));</span><br><span class="line">    c.lmax=max(c.lmax,max(a.lmax,a.sum+b.lmax));</span><br><span class="line">    c.rmax=max(c.rmax,max(b.rmax,b.sum+a.rmax));</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">int</span> i,x,y;</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ask(<span class="number">1</span>, x, y).dat &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> change(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=9;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;"dat: "&lt;&lt;t[i].dat&lt;&lt;" sum: "&lt;&lt;t[i].sum&lt;&lt;" lmax: "&lt;&lt;t[i].lmax&lt;&lt;" rmax: "&lt;&lt;t[i].rmax&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      线段树入门题 第一次手写线段树的各种踩坑
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://www.wolfdan.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>银联挑战赛初赛第二场B题</title>
    <link href="http://www.wolfdan.cn/2019/07/28/%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAB%E9%A2%98/"/>
    <id>http://www.wolfdan.cn/2019/07/28/银联挑战赛初赛第二场B题/</id>
    <published>2019-07-28T13:26:59.000Z</published>
    <updated>2019-07-28T13:38:37.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://nanti.jisuanke.com/t/40207" target="_blank" rel="noopener">码队弟弟的求和问题</a></p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/B.png" alt></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/Bans.png" alt></p><h2 id="数论分块知识点"><a href="#数论分块知识点" class="headerlink" title="数论分块知识点"></a>数论分块知识点</h2><p><a href="https://taodaling.github.io/blog/2019/03/27/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/" target="_blank" rel="noopener">图片截取了大佬的blog</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll inv6;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*a%mod;</span><br><span class="line">        a = (a*a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span></span>&#123; <span class="keyword">return</span> n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line">    <span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*i=j+1,以及n/i要加括号*/</span></span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        <span class="comment">/*其实j不会大于n*/</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;n) j=n;</span><br><span class="line">        ans = (ans - (f(j)-f(i<span class="number">-1</span>))*(n/i)%mod + mod)%mod;</span><br><span class="line">        <span class="comment">/*只要保证每次相减时两个都是正数</span></span><br><span class="line"><span class="comment">        然后结果再来一次保证正数操作就不会出错*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    inv6 = qpow(<span class="number">6</span>,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    ll ans = solve(n)*solve(m)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜鸡我踩坑"><a href="#菜鸡我踩坑" class="headerlink" title="菜鸡我踩坑"></a>菜鸡我踩坑</h2><p>坑我35mins</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bug是因为除号必须在mod前！</span></span><br><span class="line">ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line"><span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      银联挑战赛初赛第二场B题 数论分块 取模和除法在一起时候的坑点
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第14周-14-521</title>
    <link href="http://www.wolfdan.cn/2019/07/27/ARST%E6%89%93%E5%8D%A1%E7%AC%AC14%E5%91%A8-14-521/"/>
    <id>http://www.wolfdan.cn/2019/07/27/ARST打卡第14周-14-521/</id>
    <published>2019-07-27T10:33:33.000Z</published>
    <updated>2019-07-27T10:34:06.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.26" target="_blank" rel="noopener">gogogo</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/do-you-really-need-another-computer-monitor-a0534d37ba4a" target="_blank" rel="noopener">Do You Really Need Another Computer Monitor?</a></p><p>是啊，对于单一的工作，没有很多要素的工作一个屏幕就够了</p><p>但是对于需要很多要素的工作，比如一边看编程视频教学，一边跟着写这种要素很多的工作，有两个屏幕真的能提高自己的效率</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/zearot/article/details/52280189" target="_blank" rel="noopener">线段树从零开始</a></p><p><a href="https://blog.csdn.net/zearot/article/details/48299459" target="_blank" rel="noopener">线段树详解</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/26/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/">2019牛客多校3 I</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第14周 线段树
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校3 I</title>
    <link href="http://www.wolfdan.cn/2019/07/26/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/"/>
    <id>http://www.wolfdan.cn/2019/07/26/2019牛客多校3-I/</id>
    <published>2019-07-26T05:50:20.000Z</published>
    <updated>2019-07-26T09:14:36.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/883/I" target="_blank" rel="noopener">Median</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>3个数产生一个中位数，现在给你一串中位数，请还原出一个合理的原串</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>T组,每组给n表示原串的长度,然后是给你中位数串<code>b[1]-&gt;b[n-1]</code></p><p>范围: n的和不超过10^6,每个b不超过10^9</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>有合理的串则输出原串,否则输出-1</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>若存在合理的解,那么解的每个位置的最终值一定是它能影响到的3个中位数之一</strong></p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_1.png" alt></p><h2 id="Dp解法"><a href="#Dp解法" class="headerlink" title="Dp解法"></a>Dp解法</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_2.png" alt></p><h2 id="自己动手写AC代码"><a href="#自己动手写AC代码" class="headerlink" title="自己动手写AC代码"></a>自己动手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> pre[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> v[M][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b[M],a[M];</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tmp[<span class="number">3</span>];</span><br><span class="line">    tmp[<span class="number">0</span>]=x,tmp[<span class="number">1</span>]=y,tmp[<span class="number">2</span>]=z;</span><br><span class="line">    sort(tmp,tmp+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*回溯构造*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        a[i] = v[i][j];</span><br><span class="line">        <span class="keyword">int</span> pr = pre[i][j][k];</span><br><span class="line">        j = k;</span><br><span class="line">        k = pr;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        b[<span class="number">0</span>]=b[<span class="number">1</span>]=b[<span class="number">2</span>]; b[n+<span class="number">1</span>]=b[n]=b[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">                    f[i][j][k]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*注意:我给的手写题解中a[3]对应b[1],b[2],b[3]</span></span><br><span class="line"><span class="comment">         我这里为了实现方便是用的对应b[2],b[3],b[4]*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                v[i][j]=b[i<span class="number">-1</span>+j];</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v[i],v[i]+<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*边界条件: 前i-2个中位数(此时i=2为0个中位数)是满足条件的</span></span><br><span class="line"><span class="comment">          最终f[N][i][j]的时候的是N-2个中位数是否满足条件*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                f[<span class="number">2</span>][i][j]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="keyword">bool</span> findans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!f[i<span class="number">-1</span>][k][l]) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">/*判断前面的位置和本位置使用与他们位置相关的</span></span><br><span class="line"><span class="comment">                        3个中位数的排列中哪些排列能够满足要求</span></span><br><span class="line"><span class="comment">                        v[i][j]对应的是b[i-1],b[i],b[i+1]中的一个*/</span></span><br><span class="line">                        <span class="keyword">if</span>(mid(v[i<span class="number">-2</span>][l],v[i<span class="number">-1</span>][k],v[i][j])!=b[i<span class="number">-1</span>])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        f[i][j][k]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">/*记录下前面使用的是l大的*/</span></span><br><span class="line">                        pre[i][j][k]=l;</span><br><span class="line">                        <span class="comment">/*break写完再探索-std中用了break</span></span><br><span class="line"><span class="comment">                        我认为应该遍历全部情况,所以去掉了break</span></span><br><span class="line"><span class="comment">                        然后两份代码都AC了,所以可能解唯一或者是按照std</span></span><br><span class="line"><span class="comment">                        生成的数据吧*/</span></span><br><span class="line">                        <span class="comment">// break;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==n &amp;&amp; f[i][j][k])&#123;</span><br><span class="line">                        findans = <span class="literal">true</span>;</span><br><span class="line">                        back(i,j,k);</span><br><span class="line">                        <span class="keyword">goto</span> END;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        END:</span><br><span class="line">        <span class="keyword">if</span>(!findans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">                assert(mid(a[i<span class="number">-1</span>],a[i],a[i+<span class="number">1</span>]) == b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i],<span class="string">" \n"</span>[i==n]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校3 I
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="多校" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="牛客" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
