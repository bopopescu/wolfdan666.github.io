<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>狼胆</title>
  
  <subtitle>wolfdan&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wolfdan.cn/"/>
  <updated>2019-08-06T15:09:29.355Z</updated>
  <id>http://www.wolfdan.cn/</id>
  
  <author>
    <name>wolfdan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后缀数组-算法学习日常[5/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/06/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8-5-100/"/>
    <id>http://www.wolfdan.cn/2019/08/06/算法学习日常-5-100/</id>
    <published>2019-08-06T15:03:01.000Z</published>
    <updated>2019-08-06T15:09:29.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后缀数组论文分享"><a href="#后缀数组论文分享" class="headerlink" title="后缀数组论文分享"></a>后缀数组论文分享</h1><p><a href="https://github.com/wolfdan666/BlogPic/tree/master/%E7%AE%97%E6%B3%95/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">后缀数组论文分享</a></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人一能之，己百之；人十能之，己千之。果能此道矣，虽愚必明，虽柔必强。</p>]]></content>
    
    <summary type="html">
    
      分享一个后缀数组的论文，很全，学了一天也没学完，发现自己之前学了三天的后缀数组又忘光了
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="后缀数组" scheme="http://www.wolfdan.cn/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2019杭电多校1006和1007算法日常[4/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/05/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-4-100/"/>
    <id>http://www.wolfdan.cn/2019/08/05/算法日常-4-100/</id>
    <published>2019-08-05T03:51:19.000Z</published>
    <updated>2019-08-05T14:42:18.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><ul><li>今天是杭电多校第5场，然后1006签到本来应该10mins内写完，然后我菜鸡写了2小时(各种问题<del>不熟练</del>和<del>紧张</del>)，赛后发现有大佬用dc3(一种据说复杂度O(n)的后缀数组算法,发现自己孤陋寡闻)</li><li>1007真滴有趣…闪电蛇皮走位，然后自己想复杂了一点点…</li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="http://acm.hdu.edu.cn/search.php?field=problem&key=2019+Multi-University+Training+Contest+5&source=1&searchmode=source" target="_blank" rel="noopener">2019杭电多校5</a></p><h2 id="1006解法"><a href="#1006解法" class="headerlink" title="1006解法"></a>1006解法</h2><p>Ekmp，用s.substr(1)的串来做ekmp函数的原串，s做ekmp函数的匹配串，这样跑一次ekmp就行，然后累加extend</p><p><a href="https://segmentfault.com/a/1190000008663857" target="_blank" rel="noopener">ekmp学习教程·我觉得比较好的一个(我也用这个学的)</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="comment">// int next[1000000];</span></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> extend[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">string</span> S, T;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">/* 求解 T 中 next[]，注释参考 GetExtend() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; m &amp;&amp; T[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            next[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 求解 extend[] */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetExtend</span><span class="params">(<span class="built_in">string</span> &amp; S, <span class="keyword">int</span> &amp; n, <span class="built_in">string</span> &amp; T, <span class="keyword">int</span> &amp; m, <span class="keyword">int</span> extend[], <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    GetNext(T, m, next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= p || i + next[i - a] &gt;= p) <span class="comment">// i &gt;= p 的作用：举个典型例子，S 和 T 无一字符相同</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= p)</span><br><span class="line">                p = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (p &lt; n &amp;&amp; p - i &lt; m &amp;&amp; S[p] == T[p - i])</span><br><span class="line">                p++;</span><br><span class="line"></span><br><span class="line">            extend[i] = p - i;</span><br><span class="line">            a = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            extend[i] = next[i - a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;S;</span><br><span class="line">        n = S.size();</span><br><span class="line">        T = S.substr(<span class="number">1</span>);</span><br><span class="line">        m = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*可能程序以为我用了前面的函数声明中的next[],所以说我模棱两可,加个全局的命名空间就行</span></span><br><span class="line"><span class="comment">        或者换个变量名也行*/</span></span><br><span class="line">        <span class="comment">// GetExtend(T, m, S, n, extend, ::next);</span></span><br><span class="line">        GetExtend(T, m, S, n, extend, nxt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; extend[j] &lt;&lt; " \n"[j==m-1];</span></span><br><span class="line">            ans += extend[j]+j==n<span class="number">-1</span> ? extend[j] : extend[j]+<span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007解法"><a href="#1007解法" class="headerlink" title="1007解法"></a>1007解法</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><p>a[i] = a[i-1]+a[i-3],就是对于第i项有两种情况，要么是直接往上走要么是闪电<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E6%9D%AD%E7%94%B5/%E7%AC%AC%E4%BA%94%E5%9C%BA/1007_an.png" alt></p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>dls说暴力打表找规律比较不用动脑子，哭了，臭大佬，好过分</p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = a[<span class="number">2</span>] = a[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; maxn; i++) a[i] = (a[i<span class="number">-1</span>]+a[i<span class="number">-3</span>])%mod;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) swap(l, r);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="number">1</span>) l++;</span><br><span class="line">        <span class="keyword">if</span>(r != n) r--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a[r-l+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>因为今天一直在听dls的直播，尽管后面的题听不懂，想听听dls一般解题思路是啥(<del>其实后面听不懂就容易发呆了</del>),所以今天还没有补很多题，然后就只写了这么一点点,<del>我好弱啊</del></p><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p>人总得有个目标，才能继续勇敢而坚强地活着，大部分成年人，在三十岁左右已经没了活着的目标，为了不让自己死去，他们制造了一个孩子，有了这个小孩，他们终于找到了努力工作和继续活下去的目标。</p><p>不，不是的，那是基因的谎言…让你这个机器人帮忙传递他们的存在</p><p>但如果你知道这是谎言，并决定真的要选择它，那才是真正的选择</p><p>教育本来就是不平等的，有些人很年轻就是OI金牌了，然而有些人还在发愁下次要怎么骗外公外婆我出去玩了，其实是偷偷跑去了网吧，如饥似渴地<strong>享受</strong>那几个小时的奥比岛，赛尔号，功夫派，洛克王国，地下城与勇士，英雄联盟…(从小学到高中渐渐变化的是游戏),然而别人早就享受到了算法的美妙，并将来很大程度能因此受到更好的教育，然后享受社会上最好的资源，过上幸福的生活，虽然我不能这样定义幸福，但是不平等确实存在，想要跨越社会阶层的鸿沟，可能要花上很久很久的努力.不过，我认为，跨越社会阶层的鸿沟，才是这个和平时代个人最英雄的挑战.做你自己的英雄，不断超越自己，并同时珍爱身边的人，过好这一生…</p><p>今天说的好像有点小多，叨叨叨多了，快滚去运动洗澡睡觉，明天继续来补题</p>]]></content>
    
    <summary type="html">
    
      1006 ekmp本来应该10mins写完(发现好多大佬用dc3(一种据说复杂度O(n)的后缀数组算法,发现自己孤陋寡闻))，结果自己太菜写了两个小时，然后1007是真滴有点好玩,只是我太菜,一开始把自己玩死了 -- 以及今天叨叨好像有点多
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="ekmp" scheme="http://www.wolfdan.cn/tags/ekmp/"/>
    
  </entry>
  
  <entry>
    <title>Python写字符串模拟真香_算法日常[3/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/04/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/"/>
    <id>http://www.wolfdan.cn/2019/08/04/算法日常-3-100/</id>
    <published>2019-08-04T06:14:04.000Z</published>
    <updated>2019-08-04T10:00:18.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/B" target="_blank" rel="noopener">2019牛客多校第6场B题</a></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/B_ti.png" alt></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>把8段中每段都处理成为一个整数,然后找出最长的连续0,相同的长度的话就让0放前面的段(因为0的ASCII码是48,比:的58小),然后进行判断性输出(<strong>数字用%x可以实现以16进制输出</strong>)</p><p><strong>详见代码注释</strong></p><h3 id="C-版AC代码"><a href="#C-版AC代码" class="headerlink" title="C++版AC代码"></a>C++版AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*"%x"以16进制的形式输出,是我孤陋寡闻了*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ii=<span class="number">1</span>;ii&lt;=T;ii++)&#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>,l=<span class="number">0</span>,nl=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*观察下面的代码容易知道,只有最前面为0的时候是f=1,</span></span><br><span class="line"><span class="comment">        其他地方为0,f为i-nl(减掉了0的长度即为0开始的地方)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        综上:</span></span><br><span class="line"><span class="comment">        f是最长连续0开始的位置</span></span><br><span class="line"><span class="comment">        然后l是保存维护最长连续0的长度</span></span><br><span class="line"><span class="comment">        nl是当前的最长连续0的长度*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            a[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">16</span>;j++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%1d"</span>,&amp;t);</span><br><span class="line">                a[i]=a[i]*<span class="number">2</span>+t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a[i]) nl++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">/*判断现在的连续0的数目是否超过之前的连续0的数目*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl&gt;=l&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                nl=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">8</span>&amp;&amp;nl&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nl&gt;l)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*末尾有0，但是末尾的连续0和最前面的连续0相同</span></span><br><span class="line"><span class="comment">                所以考虑字典序最小，由于'0'-48,':'-58</span></span><br><span class="line"><span class="comment">                所以优先让前面输出0,后面就输出':'*/</span></span><br><span class="line">                <span class="keyword">if</span>(nl==l&amp;&amp;f==<span class="number">1</span>)&#123;</span><br><span class="line">                    f=i-nl+<span class="number">1</span>;l=nl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,ii);</span><br><span class="line">        <span class="keyword">if</span>(f==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==f)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">":"</span>);</span><br><span class="line">                i+=l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">8</span>)<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%x%c"</span>,a[i],<span class="string">":\n"</span>[i==<span class="number">8</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>通过枚举每种有0的串，然后统一加到一个列表中，之后通过sort(优先长度然后优先字典序)，最后输出</p><p><strong>详见我的Python注释代码</strong></p><h3 id="Python-AC代码"><a href="#Python-AC代码" class="headerlink" title="Python_AC代码"></a>Python_AC代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">T=int(input())</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(T):</span><br><span class="line">    b=input()</span><br><span class="line">    a=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="comment"># 这个[2:]是去掉'0x'</span></span><br><span class="line">        a.append(hex(int(b[i*<span class="number">16</span>:i*<span class="number">16</span>+<span class="number">16</span>],<span class="number">2</span>))[<span class="number">2</span>:])</span><br><span class="line">    s=[]</span><br><span class="line">    s.append(<span class="string">':'</span>.join(a))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">            <span class="comment"># 对每个i中的后缀长a[i:j+1]判断各元素是否都是等于0的</span></span><br><span class="line">            <span class="comment"># 是就直接把字符串丢进去,比C++AC版本中的记录长度简单很多</span></span><br><span class="line">            <span class="keyword">if</span> all(map(<span class="keyword">lambda</span> x:x==<span class="string">'0'</span>,a[i:j+<span class="number">1</span>])):</span><br><span class="line">                <span class="comment"># 用':'分隔的a[i]串</span></span><br><span class="line">                s.append(<span class="string">':'</span>.join(a[:i])+<span class="string">'::'</span>+<span class="string">':'</span>.join(a[j+<span class="number">1</span>:]))</span><br><span class="line">    <span class="comment"># 优先用长度排序,其实是同长度按照字典序排序</span></span><br><span class="line">    s.sort(key=<span class="keyword">lambda</span> x:(len(x),x))</span><br><span class="line">    print(<span class="string">'Case #%d:'</span>%(t+<span class="number">1</span>),s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p> 岁月还漫长总会有人陪你骑马喝酒走四方</p>]]></content>
    
    <summary type="html">
    
      Python写字符串模拟真香_算法日常[3/100]
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="Python写算法" scheme="http://www.wolfdan.cn/tags/Python%E5%86%99%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第15周[15/521]</title>
    <link href="http://www.wolfdan.cn/2019/08/04/ARST%E6%89%93%E5%8D%A1%E7%AC%AC15%E5%91%A8-15-521/"/>
    <id>http://www.wolfdan.cn/2019/08/04/ARST打卡第15周-15-521/</id>
    <published>2019-08-04T03:49:12.000Z</published>
    <updated>2019-08-04T10:02:37.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/ARST/ARST15/beauty.jpg" alt></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.31" target="_blank" rel="noopener">已经下定决心要努力刷题了，所以每天都有刷</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/mit-technology-review/china-has-started-a-grand-experiment-in-ai-education-it-could-reshape-how-the-world-learns-c771f5980deb" target="_blank" rel="noopener">China Has Started a Grand Experiment in AI Education. It Could Reshape How the World Learns.</a></p><h2 id="语句摘选"><a href="#语句摘选" class="headerlink" title="语句摘选"></a>语句摘选</h2><ul><li>In three hours we understand students more than the three years spent by the best teachers.</li><li>Three things have fueled China’s AI education boom. The first is tax breaks and other incentives for AI ventures that improve anything from student learning to teacher training to school management. For VCs, this means such ventures are good bets. According to one estimate, China led the way in over $1 billion invested globally last year in AI education.</li><li>Second, academic competition in China is fierce. Ten million students a year take the college entrance exam, the gaokao. Your score determines whether and where you can study for a degree, and it’s seen as the biggest determinant of success for the rest of your life. <strong>Parents willingly pay for tutoring or anything else that helps their children get ahead.</strong></li><li>Finally, <strong>Chinese entrepreneurs have masses of data at their disposal to train and refine their algorithms.</strong>The population is vast, people’s views on data privacy are much more lax than in the West (especially if they can get coveted benefits like academic performance in return), and parents are big believers in the potential of technology, having seen how much it has transformed the country in just a few decades.</li><li>Squirrel’s approach may yield great results on traditional education, but it doesn’t prepare students to be flexible in a changing world, the experts I spoke to say. “There’s a difference between adaptive learning and personalized learning,” says Chris Dede, a professor at Harvard University in the Technology, Innovation, and Education Program. Squirrel is doing adaptive learning, which is about “understanding exactly what students know and don’t know.” <strong>But it pays no attention to what they want to know or how they learn best.</strong> Personalized learning takes their interests and needs into account to “<strong>orchestrate the motivation and time for each student so they are able to make progress.</strong>”</li><li>Much of Squirrel’s philosophy stems from Li’s own experiences as a child. When he was young, he didn’t have very good emotional intelligence, he says, and reading books on the subject didn’t help. So he spent half a year dividing the skill into 27 different components and trained himself on each one. He trained himself to be more observant, for example, and to be an interesting conversationalist (“I spent a lot of time finding 100 topics, so I have a lot of material to talk with others,” he says). <strong>He even trained himself to keep smiling when others criticized him. (“After that, in my life, I do not have any enemies.”)</strong> The method gave him the results he wanted — along with the firm belief that anything can be taught this way.</li><li>That’s exactly what China lacks. If you are able to speak multiple languages, you are able to talk to different people; you are able to communicate different ideas<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2></li><li>估计阅读时间是17mins，然而我抠脚的英语水平加上文章的深度和联想性让我看了整整一个小时</li><li>AI教学有很好的数据分析优势，计算机的快速处理数据能力，不分日夜地工作能力，都使得AI教学有很好的前景，只要不断地迭代分析数据的算法，一定可以让计算机拥有快速检测一个学生水平的能力，<strong>传统老师与计算机的差距在于经验的积累速度，不过对于单个知识点来说目前可能一个老师可能能给更好的帮助</strong>，所以我认为当下如果有AI算法辅助分析一个学生的水平，然后给针对的训练，再在个别的知识点上用上老师，那么可以大大降低对老师经验性的要求。因为我认为一个顶级老师和一个初级老师的区别仅在于对知识系统性的掌握以及对学生知识框架的快速认识能力上面(后者为主)，所以有了AI算法的辅助，将能降低家长花重金请名师的成本，而可以请一个初级老师+AI算法辅助的方式</li><li>感叹世界变化之快！</li><li>感觉自己如果要成为认知层的上层人士，必须和世界进行连接，和更多的大师交流，那就必须学好英语，不然看一篇这样简单的文章要花上太久的时间…所以坚持好好学English！</li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://oi-wiki.org/" target="_blank" rel="noopener">推荐一个OIwiki网站,内容很全面,分享给你们</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/30/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/">线段树入门-AcWing-245-你能回答这些问题吗</a></p><p><a href="https://www.wolfdan.cn/2019/07/30/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/">priority-queue和multiset异同以及线段树空树插入维护初见</a></p><p><a href="https://www.wolfdan.cn/2019/07/31/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/">8数码和15数码算法结论和延展</a></p><p><a href="https://www.wolfdan.cn/2019/08/02/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/">拓扑排序以及C++读取空行[算法学习日常1/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/03/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/">反二分题的做法-算法日常[2/100]</a></p><p><a href="https://www.wolfdan.cn/2019/08/04/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-3-100/">Python写字符串模拟真香_算法日常[3/100]</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第15周 推荐一个OIwiki网站 线段树入门-AcWing-245-你能回答这些问题吗 priority-queue和multiset异同以及线段树空树插入维护初见 8数码和15数码算法结论和延展 拓扑排序以及C++读取空行 反二分题的做法 China Has Started a Grand Experiment in AI Education. It Could Reshape How the World Learns.
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>反二分题的做法-算法日常[2/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/03/%E7%AE%97%E6%B3%95%E6%97%A5%E5%B8%B8-2-100/"/>
    <id>http://www.wolfdan.cn/2019/08/03/算法日常-2-100/</id>
    <published>2019-08-03T14:14:21.000Z</published>
    <updated>2019-08-03T14:59:28.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>今天是个好日子，开局多校D看起来就是个简单的<del>二分模拟</del>,马上动手写起来啊！然后一直写到了比赛结束(当然中途看了一下其他题,并且给队友提供了j题的解题思路)</p><h2 id="反二分的2019牛客多校6D题"><a href="#反二分的2019牛客多校6D题" class="headerlink" title="反二分的2019牛客多校6D题"></a>反二分的2019牛客多校6D题</h2><p><a href="https://ac.nowcoder.com/acm/contest/886/D" target="_blank" rel="noopener">题目链接</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_ti.png" alt></p><h2 id="哒哒马蹄终究是错"><a href="#哒哒马蹄终究是错" class="headerlink" title="哒哒马蹄终究是错"></a>哒哒马蹄终究是错</h2><p>因为这个题目终极不是正规的二分做法！因为答案根本不满足二分算法中的答案单调性，比如如下反例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15 5</span><br><span class="line">39 39 39 39 39 60 60 60 60 60 100 100 100 100 100</span><br></pre></td></tr></table></figure><p>答案是199，而200不能是答案，201也不能是答案</p><p>(二分输出答案是216)(<strong>因为二分总是在较大数值的时候是满足的可能性极大的,所以二分后整体的结果偏大,其实有更小的答案漏掉了</strong>)</p><p>不过这题的美丽错误美就美在了它让人有种是二分的错误–(<strong>哒哒的马蹄，是个美丽的错误</strong>)</p><h2 id="如何AC"><a href="#如何AC" class="headerlink" title="如何AC"></a>如何AC</h2><p>不过因为数据比较弱(其实造一个完美避开二分的数据几乎是不可能在题目数据范围实现的，如果可以，那我把二分后往小的方向开得更远一下枚举，根据上面分析为了避免小概率事件还可以多搞一下向大的方向也枚举)，所以我们现在可以有两种做法</p><ol><li>先二分，然后在这个ans下继续向小的方向枚举20项</li><li>因为答案的下界和上界相差很小，可以直接枚举<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E5%85%AD%E5%9C%BA/D_an.png" alt></li></ol><h3 id="二分再向小方向走"><a href="#二分再向小方向走" class="headerlink" title="二分再向小方向走"></a>二分再向小方向走</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为数据弱，所以不满足单调性的时候这样这样来凑一手</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,K,v[M],sum,vis[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x*K&lt;sum || x&lt;v[n<span class="number">-1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=v[n<span class="number">-1</span>] &amp;&amp; K&gt;=n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>,ts=sum;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(ts&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> tps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=n &amp;&amp; vis[n-i]) i++;</span><br><span class="line">        <span class="keyword">if</span>(n-i&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            tps += v[n-i];</span><br><span class="line">                <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[n-i]&lt;&lt;endl;</span></span><br><span class="line">            vis[n-i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span>(tps&lt;x)&#123;</span><br><span class="line">            <span class="keyword">int</span> tn = upper_bound(v,v+n-i,x-tps)-v;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;=tn &amp;&amp; vis[tn-j]) j++;</span><br><span class="line">            <span class="keyword">if</span>(tn-j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                tps += v[tn-j];</span><br><span class="line">                    <span class="comment">// cout&lt;&lt;"I get you! : "&lt;&lt;v[tn-j]&lt;&lt;endl;</span></span><br><span class="line">                vis[tn-j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;"How much is the tps "&lt;&lt;tps&lt;&lt;endl;</span></span><br><span class="line">        ts -= tps;</span><br><span class="line">        tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;K) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;<span class="keyword">int</span> kase=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;K;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;v[i]; sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v,v+n);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1e6</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">            <span class="comment">// cout&lt;&lt;"l: "&lt;&lt;l&lt;&lt;" r: "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) r=mid;<span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ans;i&gt;=ans<span class="number">-20</span>;i--) <span class="keyword">if</span>(check(i)) ans = i;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;kase++&lt;&lt;<span class="string">": "</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正规做法-从下界开始枚举"><a href="#正规做法-从下界开始枚举" class="headerlink" title="正规做法-从下界开始枚举"></a>正规做法-从下界开始枚举</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码来源--杭电的一个二人小分队 jesus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1086</span>;</span><br><span class="line"><span class="keyword">int</span> v[N],vis[N];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> vv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left=n;</span><br><span class="line">    <span class="keyword">int</span> maxx=n,no=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        <span class="keyword">int</span> sp=vv;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=maxx;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="comment">//如果当前剩余容量比最小的更小，不能继续装，退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(sp&lt;v[no])<span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果当前剩余容量足够，并且物品i还没有装过，则装入</span></span><br><span class="line">            <span class="keyword">if</span>(sp&gt;=v[i]&amp;&amp;!vis[i])&#123;</span><br><span class="line">                sp=sp-v[i];vis[i]=<span class="number">1</span>;left--;</span><br><span class="line">                <span class="comment">//如果无剩余，直接退出循环</span></span><br><span class="line">                <span class="keyword">if</span>(!sp)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//压缩下次寻找的范围</span></span><br><span class="line">        <span class="keyword">while</span>(vis[maxx])maxx--;</span><br><span class="line">        <span class="keyword">while</span>(vis[no])no++;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果无剩余，则正好输出</span></span><br><span class="line">    <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cases;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ti=<span class="number">1</span>;ti&lt;=cases;ti++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i]);</span><br><span class="line">            sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> b=sum/k;</span><br><span class="line">        <span class="keyword">if</span>(sum%k)b++;</span><br><span class="line">        <span class="keyword">int</span> maxx=max(v[n],b);</span><br><span class="line">        <span class="keyword">int</span> ans=maxx;</span><br><span class="line">        <span class="keyword">int</span> i=maxx;</span><br><span class="line">        <span class="keyword">while</span>(i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check(i))&#123;</span><br><span class="line">                ans=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,ti,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="每天一句叨叨"><a href="#每天一句叨叨" class="headerlink" title="每天一句叨叨"></a>每天一句叨叨</h1><p><strong>人生本来就是一场修行，人的基因把我们当做机器人，然后让我们为他们传递生命</strong>，所以给我们制造了很多激素，其中一些情绪激素让我们时而快乐时而悲伤，时而兴奋时而自闭，我们可能无法改变太多，唯有做的就是享受这个当机器人还能发发牢骚的快乐，并享受这一次人生的偶然，尽自己的快乐，去奋斗，去创造，因为平庸更使自己感到乏味…<strong>那就成为一个，不断进化，并快乐地享受其中的机器人吧</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校6D题  算法学习日常 我的头铁(~~二分~~)写法,然后check还没写好,因为想骚操作但内力不足便走火入魔了..先二分，然后在这个ans下继续向小的方向枚举20项....人的基因把我们当做机器人..那就成为一个，不断进化，并快乐地享受其中的机器人吧
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="反二分" scheme="http://www.wolfdan.cn/tags/%E5%8F%8D%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序以及C++读取空行[算法学习日常1/100]</title>
    <link href="http://www.wolfdan.cn/2019/08/02/%E5%86%99%E5%B0%81%E6%83%85%E4%B9%A6%E7%BB%99%E7%AE%97%E6%B3%951/"/>
    <id>http://www.wolfdan.cn/2019/08/02/写封情书给算法1/</id>
    <published>2019-08-02T14:22:13.000Z</published>
    <updated>2019-08-02T14:22:13.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法学习日常第一天"><a href="#算法学习日常第一天" class="headerlink" title="算法学习日常第一天"></a>算法学习日常第一天</h1><p>2019年8月2日</p><ul><li><p>今天上午，<a href="https://oi-wiki.org/intro/resources/" target="_blank" rel="noopener">重新认识算法的全貌<del>各种资源及知识点总结</del></a></p></li><li><p>并且还了解到了<a href="https://oi-wiki.org/intro/common-mistakes/" target="_blank" rel="noopener"><del>常见错误写法</del></a>，当然自己当年也写过很多错误</p></li><li><p>下午先是补牛客5的多校G题的dp–接着昨天的补都补了90mins(含对着手写第一遍)，还是太菜了</p></li><li><p>然后补H题，发现自己昨天写了3个小时的这个题目不是<del>字符串插入题</del>…而是一个<strong>拓扑排序</strong>题..真的自己菜得可怕..写错分类怎么可能做对，然后自己又焦虑了很久，知道2019年8月2日15:48:15才静下来认真地学习拓扑排序</p><ul><li>拓扑排序在紫书上学了下，就是把点对关系看成一个图里面的指向关系，即把每一个点对看做小数指向大数的有向边，如果图没有有向环的话，说明是可以的，否则是不行的</li><li>记自己头铁处理空行读入，搞了整整一个小时读取空行</li></ul></li></ul><h2 id="拓扑排序以及空行头铁见代码"><a href="#拓扑排序以及空行头铁见代码" class="headerlink" title="拓扑排序以及空行头铁见代码"></a>拓扑排序以及空行头铁见代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2019年8月2日19:25:05</span></span><br><span class="line"><span class="comment">拓扑排序bfs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">拓扑排序算法思想</span></span><br><span class="line"><span class="comment">1、在AOV网络中选一个没有直接前驱的顶点, 并输出之;</span></span><br><span class="line"><span class="comment">2、从图中删去该顶点, 同时删去所有它发出的有向边;---&gt;(我下面的题目使用stop实现删除)</span></span><br><span class="line"><span class="comment">3、重复以上步骤, 直到</span></span><br><span class="line"><span class="comment">◆ 全部顶点均已输出，拓扑有序序列形成，拓扑排序完成；</span></span><br><span class="line"><span class="comment">◆ 或者图中还有未输出的顶点，但已跳出处理循环。这说明图中还剩下一些顶点，</span></span><br><span class="line"><span class="comment">它们都有直接前驱，再也找不到没有前驱的顶点了。这时AOV网络中必定存在有向环。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,lentmp;</span><br><span class="line"><span class="built_in">string</span> s[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">/*用string本来可以不用下面的len*/</span></span><br><span class="line"><span class="keyword">int</span> len[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> it[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> ans,t;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m*(m<span class="number">-1</span>)/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;lentmp;</span><br><span class="line">        <span class="keyword">int</span> x=t[<span class="number">0</span>]-<span class="string">'a'</span>,y=t[<span class="number">1</span>]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">        len[x][y] = lentmp;</span><br><span class="line">        <span class="comment">// if(lentmp) cin&gt;&gt;s[x][y];</span></span><br><span class="line">        <span class="comment">/*我的头铁(~~比赛因此卡1小时去谷歌~~)写法</span></span><br><span class="line"><span class="comment">        先直接用cin.get()吃掉t和lentmp后面的回车</span></span><br><span class="line"><span class="comment">        再getline(),</span></span><br><span class="line"><span class="comment">        否则getline会吃那个回车而导致少读数据*/</span></span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        getline(<span class="built_in">cin</span>,s[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!solve()) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*暴力检测每队关系是否和整个串中的样子是一样的</span></span><br><span class="line"><span class="comment">法二: 也可以每一对关系得到一个ans的tmp串,然后再去==判断</span></span><br><span class="line"><span class="comment">      但是效率低</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k]==<span class="string">'a'</span>+i||ans[k]==<span class="string">'a'</span>+j)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ans[k]!=s[i][j][now]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    now++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(now!=len[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="comment">/* 这里是每个大串的排序关系-通过m次的关系问询确定的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意前面巧妙地处理出了j小于k---&gt;这就是拓扑排序的思路</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.对没有出现过的关系(即s[j][k]的那一维全为空)stop[j]和stop[k]全都赋值为1</span></span><br><span class="line"><span class="comment">        2.对于到最后了的关系(即s[j][k][]='\0')全赋空</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        因为有m*(m-1)/2 对 关系，也就是每两个都有比较，所以一定能够得出最前面的一个字符..所以就完美了！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        这里每次stop都会清零！*/</span></span><br><span class="line">        <span class="keyword">bool</span> stop[<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;m;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!s[j][k][it[j][k]]) stop[j]=stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[j][k][it[j][k]]==<span class="string">'a'</span>+j) stop[k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> stop[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!stop[j])&#123;</span><br><span class="line">                ans+=<span class="string">'a'</span>+j;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(k&lt;j) it[k][j]++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;j) it[j][k]++;</span><br><span class="line">                &#125;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!done) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!check()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>晚上成功补完H题和I题，发现好像没有时间补B题了，明天上午来补一下B题</li></ul><h1 id="每日一句叨叨"><a href="#每日一句叨叨" class="headerlink" title="每日一句叨叨"></a>每日一句叨叨</h1><p><strong>杜月笙知道成功需要代价</strong>，他想为自己洗白(小时候家里穷只能混黑帮)，为整个帮派洗白，但穿了大半辈子长褂(为了不露出纹身)，让自己的说书先生给自己讲了大半辈子学，也为上海的繁荣安定做了大半辈子贡献，但却最终未被认可(通过人脉被选之为一个参议长，但蒋介石让他自己退位)，<strong>但杜月笙却永远被后人被历史铭记</strong></p><p><strong>若命运不公，那就和它斗到底！</strong></p>]]></content>
    
    <summary type="html">
    
      2019牛客多校5H题 拓扑排序BFS 算法学习日常 我的头铁(~~比赛因此卡1小时去谷歌~~)写法,先直接用cin.get()吃掉t和lentmp后面的回车,再getline(),否则getline会吃那个回车而导致少读数据
    
    </summary>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法学习日常" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
      <category term="拓扑排序" scheme="http://www.wolfdan.cn/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="BFS" scheme="http://www.wolfdan.cn/tags/BFS/"/>
    
      <category term="读取空行" scheme="http://www.wolfdan.cn/tags/%E8%AF%BB%E5%8F%96%E7%A9%BA%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>8数码和15数码算法结论和延展</title>
    <link href="http://www.wolfdan.cn/2019/07/31/8%E6%95%B0%E7%A0%81%E5%92%8C15%E6%95%B0%E7%A0%81%E7%AE%97%E6%B3%95%E7%BB%93%E8%AE%BA%E5%92%8C%E5%BB%B6%E5%B1%95/"/>
    <id>http://www.wolfdan.cn/2019/07/31/8数码和15数码算法结论和延展/</id>
    <published>2019-07-31T15:21:49.000Z</published>
    <updated>2019-07-31T15:52:31.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此类问题是否有解"><a href="#此类问题是否有解" class="headerlink" title="此类问题是否有解"></a>此类问题是否有解</h1><h2 id="定义一个东西"><a href="#定义一个东西" class="headerlink" title="定义一个东西"></a>定义一个东西</h2><p>先定义此类问题矩阵的逆序数的和值为除去0以外其他数的排列(把二维一行行地读取的循序的排列)的逆序数和</p><h2 id="发现一"><a href="#发现一" class="headerlink" title="发现一"></a>发现一</h2><p>我们可以发现排列中相邻的两个数交换位置会它们两相互之间的逆序数值,<strong>而其他部分以及他们各自和其他部分的逆序数值都不变</strong>,所以矩阵的逆序数+1或-1,也就是矩阵的逆序数的奇偶性发生了改变</p><h2 id="发现二"><a href="#发现二" class="headerlink" title="发现二"></a>发现二</h2><p>我们还可以发现0左右移动不影响矩阵的逆序数的奇偶性，然而如果是上(下)移动的话，就想到于一个数连续和左(右)边3个数进行了交换位置，所以矩阵的逆序数的奇偶性会变</p><h2 id="发现三"><a href="#发现三" class="headerlink" title="发现三"></a>发现三</h2><p>矩阵的改变只能通过与0变换位置，所以只有在与0上下交换的时候才会产生矩阵的逆序数的奇偶性的变化</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以我们知道最终状态逆序数为0,且最后0在最后一行(<code>高中学化学经常讲终态法</code>)，也就是矩阵要有解，最终逆序数的奇偶性为偶，<strong>那么就要在初始状态的逆序数上面 加上 0值在初始状态移动到最后一行产生的逆序数奇偶性的变化值</strong>仍为偶数则有解</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="有解性"><a href="#有解性" class="headerlink" title="有解性"></a>有解性</h2><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6620" target="_blank" rel="noopener">HDU-6620 2019杭电多校4</a></p><h3 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,a[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i])&#123;</span><br><span class="line">                cnt+=<span class="number">3</span>-i/<span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[j] &amp;&amp; a[j]&gt;a[i])</span><br><span class="line">                        cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求最少步数"><a href="#求最少步数" class="headerlink" title="求最少步数"></a>求最少步数</h2><p><strong>如果我们要求解步数的话,我们首先是用逆序数进行判定是否有解，有解才进行搜索</strong></p><p>使用曼哈顿距离递减 和 IDA*(迭代层数达到120层就放弃) 的方式<br>曼哈顿是初始排列到目标排列每个数字abs(x1-x2)+abs(y1+y2)的和值</p><h3 id="给个板子"><a href="#给个板子" class="headerlink" title="给个板子"></a>给个板子</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先用结论判断是否有解呀！不然没解跑这个会死循环，燃烧你的CPU的话我不背锅哦</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//limit全部的曼哈顿距离之和</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">4</span>][<span class="number">4</span>], map2[<span class="number">16</span>], limit;</span><br><span class="line"><span class="keyword">int</span> flag, length;</span><br><span class="line"><span class="comment">//各个数字应在位置(i,j)对照表,比如0在位置(3,3)</span></span><br><span class="line"><span class="keyword">int</span> goal[<span class="number">16</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">3</span>,<span class="number">3</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">0</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                   &#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nx[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">-1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">-1</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//估价函数,曼哈顿距离,小于等于实际总步数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hv</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">4</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="built_in">map</span>[i][j];</span><br><span class="line">            <span class="comment">// 不算0</span></span><br><span class="line">            <span class="keyword">if</span> (w != <span class="number">0</span>)</span><br><span class="line">                cost += <span class="built_in">abs</span>(i - goal[w][<span class="number">0</span>]) + <span class="built_in">abs</span>(j - goal[w][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* x,y起始坐标，len是已经走过的长度,pre_move是上次走的方向 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len, <span class="keyword">int</span> pre_move)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> dv = hv(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">if</span> (len == limit) &#123;</span><br><span class="line">        <span class="comment">//成功 退出</span></span><br><span class="line">        <span class="keyword">if</span> (dv == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            length = len;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//超过预设长度 回退</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//不和上一次移动方向相反,对第二步以后而言</span></span><br><span class="line">        <span class="keyword">if</span> (i + pre_move == <span class="number">3</span> &amp;&amp; len &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tx = x + nx[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ty = y + nx[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (tx &gt;= <span class="number">0</span> &amp;&amp; tx &lt; <span class="number">4</span> &amp;&amp; ty &gt;= <span class="number">0</span> &amp;&amp; ty &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">            <span class="keyword">int</span> p = hv(<span class="built_in">map</span>);</span><br><span class="line">            <span class="keyword">if</span> (p + len &lt;= limit &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                dfs(tx, ty, len + <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 递归回来后恢复现场 */</span></span><br><span class="line">            swap(<span class="built_in">map</span>[x][y], <span class="built_in">map</span>[tx][ty]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1, y1;</span><br><span class="line">        <span class="comment">//map2一维 map二维</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;map2[i]);</span><br><span class="line">            <span class="keyword">if</span> (map2[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                x1 = i/<span class="number">4</span>; y1 = i%<span class="number">4</span>;</span><br><span class="line">                <span class="built_in">map</span>[x1][y1] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">map</span>[i/<span class="number">4</span>][i%<span class="number">4</span>] = map2[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 曼哈顿长度要递减的 */</span></span><br><span class="line">        limit = hv(<span class="built_in">map</span>);</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//要求120步之内到达,其实如果可以的话最多80多步就可以走完</span></span><br><span class="line">        <span class="keyword">while</span> (flag == <span class="number">0</span> &amp;&amp; length &lt;= <span class="number">90</span>)&#123;</span><br><span class="line">            <span class="comment">//得到的是最小步数</span></span><br><span class="line">            dfs(x1, y1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/* 加大初始额曼哈顿距离的限制，让递归的行走能不曼哈顿距离递减得多试探几步 */</span></span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) limit++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if (flag)</span></span><br><span class="line">        <span class="comment">//     printf("%d\n", length);</span></span><br><span class="line">        <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yse"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>不好意思，写完后才发现重复造轮子了，不过应该我写得应该算比较简单，可以立马用上吧</p>]]></content>
    
    <summary type="html">
    
      8数码和15数码算法结论和延展 **那么就要在初始状态的逆序数上面 加上 0值在初始状态移动到最后一行产生的逆序数奇偶性的变化值**仍为偶数则有解
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="逆序数" scheme="http://www.wolfdan.cn/tags/%E9%80%86%E5%BA%8F%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>priority_queue和multiset异同以及线段树空树插入维护初见</title>
    <link href="http://www.wolfdan.cn/2019/07/30/priority-queue%E5%92%8Cmultiset%E5%BC%82%E5%90%8C%E4%BB%A5%E5%8F%8A%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A9%BA%E6%A0%91%E6%8F%92%E5%85%A5%E7%BB%B4%E6%8A%A4%E5%88%9D%E8%A7%81/"/>
    <id>http://www.wolfdan.cn/2019/07/30/priority-queue和multiset异同以及线段树空树插入维护初见/</id>
    <published>2019-07-30T12:58:31.000Z</published>
    <updated>2019-07-30T13:30:19.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="priority-queue和multiset异同"><a href="#priority-queue和multiset异同" class="headerlink" title="priority_queue和multiset异同"></a>priority_queue和multiset异同</h1><p>优先级队列只能按照排序顺序访问一个元素 - 即，可以获得最高优先级的项目，想要访问其他的元素，就必须删除顶端元素。 优先级队列还允许重复元素，因此它很像是一个multiset。</p><p>但是multiset比priority_queue的好处就在于multiset不用删除掉优先级最高的元素就可以访问其他优先级的元素，就相当于一个动态的有序数组</p><p>同为log(n)插入，但是multiset却能访问更多，真香</p><p>虽然priority_queue可以通过删除再恢复的方式达到访问其他优先级的元素，但是实现很不优雅，而且让一个log(n)的操作蹩脚地魔改成了接近O(n^2)的操作，并且容易卡时间</p><h2 id="比如HDU-6609这一题"><a href="#比如HDU-6609这一题" class="headerlink" title="比如HDU-6609这一题"></a>比如<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6609" target="_blank" rel="noopener">HDU-6609</a>这一题</h2><h3 id="暴力priority-queue"><a href="#暴力priority-queue" class="headerlink" title="暴力priority_queue"></a>暴力priority_queue</h3><p><strong>虽然我很不愿意把我很喜欢的一种STL加上暴力的前缀，但是确实是很朴素自然，大道至简但是这里有点过分使用了…所以下面是TLE的代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span> + <span class="number">7</span> ;</span><br><span class="line"><span class="keyword">int</span> Q, n, m, w[M];</span><br><span class="line">ll sum;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; pre;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;Q;</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="comment">/* init */</span></span><br><span class="line">        sum = <span class="number">0</span>;k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">        <span class="keyword">while</span>(!pre.empty()) pre.pop();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/* 根据题意不能弹出本次加入的 */</span></span><br><span class="line">            <span class="comment">/* 根据题意应该不会在空的时候满足条件 */</span></span><br><span class="line">            <span class="comment">// int pre=inf;</span></span><br><span class="line">            <span class="comment">/*每弹出一个k++,所以每回收pre一个k--*/</span></span><br><span class="line">            <span class="comment">// while(!pre.empty()) pre.pop();</span></span><br><span class="line">            <span class="keyword">while</span>(!q.empty()&amp;&amp;sum+w[i]&gt;m)&#123;</span><br><span class="line">                k++;</span><br><span class="line">                pre.push(q.top());</span><br><span class="line">                sum-=q.top();</span><br><span class="line">                q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*输出*/</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==n)&#123; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            <span class="comment">/*回溯*/</span></span><br><span class="line">            ll tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* = 再想想*/</span></span><br><span class="line">            <span class="keyword">bool</span> f=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(!pre.empty()&amp;&amp;tmp+pre.top()&lt;=w[i])&#123;</span><br><span class="line">                f=<span class="number">1</span>;</span><br><span class="line">                tmp += pre.top();</span><br><span class="line">                q.push(pre.top());</span><br><span class="line">                k--;</span><br><span class="line">                pre.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*能加入一个就无需加本身了,要加回之前的sum值</span></span><br><span class="line"><span class="comment">            本身未加入的话就相当于弹出了一个k++*/</span></span><br><span class="line">            <span class="comment">/*不对,加回本身,让其在后面的循环中进入pre*/</span></span><br><span class="line">            <span class="comment">// if(f) sum += tmp,k++;</span></span><br><span class="line">            <span class="keyword">if</span>(f) sum += tmp;</span><br><span class="line">            q.push(w[i]);</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ss;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        ss.clear();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tem = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> suma = sum;</span><br><span class="line">            <span class="keyword">int</span> jishu = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">                <span class="comment">/* 这里用计数jishu记下软删除的数量，由于priority_queue</span></span><br><span class="line"><span class="comment">                只能访问第一个值，所以不支持软硬删除操作...所以会用真实删除再</span></span><br><span class="line"><span class="comment">                恢复的操作会TLE...因为这样会从O(nlog(n))魔化到O(n^2) */</span></span><br><span class="line">                <span class="comment">/* 由题意a[i]&lt;=m，满足下面条件时一定不会出现ss为空 */</span></span><br><span class="line">                <span class="keyword">while</span> (suma + a[i] &gt; m) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                    suma -= *j;</span><br><span class="line">                    jishu++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 第一个铁定是0的 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, jishu + tem);</span><br><span class="line">            ss.insert(a[i]);</span><br><span class="line">            <span class="keyword">auto</span> j = ss.end();</span><br><span class="line">            sum += a[i];</span><br><span class="line">            <span class="comment">/* 用tem记录下硬删除的数量 */</span></span><br><span class="line">            <span class="keyword">while</span> (sum &gt; m) &#123;</span><br><span class="line">                j--;</span><br><span class="line">                sum -= *j;</span><br><span class="line">                <span class="comment">/* 这里由于find返回的是指针，所以就会只删除一个值</span></span><br><span class="line"><span class="comment">                而不是删除数值那样把所有数值都删除掉 */</span></span><br><span class="line">                ss.erase(ss.find(*j));</span><br><span class="line">                tem++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树树空树插入维护初见"><a href="#线段树树空树插入维护初见" class="headerlink" title="线段树树空树插入维护初见"></a>线段树树空树插入维护初见</h1><p><strong>这个线段树标程真是魔鬼一般地折磨了我整整7个小时…菜鸡刚学线段树，还没有过插入空树的经历，然后这个std是插入空树…我好菜啊</strong></p><p><strong>所以放一发带思考注释的手抄代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line">ll <span class="keyword">int</span> a[M],number[M&lt;&lt;<span class="number">2</span>],bz[M&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> number2[M&lt;&lt;<span class="number">2</span>],bz2[M&lt;&lt;<span class="number">2</span>],to[M];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    ll b;</span><br><span class="line">&#125; no[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b==b.b ? a.id&lt;b.id : a.b&lt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自己重写std感觉上推数值好像还是不对，如果不理解的话，下次就算有板子也不能秒掉！</span></span><br><span class="line"><span class="comment">所以还是要先理解一下 ，多多重现算法*/</span></span><br><span class="line"><span class="comment">/* 先写着，等下写完全部看看有没有新的认识 */</span></span><br><span class="line"><span class="comment">/* 2019年7月30日16:59:35 还是不懂，维护区间之和难道不是要左右相加吗？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2019年7月30日20:34:57 突然灵光一闪！</span></span><br><span class="line"><span class="comment">因为你一开始是一棵空树，然后你一个个插入，如果使用的是max，就相当于(to[i],n+1)这个区间以及每个子区间</span></span><br><span class="line"><span class="comment">都是你的插入值的和.         因为都是直接到了叶子节点去加和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果使用加法，那么就出错了，就有很多重复计算，所以说[1-&gt;n]区间就是最大的前缀和</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">所以询问的时候就可以直接加和*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    number[rt] = max(number[rt&lt;&lt;<span class="number">1</span>],number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其实这里是多组测试的初始化0值 */</span></span><br><span class="line"><span class="comment">/* 但是number2不PushUp清零吗？这里好像有问题，但为什么std能AC</span></span><br><span class="line"><span class="comment">惊呆的发现竟然放在了pushdown下推标记的时候清零了...感觉线段树的写法真多*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    bz[rt]=bz2[rt]=number[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;number2[rt]=<span class="number">0</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bz[rt])&#123;</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>] += bz[rt];</span><br><span class="line">        number[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz[rt];</span><br><span class="line">        bz[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(bz2[rt])&#123;</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        number2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += bz2[rt];</span><br><span class="line">        bz2[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ll o,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        <span class="comment">/* 之前初始化成了0，所以这里可以这样...这个标程写得真随意... */</span></span><br><span class="line">        number2[rt]+=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 此节点(区段l,r)全被包含在内 */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line">        <span class="comment">/* 先自己赋值，下推标记就直接给儿子赋值 */</span></span><br><span class="line">        number[rt]+=o;</span><br><span class="line">        bz[rt]+=o;</span><br><span class="line">        bz2[rt] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* pushdown和PushUp都只管修改相邻层 */</span></span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="comment">/* 区段l,r包含L,R,或者有交叠,则访问子节点(子区段) */</span></span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) change(o,L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) change(o,L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> number2[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    pushdown(l,r,rt);</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; number[rt&lt;&lt;<span class="number">1</span>]) ans = query(k,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> ans = query(k,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        build(<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">            no[i].b = a[i];</span><br><span class="line">            no[i].id = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(no+<span class="number">1</span>,no+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="comment">/* 把与n+1有关的节点都打上number=1e9,number2=1的标记...</span></span><br><span class="line"><span class="comment">        只给n+1对应的叶子节点处打上了标记！其他地方没有进去过！</span></span><br><span class="line"><span class="comment">        就相当于在那里插入了一点*/</span></span><br><span class="line">        change(<span class="number">1e9</span>,n+<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) to[no[i].id] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="comment">/*一个个插入,第一个时还没插入，是空树，所以肯定返回0*/</span></span><br><span class="line">            ll k = query(m-a[i],<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>,i-k);</span><br><span class="line">            <span class="comment">/*按照队友的说法,那这里就是插入第一个*/</span></span><br><span class="line">            <span class="comment">/* 给排名在to[i]到n+1的地方都所有区段打上区间数值和number</span></span><br><span class="line"><span class="comment">            和此区间个数和number2 */</span></span><br><span class="line">            change(a[i],to[i],n+<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借鉴:</p><p><a href="https://www.icode9.com/content-1-370218.html" target="_blank" rel="noopener">C++&amp;STL&amp;multiset&amp;杭电多校第三场 1007 find the answer</a></p>]]></content>
    
    <summary type="html">
    
      priority_queue和multiset异同以及线段树树空树插入维护初见 [HDU-6609] 2019航电多校3-1007
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://www.wolfdan.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="STL" scheme="http://www.wolfdan.cn/tags/STL/"/>
    
      <category term="优先队列" scheme="http://www.wolfdan.cn/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
      <category term="multiset" scheme="http://www.wolfdan.cn/tags/multiset/"/>
    
  </entry>
  
  <entry>
    <title>AcWing-245.你能回答这些问题吗</title>
    <link href="http://www.wolfdan.cn/2019/07/30/AcWing-245-%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/"/>
    <id>http://www.wolfdan.cn/2019/07/30/AcWing-245-你能回答这些问题吗/</id>
    <published>2019-07-30T05:34:08.000Z</published>
    <updated>2019-07-30T05:55:29.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2019牛客杭电多校都把线段树当做最最最基础的知识点，杭电3甚至把线段树当做签到，然后我带偏了队友的思路…努力吧，全队荣辱与共!</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.acwing.com/problem/content/description/246/" target="_blank" rel="noopener">你能回答这些问题吗</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="线段树入门题-O-Mlog-N"><a href="#线段树入门题-O-Mlog-N" class="headerlink" title="线段树入门题 O(Mlog(N))"></a>线段树入门题 O(Mlog(N))</h2><h2 id="一步步思考线段树过程"><a href="#一步步思考线段树过程" class="headerlink" title="一步步思考线段树过程"></a>一步步思考线段树过程</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E4%B8%93%E9%A2%98/%E7%BA%BF%E6%AE%B5%E6%A0%91/Acwing245/%E6%89%8B%E5%86%99.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lmax,rmax,sum;</span><br><span class="line">    <span class="keyword">int</span> dat;</span><br><span class="line">&#125; t[SIZE&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a[SIZE],N,M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    t[p].sum = t[p*<span class="number">2</span>].sum + t[p*<span class="number">2</span>+<span class="number">1</span>].sum;</span><br><span class="line">    t[p].lmax = max(t[p*<span class="number">2</span>].lmax,t[p*<span class="number">2</span>].sum+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax);</span><br><span class="line">    t[p].rmax = max(t[p*<span class="number">2</span>+<span class="number">1</span>].rmax,t[p*<span class="number">2</span>+<span class="number">1</span>].sum+t[p*<span class="number">2</span>].rmax);</span><br><span class="line">    t[p].dat = max(t[p*<span class="number">2</span>].dat,max(t[p*<span class="number">2</span>+<span class="number">1</span>].dat,t[p*<span class="number">2</span>].rmax+t[p*<span class="number">2</span>+<span class="number">1</span>].lmax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123; t[p].sum=t[p].lmax=t[p].rmax=t[p].dat=a[l]; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);</span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[p].l==t[p].r)&#123;t[p].dat=t[p].sum=t[p].lmax=t[p].rmax=v;<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (t[p].l+t[p].r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) change(p&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">    <span class="keyword">else</span> change(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">    pushup(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int ask(int p,int l,int r)&#123;</span></span><br><span class="line"><span class="comment">//     if(l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) return t[p].dat;</span></span><br><span class="line"><span class="comment">//     int mid = (t[p].l + t[p].r)/2;</span></span><br><span class="line"><span class="comment">//     int val = -(1&lt;&lt;30);</span></span><br><span class="line"><span class="comment">//     if(l&lt;=mid) val = max(val,ask(p&lt;&lt;1,l,r));</span></span><br><span class="line"><span class="comment">//     if(r&gt;mid) val = max(val,ask(p&lt;&lt;1|1,l,r));</span></span><br><span class="line"><span class="comment">//     return val;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 此处感谢队友帮忙debug */</span></span><br><span class="line"><span class="function">SegmentTree <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&lt;=t[p].l &amp;&amp; r&gt;=t[p].r) <span class="keyword">return</span> t[p];</span><br><span class="line">    <span class="keyword">int</span> mid=(t[p].l+t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> val=-(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    SegmentTree a,b,c;</span><br><span class="line">    a.dat=a.sum=a.lmax=a.rmax=val;</span><br><span class="line">    b.dat=b.sum=b.lmax=b.rmax=val;</span><br><span class="line">    c.dat=c.lmax=c.rmax=val;</span><br><span class="line">    c.sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 要么都在最左边，要么都在最右边，要么跨越了左右，跨越了左右就要判断</span></span><br><span class="line"><span class="comment">    c.dat=max(max(a.dat,b.dat),a.rmax+b.lmax);</span></span><br><span class="line"><span class="comment">    这个点没想到会卡住 --&gt; 我就是从前面的注释的ask函数出错来的*/</span></span><br><span class="line">    <span class="keyword">if</span> (l&lt;=mid&amp;&amp;r&lt;=mid)&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 还要注意左区间r&lt;=mid,右区间l&gt;mid */</span></span><br><span class="line">    <span class="comment">// else if (l&gt;=mid&amp;&amp;r&gt;=mid)&#123;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (l&gt;mid&amp;&amp;r&gt;mid)&#123;</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        a=ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">        b=ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r);</span><br><span class="line">        c.sum+=a.sum+b.sum;</span><br><span class="line">    &#125;</span><br><span class="line">    c.dat=max(c.dat,max(max(a.dat,b.dat),a.rmax+b.lmax));</span><br><span class="line">    c.lmax=max(c.lmax,max(a.lmax,a.sum+b.lmax));</span><br><span class="line">    c.rmax=max(c.rmax,max(b.rmax,b.sum+a.rmax));</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,N);</span><br><span class="line">    <span class="keyword">int</span> i,x,y;</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;i&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;y) swap(x,y);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ask(<span class="number">1</span>, x, y).dat &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> change(<span class="number">1</span>,x,y);</span><br><span class="line">        <span class="comment">// for(int i=1;i&lt;=9;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;"dat: "&lt;&lt;t[i].dat&lt;&lt;" sum: "&lt;&lt;t[i].sum&lt;&lt;" lmax: "&lt;&lt;t[i].lmax&lt;&lt;" rmax: "&lt;&lt;t[i].rmax&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      线段树入门题 第一次手写线段树的各种踩坑
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="线段树" scheme="http://www.wolfdan.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>银联挑战赛初赛第二场B题</title>
    <link href="http://www.wolfdan.cn/2019/07/28/%E9%93%B6%E8%81%94%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B%E7%AC%AC%E4%BA%8C%E5%9C%BAB%E9%A2%98/"/>
    <id>http://www.wolfdan.cn/2019/07/28/银联挑战赛初赛第二场B题/</id>
    <published>2019-07-28T13:26:59.000Z</published>
    <updated>2019-07-28T13:38:37.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://nanti.jisuanke.com/t/40207" target="_blank" rel="noopener">码队弟弟的求和问题</a></p><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/B.png" alt></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/Bans.png" alt></p><h2 id="数论分块知识点"><a href="#数论分块知识点" class="headerlink" title="数论分块知识点"></a>数论分块知识点</h2><p><a href="https://taodaling.github.io/blog/2019/03/27/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/" target="_blank" rel="noopener">图片截取了大佬的blog</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/%E6%AF%94%E8%B5%9B/%E7%BA%BF%E4%B8%8A/%E9%93%B6%E8%81%94%E5%88%9D%E8%B5%9B2/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97%E7%9F%A5%E8%AF%86%E7%82%B9.png" alt></p><h2 id="手写AC代码"><a href="#手写AC代码" class="headerlink" title="手写AC代码"></a>手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll n,m;</span><br><span class="line">ll inv6;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*a%mod;</span><br><span class="line">        a = (a*a)%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll n)</span></span>&#123; <span class="keyword">return</span> n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*inv6%mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line">    <span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/*i=j+1,以及n/i要加括号*/</span></span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        <span class="comment">/*其实j不会大于n*/</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;n) j=n;</span><br><span class="line">        ans = (ans - (f(j)-f(i<span class="number">-1</span>))*(n/i)%mod + mod)%mod;</span><br><span class="line">        <span class="comment">/*只要保证每次相减时两个都是正数</span></span><br><span class="line"><span class="comment">        然后结果再来一次保证正数操作就不会出错*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    inv6 = qpow(<span class="number">6</span>,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    ll ans = solve(n)*solve(m)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜鸡我踩坑"><a href="#菜鸡我踩坑" class="headerlink" title="菜鸡我踩坑"></a>菜鸡我踩坑</h2><p>坑我35mins</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bug是因为除号必须在mod前！</span></span><br><span class="line">ll ans = (n*(n+<span class="number">1</span>)/<span class="number">2</span>%mod)*n;</span><br><span class="line"><span class="comment">// ll ans = n*n%mod*(n+1)/2%mod;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      银联挑战赛初赛第二场B题 数论分块 取模和除法在一起时候的坑点
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第14周-14-521</title>
    <link href="http://www.wolfdan.cn/2019/07/27/ARST%E6%89%93%E5%8D%A1%E7%AC%AC14%E5%91%A8-14-521/"/>
    <id>http://www.wolfdan.cn/2019/07/27/ARST打卡第14周-14-521/</id>
    <published>2019-07-27T10:33:33.000Z</published>
    <updated>2019-07-27T10:34:06.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/tree/master/2019.7/2019.7.26" target="_blank" rel="noopener">gogogo</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://onezero.medium.com/do-you-really-need-another-computer-monitor-a0534d37ba4a" target="_blank" rel="noopener">Do You Really Need Another Computer Monitor?</a></p><p>是啊，对于单一的工作，没有很多要素的工作一个屏幕就够了</p><p>但是对于需要很多要素的工作，比如一边看编程视频教学，一边跟着写这种要素很多的工作，有两个屏幕真的能提高自己的效率</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://blog.csdn.net/zearot/article/details/52280189" target="_blank" rel="noopener">线段树从零开始</a></p><p><a href="https://blog.csdn.net/zearot/article/details/48299459" target="_blank" rel="noopener">线段树详解</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/26/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/">2019牛客多校3 I</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第14周 线段树
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校3 I</title>
    <link href="http://www.wolfdan.cn/2019/07/26/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A13-I/"/>
    <id>http://www.wolfdan.cn/2019/07/26/2019牛客多校3-I/</id>
    <published>2019-07-26T05:50:20.000Z</published>
    <updated>2019-07-26T09:14:36.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://ac.nowcoder.com/acm/contest/883/I" target="_blank" rel="noopener">Median</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>3个数产生一个中位数，现在给你一串中位数，请还原出一个合理的原串</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>T组,每组给n表示原串的长度,然后是给你中位数串<code>b[1]-&gt;b[n-1]</code></p><p>范围: n的和不超过10^6,每个b不超过10^9</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>有合理的串则输出原串,否则输出-1</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>若存在合理的解,那么解的每个位置的最终值一定是它能影响到的3个中位数之一</strong></p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_1.png" alt></p><h2 id="Dp解法"><a href="#Dp解法" class="headerlink" title="Dp解法"></a>Dp解法</h2><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%89%E5%9C%BA/N3I_2.png" alt></p><h2 id="自己动手写AC代码"><a href="#自己动手写AC代码" class="headerlink" title="自己动手写AC代码"></a>自己动手写AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> pre[M][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> v[M][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b[M],a[M];</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tmp[<span class="number">3</span>];</span><br><span class="line">    tmp[<span class="number">0</span>]=x,tmp[<span class="number">1</span>]=y,tmp[<span class="number">2</span>]=z;</span><br><span class="line">    sort(tmp,tmp+<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> tmp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*回溯构造*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        a[i] = v[i][j];</span><br><span class="line">        <span class="keyword">int</span> pr = pre[i][j][k];</span><br><span class="line">        j = k;</span><br><span class="line">        k = pr;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        b[<span class="number">0</span>]=b[<span class="number">1</span>]=b[<span class="number">2</span>]; b[n+<span class="number">1</span>]=b[n]=b[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">                    f[i][j][k]=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">/*注意:我给的手写题解中a[3]对应b[1],b[2],b[3]</span></span><br><span class="line"><span class="comment">         我这里为了实现方便是用的对应b[2],b[3],b[4]*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                v[i][j]=b[i<span class="number">-1</span>+j];</span><br><span class="line">            &#125;</span><br><span class="line">            sort(v[i],v[i]+<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*边界条件: 前i-2个中位数(此时i=2为0个中位数)是满足条件的</span></span><br><span class="line"><span class="comment">          最终f[N][i][j]的时候的是N-2个中位数是否满足条件*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">                f[<span class="number">2</span>][i][j]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="keyword">bool</span> findans = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;<span class="number">3</span>;l++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!f[i<span class="number">-1</span>][k][l]) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">/*判断前面的位置和本位置使用与他们位置相关的</span></span><br><span class="line"><span class="comment">                        3个中位数的排列中哪些排列能够满足要求</span></span><br><span class="line"><span class="comment">                        v[i][j]对应的是b[i-1],b[i],b[i+1]中的一个*/</span></span><br><span class="line">                        <span class="keyword">if</span>(mid(v[i<span class="number">-2</span>][l],v[i<span class="number">-1</span>][k],v[i][j])!=b[i<span class="number">-1</span>])</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        f[i][j][k]=<span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">/*记录下前面使用的是l大的*/</span></span><br><span class="line">                        pre[i][j][k]=l;</span><br><span class="line">                        <span class="comment">/*break写完再探索-std中用了break</span></span><br><span class="line"><span class="comment">                        我认为应该遍历全部情况,所以去掉了break</span></span><br><span class="line"><span class="comment">                        然后两份代码都AC了,所以可能解唯一或者是按照std</span></span><br><span class="line"><span class="comment">                        生成的数据吧*/</span></span><br><span class="line">                        <span class="comment">// break;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==n &amp;&amp; f[i][j][k])&#123;</span><br><span class="line">                        findans = <span class="literal">true</span>;</span><br><span class="line">                        back(i,j,k);</span><br><span class="line">                        <span class="keyword">goto</span> END;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        END:</span><br><span class="line">        <span class="keyword">if</span>(!findans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">                assert(mid(a[i<span class="number">-1</span>],a[i],a[i+<span class="number">1</span>]) == b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i],<span class="string">" \n"</span>[i==n]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校3 I
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="多校" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="牛客" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第13周-13-521</title>
    <link href="http://www.wolfdan.cn/2019/07/22/ARST%E6%89%93%E5%8D%A1%E7%AC%AC13%E5%91%A8-13-521/"/>
    <id>http://www.wolfdan.cn/2019/07/22/ARST打卡第13周-13-521/</id>
    <published>2019-07-21T16:11:07.000Z</published>
    <updated>2019-07-22T04:58:31.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://github.com/wolfdan666/WolfEat3moreMeatEveryday/blob/master/2019.7/2019.7.21/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1H%E9%A2%98%E8%87%AA%E5%B7%B1%E5%86%99.cpp" target="_blank" rel="noopener">牛客多校中一题</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://medium.com/better-humans/rule-of-three-bad-ideas-arguments-and-brainstorming-ac0d06fbd4ee" target="_blank" rel="noopener">Rule of Three: Bad Ideas, Arguments and Brainstorming</a></p><p>When you do a brainstorm to solve a problem or generate an idea, you’ll always experience two sides. First you flare to generate as many ideas as possible. Then you focus to decide on the one path that you’re actually going to execute on.</p><p>确实,做决定的时候要好好选择,别人批评,自己选择,选择好然后专注做下去,自己负责</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://gitpress.io/c/dir_zhai/2018-09-09#article-top" target="_blank" rel="noopener">我再也不装扮博客了</a></p><p><a href="https://www.wolfdan.cn/2019/07/16/%E7%9C%9F%E7%9A%84%E6%9C%89%E5%BF%85%E8%A6%81%E6%8A%8A%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%90%97%EF%BC%9F/">那我也不装了</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/19/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/">2019牛客多校第一场补题笔记</a></p><p><a href="https://www.wolfdan.cn/2019/07/21/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/">2019牛客多校第二场补题笔记</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第13周(13/521)
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校第二场补题笔记</title>
    <link href="http://www.wolfdan.cn/2019/07/21/2019%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%BA%8C%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.wolfdan.cn/2019/07/21/2019牛客多校第二场补题笔记/</id>
    <published>2019-07-21T05:20:59.000Z</published>
    <updated>2019-07-22T04:58:31.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/882#question" target="_blank" rel="noopener">2019牛客多校第二场</a></p><h1 id="background"><a href="#background" class="headerlink" title="background"></a>background</h1><h2 id="出题人-sd0061"><a href="#出题人-sd0061" class="headerlink" title="出题人:sd0061"></a>出题人:sd0061</h2><p>赵轩昂，北京航空航天大学，WorldFinal 2015/2016</p><h2 id="Eddy"><a href="#Eddy" class="headerlink" title="Eddy"></a>Eddy</h2><p>好像就是出题人的电脑用户名</p><h2 id="出题评价"><a href="#出题评价" class="headerlink" title="出题评价"></a>出题评价</h2><p>题目对我这个菜鸡来说较难，题意复杂</p><h2 id="讲题评价"><a href="#讲题评价" class="headerlink" title="讲题评价"></a>讲题评价</h2><p>逻辑清晰，对每一题的讲解由浅入深，对时间复杂度不断优化精细讲解，层层入深，获得大家的一致好评(只是目前我这个菜鸡对于很多<code>浅</code>的地方还没学好甚至还没学过，所以补补补o(╥﹏╥)o)</p><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><ul><li>Eddy大佬走路 <code>先让0-&gt;N-1都有标记</code> -&gt; 第i天走一圈需要Ni步(每天脚长不一样还行),可以前进和后退,然后收集完所有标记(每个地方都有标记,即0-&gt;N-1处都是标记)就立马感到无聊了就立马回去吃饭睡觉打豆豆(你的记录值中Eddy大佬走到Mi就算是收集完了所有的标记)</li><li>你每天观摩大佬走路(giao)</li><li>你复查数据的时候，你不确定到底数据是不是对的，然后你想知道这些天的数据正确的可能性(所以很自然的知道后面为什么要你输出前缀积,原来写笔记确实可以加深理解奥)</li></ul><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ul><li>T组测试(T天的观测)</li><li>然后每组测试都是给你Ni和Mi(每天Eddy的走路信息)</li></ul><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><ul><li>输出前i天的数据都正确的可能性(也就是每天可能性之积)</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>Corner Case:<ul><li>当N=1的时候，也就是1步就可以走完一圈，无论Eddy大佬前进还是后退，肯定是1步走完(这样肯定收集完了所有的标记),所以可能性为1</li><li>当M=0的时候，你记录的是Eddy大佬在0处就收集完了所有的标记,这是不可能，因为Eddy大佬一开始从0出发，所以一开始就已经拥有0号标记了,<strong>而一旦Eddy收集完所有的标记之后必定会立马回家,所以离开的地方的那个标记一定是最后收集到的,而且是第一次收集到的那个标记</strong>，所以你记录值为0显然是错的,所以可能性是0</li></ul></li><li>一般情况(N非1,M非0)<ul><li>有了上面M=0的理解，这里就好理解了，因为Eddy大佬一开始从0出发,然后Eddy大佬可以前进也可以后退，所以Eddy大佬最后一个到达的点可以是非0的其他任意一个点，所以最后到达每个点的可能性都是等概的，也就是<code>1/(N-1)</code></li></ul></li><li>对了，输出的是前i的概率积</li></ul><h2 id="AC代码-自己再手写一遍收获更多"><a href="#AC代码-自己再手写一遍收获更多" class="headerlink" title="AC代码(自己再手写一遍收获更多)"></a>AC代码(自己再手写一遍收获更多)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    a *= b;</span><br><span class="line">    <span class="keyword">return</span> a&gt;=mod?a%mod:a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    ll ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) ret = mul(a,ret);</span><br><span class="line">        <span class="comment">/* b&gt;&gt;1,那么a就要变成a*a */</span></span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = mul(a,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a)</span></span>&#123; <span class="keyword">return</span> qpow(a,mod<span class="number">-2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n,ll m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> inv(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">/*init*/</span></span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        ans = mul(ans,solve(n,m));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>emmmm,看懂了一点点题解,但是对于题解中的BM完全不熟悉,所以先留坑</p><h1 id="C-D自己太菜了-留坑"><a href="#C-D自己太菜了-留坑" class="headerlink" title="C,D自己太菜了,留坑"></a>C,D自己太菜了,留坑</h1><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>emmmm,看懂了一点点题解,但是还是不太熟悉基础的算法,我先去补基础的算法,留坑</p><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定2N个人,(N &lt;= 14),两两间有边权,把这2N个人分为2组,每组N个,求两组间的边权和最大</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>朴素法(也称暴力法),在新加入一个人的时候，比如说加入了A组，那么直接将它与B组间已经有的所有人的边权加一遍</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> d[M][M];</span><br><span class="line"><span class="keyword">int</span> a[M],b[M];</span><br><span class="line"><span class="keyword">int</span> cnt1,cnt2;</span><br><span class="line">ll ans;<span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,ll val)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*当达到2*N+1的时候,正好已经插入了2*N个人了,所以开始比较*/</span></span><br><span class="line">    <span class="keyword">if</span>(cur&gt;<span class="number">2</span>*N)&#123; ans = max(ans,val);<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt1&lt;N)&#123;</span><br><span class="line">        a[cnt1++]=cur;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*每次加入了cnt1之后,就要把左边队伍新加人与对面队伍当下所有人产生的竞争值加入左边队伍*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt2;i++) tmp+=d[cur][b[i]];</span><br><span class="line">        dfs(cur+<span class="number">1</span>,val+tmp);</span><br><span class="line">        <span class="comment">/*上面的遍历return之后要恢复现场,即之前产生的影响要消除掉,避免对后面的操作有影响*/</span></span><br><span class="line">        cnt1--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt2&lt;N)&#123;</span><br><span class="line">        b[cnt2++]=cur;</span><br><span class="line">        ll tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*每次加入了cnt2之后,就要把右边队伍新加人与对面队伍当下所有人产生的竞争值加入右边队伍*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt1;i++) tmp+=d[a[i]][cur];</span><br><span class="line">        dfs(cur+<span class="number">1</span>,val+tmp);</span><br><span class="line">        cnt2--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*N;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;d[i][j];</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*像一颗树一样遍历下去,然后到达叶子的时候进行比较出最大值再返回*/</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G计算几何-留坑"><a href="#G计算几何-留坑" class="headerlink" title="G计算几何,留坑"></a>G计算几何,留坑</h1><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定一个N*M的01矩阵(1&lt;=N,M&lt;=1000),求第二大全是1的矩阵面积</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><ul><li>枚举每一行，以当前行为底，记录每一列往上不间断最多延长多远，那么这样之后就变成了一维的柱状图求最大/次大/k大矩形面积，可用单调栈求解</li><li>由于要记录第二大,之前求最大的做法(<a href="https://vjudge.net/problem/POJ-2559" target="_blank" rel="noopener">poj2559</a>)是直接用max维护ans,<strong>width合并</strong>的做法在这里就要改成把所有解先丢进一个vector(之后排序复杂度 <code>ans个数 * log(ans个数)</code>)(或者维护一个k大的小值优先的priority_queue,复杂度算上维护也是<code>ans个数 * log(ans个数)</code>)</li><li>但是这里必须把<code>(width-1)*ddz[top]</code>也放入状态级,因为求第二大,所以只要把次大状态加入(详细原因看下面说的坑点)</li><li>所以推荐使用把全状态扔进vector，这样还可以求第k大，虽然慢点</li></ul><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p><strong>图中最后一行样例的dp的单调栈</strong><br>这里是小于也没有用，因为1会占据掉3的宽度，而且仍为高度1，之后就在0到来的时候累加宽度 <strong>(宽度直接从4加到了6，跳过了5,因为1之前会占据掉3的宽度)</strong>，然后就会无视掉<br>矩阵面积是5的情况！！！</p><p>所以用width会导致状态数减少，这里求第二大可以把width-1的状态也加入，从而达到正确答案并减少了一定状态数</p><p>不过还是推荐使用全状态，就是用cnt++，把所有状态放入vector，这样就可以求出第k大<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%BA%8C%E5%9C%BA/H.png" alt></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 10</span></span><br><span class="line"><span class="comment">0100101100</span></span><br><span class="line"><span class="comment">0010110110</span></span><br><span class="line"><span class="comment">1000011110</span></span><br><span class="line"><span class="comment">1000110010</span></span><br><span class="line"><span class="comment">1111110010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> dp[M][M];</span><br><span class="line"><span class="keyword">int</span> ddz[M],w[M];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    ddz[top] = <span class="number">-1</span>;</span><br><span class="line">    f[m+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">/*等于时是否弹出这需要自己注意一下,就是严不严格单调的选择*/</span></span><br><span class="line">        <span class="keyword">if</span>(ddz[top]&lt;f[i]) ddz[++top]=f[i],w[top]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/*此处注意要先加宽度*/</span></span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;f[i]&lt;ddz[top])&#123; width+=w[top],ans.push_back(ddz[top]*width),ans.push_back(ddz[top]*(width<span class="number">-1</span>));top--;&#125;</span><br><span class="line">            <span class="comment">/*我的做法是 : 等于是加入,不严格单调*/</span></span><br><span class="line">            ddz[++top]=f[i],w[top]=width+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*推荐下面的方法*/</span></span><br><span class="line">        <span class="comment">// if(ddz[top] &lt;= f[i]) ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">// else &#123;</span></span><br><span class="line">        <span class="comment">//     int cnt = 0;</span></span><br><span class="line">        <span class="comment">//     /*然后这里可以写宽度进行优化*/</span></span><br><span class="line">        <span class="comment">//     while(top &amp;&amp; ddz[top] &gt; f[i]) &#123;</span></span><br><span class="line">        <span class="comment">//         cnt++;</span></span><br><span class="line">        <span class="comment">//         ans.push_back(ddz[top] * cnt);</span></span><br><span class="line">        <span class="comment">//         top--;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     while(cnt--) ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">//     ddz[++top] = f[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[M];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">        <span class="comment">/*init*/</span></span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">/*对于每一列的每一行进行连续高度扫描*/</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">            <span class="comment">/*此行非0,则可以接上上面连续来的高度(可能为0)*/</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) dp[i][j] = c[j<span class="number">-1</span>] == <span class="string">'0'</span>? <span class="number">0</span> : dp[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for(int i = 1;i&lt;=n;i++) &#123;for(int j=1;j&lt;=m;j++) cout&lt;&lt;dp[i][j]; cout&lt;&lt;endl;&#125; cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">/*solve*/</span></span><br><span class="line">        <span class="comment">/*对每一行进行直方图扫描求解*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) solve(dp[i]);</span><br><span class="line">        sort(ans.begin(),ans.end());</span><br><span class="line">        <span class="comment">/*考虑特例*/</span></span><br><span class="line">        <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">        <span class="keyword">if</span>(sz&lt;=<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[sz<span class="number">-2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I听Eddy大佬说有7种dp-太难留坑"><a href="#I听Eddy大佬说有7种dp-太难留坑" class="headerlink" title="I听Eddy大佬说有7种dp,太难留坑"></a>I听Eddy大佬说有7种dp,太难留坑</h1><h1 id="J也太难留坑"><a href="#J也太难留坑" class="headerlink" title="J也太难留坑"></a>J也太难留坑</h1>]]></content>
    
    <summary type="html">
    
      2019牛客多校第二场补题笔记 单调栈
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="多校" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="牛客" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2019牛客多校第一场补题笔记</title>
    <link href="http://www.wolfdan.cn/2019/07/19/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA%E8%A1%A5%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.wolfdan.cn/2019/07/19/牛客多校第一场补题笔记/</id>
    <published>2019-07-19T07:28:02.000Z</published>
    <updated>2019-07-20T03:54:48.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p><a href="https://ac.nowcoder.com/acm/contest/881#question" target="_blank" rel="noopener">2019牛客多校第一场</a></p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a>A题</h1><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>知道了单调栈，那么第一题就很好解决了，就是两个串到每个位置都比较一下前面的最小值的下标是否相等(用单调栈来实现–后面讲)，如果相等则继续，如果都没有找到就是都是自己最小，也用单调栈处理成为相等，如果遇到不相等，那么i-1就是题目所要求出来的k的值</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/A%2B.png" alt="A+"></p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>单调栈的一大优势就是<strong>线性的时间复杂度</strong>，所有的元素只会进栈一次，而且一旦出栈后就不会再进来了。</p><p><strong>单调递增栈可以找到左起第一个比当前数字小的元素</strong>。比如数组 [2 1 4 6 5]，刚开始2入栈，数字1入栈的时候，发现栈顶元素2比较大，将2移出栈，此时1入栈。那么2和1都没左起比自身小的数字。然后数字4入栈的时候，栈顶元素1小于4，于是1就是4左起第一个小的数字。此时栈里有1和4，然后数字6入栈的时候，栈顶元素4小于6，于是4就是6左起第一个小的数字。此时栈里有1，4，6，然后数字5入栈的时候，栈顶元素6大于5，将6移除，此时新的栈顶元素4小于5，那么4就是5左起的第一个小的数字，最终栈内数字为 1，4，5。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* L是输出端，然后s是辅助数组,c是源数组 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span>* L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    s[<span class="number">0</span>] = node&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">/*找到向左走第一个比它小的数 */</span></span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; s[top].val &gt;= c[i]) top--;</span><br><span class="line">        L[i] = s[top].id;</span><br><span class="line">        s[++top] = node&#123;i, c[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:<br><a href="https://www.cnblogs.com/grandyang/p/8887985.html" target="_blank" rel="noopener">https://www.cnblogs.com/grandyang/p/8887985.html</a></p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>代码是队友写的,orz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> id; <span class="keyword">int</span> val; &#125;;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> l1[maxn], l2[maxn];</span><br><span class="line">node s[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* L是输出端，然后s是辅助数组,c是源数组 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>* c, <span class="keyword">int</span>* L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    s[<span class="number">0</span>] = node&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">/*找到向左走第一个比它小的数 */</span></span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; s[top].val &gt;= c[i]) top--;</span><br><span class="line">        L[i] = s[top].id;</span><br><span class="line">        s[++top] = node&#123;i, c[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        solve(a, l1); solve(b, l2);</span><br><span class="line">        <span class="keyword">int</span> ans = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1[i] != l2[i]) &#123;</span><br><span class="line">                ans = i<span class="number">-1</span>;</span><br><span class="line">                <span class="comment">// ans = n-1;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><p><a href="https://www.cnblogs.com/Dillonh/p/11209476.html?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">看到大佬的分析</a></p><h1 id="C题，D题"><a href="#C题，D题" class="headerlink" title="C题，D题"></a>C题，D题</h1><p>能力有限，战略计划原因没有补这两题</p><h2 id="C题解推荐"><a href="#C题解推荐" class="headerlink" title="C题解推荐"></a>C题解推荐</h2><p><a href="https://blog.nowcoder.net/n/1539da6d6d6e47a6998b5c6f5bba2167" target="_blank" rel="noopener">C题可以看大佬的题解</a></p><h1 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN+<span class="number">5</span>][MAXN+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)</span><br><span class="line">                dp[i][j]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n+m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=j+n&amp;&amp;j&lt;=i+m)</span><br><span class="line">                    dp[i+<span class="number">1</span>][j]=(dp[i+<span class="number">1</span>][j]+dp[i][j])%MOD;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=j+n&amp;&amp;j+<span class="number">1</span>&lt;=i+m)</span><br><span class="line">                    dp[i][j+<span class="number">1</span>]=(dp[i][j+<span class="number">1</span>]+dp[i][j])%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n+m][n+m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="图片以及思路转载-少量整理-感谢"><a href="#图片以及思路转载-少量整理-感谢" class="headerlink" title="图片以及思路转载+少量整理+感谢"></a>图片以及思路转载+少量整理+感谢</h2><p>借鉴两位大佬的思路和博文进行整理的，感谢<br><a href="https://blog.csdn.net/Izayoi_w/article/details/96475077" target="_blank" rel="noopener">Izayoi_w</a><br><a href="https://www.cnblogs.com/WAautomaton/p/11211864.html" target="_blank" rel="noopener">WAautomaton</a></p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F1.png" alt="F1"><br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F2.png" alt="F2"></p><p>题目要求36*E，而E = (22/36) * S，所以ans = 22 * S</p><p>关于三角形的面积，已知三个顶点坐标，我们可以用叉积来求，如ΔABC，S = (1/2) * ( 向量(AB) ✖ 向量(AC) )。</p><p>这里要注意，叉积有正有负，最终的答案为11倍叉积的绝对值。</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E7%AE%97%E6%B3%95/2019%E5%B9%B4%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/%E7%AC%AC%E4%B8%80%E5%9C%BA/F3.png" alt="F3"></p><h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll x1, y1, x2, y2, x3, y3;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3) &#123;</span><br><span class="line">        ll res = <span class="number">11</span>*((x1-x2)*(y3-y2)-(y1-y2)*(x3-x2));</span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) res = -res;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-H-I因己太菜先留坑"><a href="#G-H-I因己太菜先留坑" class="headerlink" title="G,H,I因己太菜先留坑"></a>G,H,I因己太菜先留坑</h1><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>解法一: 直接交叉相乘</p><p>解法二: 直接看出题人叉姐的解法<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E8%B6%A3%E8%B0%88linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/%E7%94%A8%E6%88%B7%E6%80%81/%E5%8F%89%E5%A7%90%E5%87%BA%E9%A2%98%E7%9A%84%E5%AE%98%E6%96%B9%E8%A7%A3%E6%B3%95.png" alt></p><h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, a, y, b;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld %lld"</span>, &amp;x, &amp;a, &amp;y, &amp;b) != EOF) &#123;</span><br><span class="line">        ll p = x; p *= b;</span><br><span class="line">        ll q = y; q *= a;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; q) <span class="built_in">printf</span>(<span class="string">"&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == q) <span class="built_in">printf</span>(<span class="string">"=\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"&lt;\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2019牛客多校第一场补题笔记 单调栈
    
    </summary>
    
      <category term="算法" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="多校" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="牛客" scheme="http://www.wolfdan.cn/categories/%E7%AE%97%E6%B3%95/%E5%A4%9A%E6%A0%A1/%E7%89%9B%E5%AE%A2/"/>
    
    
      <category term="算法" scheme="http://www.wolfdan.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>真的有必要把文章发布到多个平台吗？</title>
    <link href="http://www.wolfdan.cn/2019/07/16/%E7%9C%9F%E7%9A%84%E6%9C%89%E5%BF%85%E8%A6%81%E6%8A%8A%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%B9%B3%E5%8F%B0%E5%90%97%EF%BC%9F/"/>
    <id>http://www.wolfdan.cn/2019/07/16/真的有必要把文章发布到多个平台吗？/</id>
    <published>2019-07-16T13:23:08.000Z</published>
    <updated>2019-07-16T14:26:06.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如题"><a href="#如题" class="headerlink" title="如题"></a>如题</h1><p>真的需要把自己的文章发布到多个网站平台吗？比如WordPress，Hexo，CSDN，知乎，简书，博客园，sf，开源中国等等…</p><p>说实话，我也不知道具体答案，因为答案总是和个人情况有关的</p><h1 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h1><p>我之前看<code>李自然说</code>的视频，他说<strong>自媒体的运营应该全平台覆盖,把公域流量变成自己的私域流量</strong>，然后我也就开始了每次写一篇文章就风风火火地把自己的文章发布到自己wordpress，自己的hexo，自己的简书，自己的CSDN，自己的知乎，而且还在自己的关于界面写上了欢迎加我微信，然后一起拉群讨论…</p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>今天，是放暑假的第5天，大家都回家了，当然还有很多巨佬在疯狂地自学，我昨天连续学了3个小时技术，然后做了8个小时的算法，感觉很开心，但是今天上午睡过头，今天下午和晚上因为增强看板娘的事情，以及处理gitee大于上传100M出现了问题导致自己今天到9点都没有刷算法题，然后此时写完一篇博文，准备写算法，然后一想到自己还有4个平台没有上传自己的博文……开始思考自己是不是要把其他的平台停止更新了</p><h1 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h1><ol><li>感觉自己并不想通过写个人博客来转化变现，只想自己整理一些东西，然后分享给大家，所以也就不那么想去花太多时间运维什么的了</li><li>搞这么多东西其实和我真正要做的人生五件事是完全无关的！所以以后不仅不能花太多时间在这个无关的事情上面，而且还要想见了鬼一样地避开这些事情…</li><li>所以以后就用Hexo做笔记的整理与环境搭建的记录，然后值得分享的技术文档就发布到CSDN上面去，因为CSDN越做越好了，而且它的SEO做得最好(怪不得广告多…槽点…不过这也是生命线,无可厚非)，符合我分享给大家的意愿，然后用coding的私人仓库和wordpress小站来做备份…</li></ol><h1 id="询问"><a href="#询问" class="headerlink" title="询问"></a>询问</h1><p>你们怎么取舍的呢？</p>]]></content>
    
    <summary type="html">
    
      关于个人建站之后自己的一些思索
    
    </summary>
    
      <category term="思索" scheme="http://www.wolfdan.cn/categories/%E6%80%9D%E7%B4%A2/"/>
    
    
      <category term="思索" scheme="http://www.wolfdan.cn/tags/%E6%80%9D%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>git reset 和 git reset --hard区别</title>
    <link href="http://www.wolfdan.cn/2019/07/16/git-reset-%E5%92%8C-git-reset-hard-%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.wolfdan.cn/2019/07/16/git-reset-和-git-reset-hard-区别/</id>
    <published>2019-07-16T12:16:31.000Z</published>
    <updated>2019-07-16T13:19:09.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-reset-和-git-reset-hard区别"><a href="#git-reset-和-git-reset-hard区别" class="headerlink" title="git reset 和 git reset --hard区别"></a><code>git reset</code> 和 <code>git reset --hard</code>区别</h1><h2 id="先说知识点"><a href="#先说知识点" class="headerlink" title="先说知识点"></a>先说知识点</h2><blockquote><p>有时候，进行了错误的提交，但是还没有push到远程分支，想要撤销本次提交，可以使用git reset –-soft/hard命令</p></blockquote><h3 id="缺省情况"><a href="#缺省情况" class="headerlink" title="缺省情况"></a>缺省情况</h3><p><code>git reset</code>缺省为<code>git reset --soft</code></p><h3 id="二者区别："><a href="#二者区别：" class="headerlink" title="二者区别："></a>二者区别：</h3><ul><li><code>git reset –-soft</code>：回退到某个版本，<strong>只回退了commit的信息，不会恢复到index file一级</strong>。如果还要提交，直接commit即可</li><li><code>git reset -–hard</code>：<strong>彻底回退到某个版本</strong>，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉</li></ul><h2 id="我忘了知识点踩坑"><a href="#我忘了知识点踩坑" class="headerlink" title="我忘了知识点踩坑"></a>我忘了知识点踩坑</h2><h3 id="沙雕认为"><a href="#沙雕认为" class="headerlink" title="沙雕认为"></a>沙雕认为</h3><ol><li><p>当下情况:最新版本的100M压缩包已经在本地删除，但是本地版本库中之前有个版本中还有，所以git push到gitee会被拒收..但是git一定要先传输完前面的版本之后再传后面的修改(所以我要帮git本地仓库手动执行git rm前面版本的文件，或者忘了文件名，通过下面3的复杂的操作，来完成此项操作)</p></li><li><p>真的不知道怎么去掉本地仓库的4commit，因为去不掉的话就会先向远程库提交超100M文件然后被拒接，所以原地重复…</p></li><li><p>然后如果git rm 忘了那个压缩包的名字了，所以直接回退版本到昨天的样子，然后再git reflog回来并展示今天的所有修改，git checkout归还所有修改，然后把今天的修改备份，之后再回到昨天的版本库，然后重新提交今天的内容，除了你个超过100M的压缩包</p></li></ol><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/git/git%20reset/%E6%80%BB%E7%BB%93.png" alt></p><h3 id="慢慢懂了"><a href="#慢慢懂了" class="headerlink" title="慢慢懂了"></a>慢慢懂了</h3><p>奇怪，最后一次版本回退又没有删除本地文件，可能是因为恢复过？</p><p>原来是git reset –hard 和 git reset –soft的区别</p><p>所以我幸幸苦苦寻找了好久的取消commit而不影响工作区就是git reset –soft</p><p>真是汗啊，因为用得少，所以学了又忘了，所以现在踩一遍坑，使得自己更深刻了，也提醒了自己  对于基础知识  还是要多重复，学习多次，不断加深记忆，或者很可能还是会踩坑</p><p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/linux/git/git%20reset/git%20reset%E8%BD%AF%E7%A1%AC%E5%B7%AE%E5%88%AB.png" alt></p><p>参考：<a href="https://blog.csdn.net/yangfengjueqi/article/details/61668381" target="_blank" rel="noopener">https://blog.csdn.net/yangfengjueqi/article/details/61668381</a></p>]]></content>
    
    <summary type="html">
    
      git reset 和 git reset --hard区别 gitee不支持上传100M以上的文件造成重复的提交失败怎么办
    
    </summary>
    
      <category term="git" scheme="http://www.wolfdan.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://www.wolfdan.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>makedown写作超方便的图片使用方式</title>
    <link href="http://www.wolfdan.cn/2019/07/14/makedown%E5%86%99%E4%BD%9C%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84%E5%9B%BE%E7%89%87%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.wolfdan.cn/2019/07/14/makedown写作超方便的图片使用方式/</id>
    <published>2019-07-14T07:46:09.000Z</published>
    <updated>2019-07-15T01:31:43.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><blockquote><p>写makedown用图片的时候总是在上传图床的时候，以及使用图片链接的时候会感觉有一些麻烦</p></blockquote><p>我以前使用的是，github图床通过手动git上传,然后自己再一个个去打开github的图片的download的页面去获取图片的分享链接—自己也觉得很麻烦，但是我的小站目标是人在站在，人不在，站希望也还在的战略目标，所以追求的极致的稳定，而不是一时的快速，所以没有使用那些可以直接粘贴上传到免费图床的操作，因为我怕指不定哪一天这种图床没有消息地就倒闭了，那我的数据就这样没了，小站将遭到巨大的打击，所以我还是慢慢使用这种方式用了3个月，知道我听学长说用七牛云太方便了，还能加速网站加载速度，所以我今天也花了许多时间了解七牛云，发现七牛云确实有免费的10G图床和每月10G的加速流量，但是我觉得这样的加速在前期是很好的，不过有个小问题就是你不自定义域名的话到时候可能失效(自定义域名要备案，腾讯云的域名备案又要买腾讯云的服务器…),而且10G对于我的小站战略来说有点不合适，所以就抛弃了，然后无意看到了<strong>PicGo+github图床</strong>，于是了解了一下，操作了一下，发现是我要找的靓仔啊！</p><h1 id="使用PicGo上传图库"><a href="#使用PicGo上传图库" class="headerlink" title="使用PicGo上传图库"></a>使用PicGo上传图库</h1><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">在GitHub的最新发布页面下载</a></p><p>博主本人是windows，所以下载的.exe文件直接安装就可以了</p><h2 id="配置起来"><a href="#配置起来" class="headerlink" title="配置起来"></a>配置起来</h2><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A" target="_blank" rel="noopener">使用官方文档找到GitHub图床配置进行必要的配置</a></p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ul><li>仓库名是<code>用户名/仓库名</code></li><li>指定存储路径是以仓库为根目录的远程仓库存储路径(可以先在本地仓库先创建一个文件夹，然后再文件夹下创建一个readme.md(为什么？看下面的小发现)，然后git push,这样就是设置这个文件夹了)</li><li>github图床好像是不支持直接自定义域名的,我试过了,如果有朋友知道的希望能告知，谢谢</li></ul><h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%88%91%E7%9A%84%E9%85%8D%E7%BD%AE.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%88%91%E7%9A%84%E9%85%8D%E7%BD%AE.png" width="50%" height="50%"></a><h3 id="小发现"><a href="#小发现" class="headerlink" title="小发现"></a>小发现</h3><p>本地文件夹如果没有文件的话，远程仓库对应的这个文件夹是不会生成的，所以以后最好新建文件夹都写一个<code>readme.md</code></p><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E7%A1%AE%E5%AE%9E%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%A5%E5%90%8E%E6%9C%80%E5%A5%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%86%99%E4%B8%80%E4%B8%AAreadme.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E7%A1%AE%E5%AE%9E%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%94%9F%E6%88%90%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%A5%E5%90%8E%E6%9C%80%E5%A5%BD%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E9%83%BD%E5%86%99%E4%B8%80%E4%B8%AAreadme.png" width="50%" height="50%"></a><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p>这个应该大家配置不出问题，这里都会用的</p><h2 id="复制链接使用"><a href="#复制链接使用" class="headerlink" title="复制链接使用"></a>复制链接使用</h2><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" width="50%" height="50%"></a><h1 id="VScode写makedown使用snippets"><a href="#VScode写makedown使用snippets" class="headerlink" title="VScode写makedown使用snippets"></a>VScode写makedown使用snippets</h1><p>我发现我的使用了hexo的fancybox3之后，有一个图集的功能，很是炫酷，但是每次图片粘贴要很复杂的输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&quot; data-fancybox=&quot;images&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>于是我就想到了snippets</p><h2 id="预警"><a href="#预警" class="headerlink" title="预警"></a>预警</h2><p>如果用了除hexo以外的其他平台，请谨慎使用我的snippets代码！因为<code>data-fancybox=&quot;images&quot;</code>这个图集功能只能用在hexo, 但是可以用于其他的snippets啊</p><h2 id="配置snippets"><a href="#配置snippets" class="headerlink" title="配置snippets"></a>配置snippets</h2><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">去官网看配置</a></p><h2 id="贴一下我的配置"><a href="#贴一下我的配置" class="headerlink" title="贴一下我的配置"></a>贴一下我的配置</h2><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/makedownSnippetConfig.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/makedownSnippetConfig.png" width="50%" height="50%"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"Mypic":&#123;</span><br><span class="line">"prefix":[</span><br><span class="line">"pic",</span><br><span class="line"><span class="string">"pic-snippets"</span></span><br><span class="line">],</span><br><span class="line">"body": [</span><br><span class="line">"&lt;a href=\"$&#123;1&#125;\" data-fancybox=\"images\"&gt;",</span><br><span class="line">"\t&lt;img src=\"$&#123;1&#125;\" width=\"50%\" height=\"50%\" /&gt;",</span><br><span class="line">"&lt;/a&gt;",</span><br><span class="line"><span class="string">"$0"</span></span><br><span class="line">],</span><br><span class="line">"description": "Use my images fancybox3"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="开启makedown的snippets使能！"><a href="#开启makedown的snippets使能！" class="headerlink" title="开启makedown的snippets使能！"></a>开启makedown的snippets使能！</h2><p>其实VScode是默认关掉了makedown的snippets的使能的！但是你却找不到配置，我在网上找了好久，发现一个大神写了出来，可能是他去提交过issue吧,下面开始解决(昨天被这个问题坑了好久)</p><ol><li>进入<code>文件-&gt;首选项-&gt;设置-&gt;打开代码配置</code></li></ol><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%89%93%E5%BC%80%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/%E6%89%93%E5%BC%80%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.png" width="50%" height="50%"></a><ol start="2"><li>进入setting，输入makedown</li></ol><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/snippets/%E8%BF%9B%E5%85%A5setting%EF%BC%8C%E8%BE%93%E5%85%A5makedown.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/snippets/%E8%BF%9B%E5%85%A5setting%EF%BC%8C%E8%BE%93%E5%85%A5makedown.png" width="50%" height="50%"></a><ol start="3"><li>配置成true，have fun</li></ol><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/snippets/%E6%9C%80%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/snippets/%E6%9C%80%E5%90%8E%E7%9A%84%E6%A0%B7%E5%AD%90.png" width="50%" height="50%"></a><h1 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h1><h2 id="电脑重启？"><a href="#电脑重启？" class="headerlink" title="电脑重启？"></a>电脑重启？</h2><p> 2019年7月14日16:41:04 写了50mins后，电脑自动关机，重启电脑，看着文档白茫茫的一片，内心一万只草泥马在奔腾…去你大爷的本地写作，就连最基本的hexo新建文章后的信息也不给我留，是个狠人！不想写VScode的snippets的写作方式了—-&gt; 跑到coding的备份库一看，还有20mins的工作量被保存，还好一点点吧</p><ol><li>努力学习，努力赚钱，换一个不会莫名其妙重启的电脑</li><li>写作一定要多多保存备份</li><li>可以在网站上写makedown，然后把snippets复制粘贴到网上的makedown上面，这样就重分利用了网站的自动及时保存的功能</li></ol><h2 id="发现snippets的图集功能不是所有平台的makedown通用的"><a href="#发现snippets的图集功能不是所有平台的makedown通用的" class="headerlink" title="发现snippets的图集功能不是所有平台的makedown通用的"></a>发现snippets的图集功能不是所有平台的makedown通用的</h2><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/wordpress%E4%B8%8D%E8%83%BD%E7%94%A8%E5%9B%BE%E9%9B%86%E5%8A%9F%E8%83%BD.png" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/write%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%86%99%E4%BD%9C%E6%96%B9%E5%BC%8F/wordpress%E4%B8%8D%E8%83%BD%E7%94%A8%E5%9B%BE%E9%9B%86%E5%8A%9F%E8%83%BD.png" width="50%" height="50%"></a><p>所以非特殊情况应该以后不会怎么用这个操作</p><h1 id="使用PicGo和以前使用git上传的区别"><a href="#使用PicGo和以前使用git上传的区别" class="headerlink" title="使用PicGo和以前使用git上传的区别"></a>使用PicGo和以前使用git上传的区别</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul><li>picgo<ul><li>可以直接截图上传，支持重命名</li><li>也可以拖动上传</li></ul></li><li>git<ul><li>只能在全部搞好之后使用命令行一次上传</li></ul></li></ul><h2 id="下载没区别"><a href="#下载没区别" class="headerlink" title="下载没区别"></a>下载没区别</h2><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li>picgo<ul><li>可以直接复制相册里面的，不用去网页一个个点开</li><li>还支持各种格式切换，并且支持自定义</li></ul></li><li>git<ul><li>只能手动点开网页一个个去找</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>PicGo确实对自己有帮助，就是链接不用一个个点开网页了</li><li>而且上传了的图片也可以按照每次重新设置不同的路径让文件放入不同的路径</li><li>git也可以通过先pull的方式继续让本地和远程仓库保持同步</li></ol><p><strong>总而言之还是挺好用的</strong></p>]]></content>
    
    <summary type="html">
    
      使用PicGo上传图库 VScode写makedown使用snippets
    
    </summary>
    
      <category term="write" scheme="http://www.wolfdan.cn/categories/write/"/>
    
    
      <category term="write" scheme="http://www.wolfdan.cn/tags/write/"/>
    
  </entry>
  
  <entry>
    <title>ARST打卡第12周-12-521</title>
    <link href="http://www.wolfdan.cn/2019/07/14/ARST%E6%89%93%E5%8D%A1%E7%AC%AC12%E5%91%A8-12-521/"/>
    <id>http://www.wolfdan.cn/2019/07/14/ARST打卡第12周-12-521/</id>
    <published>2019-07-14T07:22:30.000Z</published>
    <updated>2019-07-15T01:31:43.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/ARST/ARST12/%E6%88%AA%E5%9B%BE%E5%87%8F%E5%B0%8F%E8%B4%A8%E9%87%8F%E6%B3%95.png" alt="题图"></p><h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><p><a href="https://www.wolfdan.cn/2019/07/09/priority-queue%E4%BD%BF%E7%94%A8%E5%9D%91%E7%82%B9%E5%92%8C%E9%A2%98%E9%9B%86/">虽然刷了一些题，写了篇priority_queue入门，但还是太少了呀，下周得好好加油</a></p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">How to define you snippets in VScode?</a></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">PicGo官方文档</a></p><h1 id="Share"><a href="#Share" class="headerlink" title="Share"></a>Share</h1><p><a href="https://www.wolfdan.cn/2019/07/14/makedown%E5%86%99%E4%BD%9C%E8%B6%85%E6%96%B9%E4%BE%BF%E7%9A%84%E5%9B%BE%E7%89%87%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/">makedown写作超方便的图片使用方式</a></p>]]></content>
    
    <summary type="html">
    
      ARST打卡第12周(12/521) priority_queue入门 makedown写作超方便的图片使用方式
    
    </summary>
    
      <category term="ARST" scheme="http://www.wolfdan.cn/categories/ARST/"/>
    
    
      <category term="ARST" scheme="http://www.wolfdan.cn/tags/ARST/"/>
    
  </entry>
  
  <entry>
    <title>下雪啦(#^.^#)</title>
    <link href="http://www.wolfdan.cn/2019/07/11/test/"/>
    <id>http://www.wolfdan.cn/2019/07/11/test/</id>
    <published>2019-07-11T02:57:45.000Z</published>
    <updated>2019-07-21T04:42:37.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下雪啦-The-winter-is-here-让我们一起超越小姐姐吧"><a href="#下雪啦-The-winter-is-here-让我们一起超越小姐姐吧" class="headerlink" title="下雪啦(#^.^#) The winter is here ,让我们一起超越小姐姐吧"></a>下雪啦(#^.^#) The winter is here ,让我们一起超越小姐姐吧</h1><a href="https://gitee.com/wolfdan/BlogPic/raw/master/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%90.jpg" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://gitee.com/wolfdan/BlogPic/raw/master/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%90.jpg" width="50%" height="50%"></a><a href="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%9013.jpg" data-fancybox="images" target="_blank" rel="noopener">    <img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/fancyboy/%E8%B6%85%E8%B6%8A%E5%B0%8F%E5%A7%90%E5%A7%9013.jpg" width="50%" height="50%"></a><h2 id="留个纪念"><a href="#留个纪念" class="headerlink" title="留个纪念"></a>留个纪念</h2><blockquote><p>因为比较烧显卡，而且对访问速度影响比较大，所以就关掉了<br><img src="https://raw.githubusercontent.com/wolfdan666/BlogPic/master/hexo%E4%BC%98%E5%8C%96/%E4%B8%8B%E9%9B%AA%E4%BA%86/%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88%E7%BA%AA%E5%BF%B5.png" alt></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下雪啦-The-winter-is-here-让我们一起超越小姐姐吧&quot;&gt;&lt;a href=&quot;#下雪啦-The-winter-is-here-让我们一起超越小姐姐吧&quot; class=&quot;headerlink&quot; title=&quot;下雪啦(#^.^#) The winter is
      
    
    </summary>
    
      <category term="hexo" scheme="http://www.wolfdan.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.wolfdan.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
